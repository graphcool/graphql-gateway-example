import { Graphcool as BaseGraphcool, BaseGraphcoolOptions } from 'graphcool-binding'
import { GraphQLResolveInfo } from 'graphql'

const typeDefs = `
# THIS FILE HAS BEEN AUTO-GENERATED BY THE "GRAPHCOOL DEPLOY"
# DO NOT EDIT THIS FILE DIRECTLY

#
# Model Types
#

type Amenities implements Node {
  id: ID!
  place(where: PlaceWhereInput): Place!
  elevator: Boolean!
  petsAllowed: Boolean!
  internet: Boolean!
  kitchen: Boolean!
  wirelessInternet: Boolean!
  familyKidFriendly: Boolean!
  freeParkingOnPremises: Boolean!
  hotTub: Boolean!
  pool: Boolean!
  smokingAllowed: Boolean!
  wheelchairAccessible: Boolean!
  breakfast: Boolean!
  cableTv: Boolean!
  suitableForEvents: Boolean!
  dryer: Boolean!
  washer: Boolean!
  indoorFireplace: Boolean!
  tv: Boolean!
  heating: Boolean!
  hangers: Boolean!
  iron: Boolean!
  hairDryer: Boolean!
  doorman: Boolean!
  paidParkingOffPremises: Boolean!
  freeParkingOnStreet: Boolean!
  gym: Boolean!
  airConditioning: Boolean!
  shampoo: Boolean!
  essentials: Boolean!
  laptopFriendlyWorkspace: Boolean!
  privateEntrance: Boolean!
  buzzerWirelessIntercom: Boolean!
  babyBath: Boolean!
  babyMonitor: Boolean!
  babysitterRecommendations: Boolean!
  bathtub: Boolean!
  changingTable: Boolean!
  childrensBooksAndToys: Boolean!
  childrensDinnerware: Boolean!
  crib: Boolean!
}

type Booking implements Node {
  id: ID!
  createdAt: DateTime!
  bookee(where: UserWhereInput): User!
  place(where: PlaceWhereInput): Place!
  startDate: DateTime!
  endDate: DateTime!
  payment(where: PaymentWhereInput): Payment!
}

type City implements Node {
  id: ID!
  name: String!
  neighbourhoods(where: NeighbourhoodWhereInput, orderBy: NeighbourhoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Neighbourhood!]
}

type CreditCardInformation implements Node {
  id: ID!
  createdAt: DateTime!
  cardNumber: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  securityCode: String!
  firstName: String!
  lastName: String!
  postalCode: String!
  country: String!
  paymentAccount(where: PaymentAccountWhereInput): PaymentAccount
}

type Experience implements Node {
  id: ID!
  category(where: ExperienceCategoryWhereInput): ExperienceCategory
  title: String!
  host(where: UserWhereInput): User!
  location(where: LocationWhereInput): Location!
  pricePerPerson: Int!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  preview(where: PictureWhereInput): Picture!
  popularity: Int!
}

type ExperienceCategory implements Node {
  id: ID!
  mainColor: String!
  name: String!
  experience(where: ExperienceWhereInput): Experience
}

type GuestRequirements implements Node {
  id: ID!
  govIssuedId: Boolean!
  recommendationsFromOtherHosts: Boolean!
  guestTripInformation: Boolean!
  place(where: PlaceWhereInput): Place!
}

type HouseRules implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  suitableForChildren: Boolean
  suitableForInfants: Boolean
  petsAllowed: Boolean
  smokingAllowed: Boolean
  partiesAndEventsAllowed: Boolean
  additionalRules: String
}

type Location implements Node {
  id: ID!
  lat: Float!
  lng: Float!
  neighbourHood(where: NeighbourhoodWhereInput): Neighbourhood
  user(where: UserWhereInput): User
  place(where: PlaceWhereInput): Place
  address: String
  directions: String
  experience(where: ExperienceWhereInput): Experience
  restaurant(where: RestaurantWhereInput): Restaurant
}

type Message implements Node {
  id: ID!
  createdAt: DateTime!
  from(where: UserWhereInput): User!
  to(where: UserWhereInput): User!
  deliveredAt: DateTime!
  readAt: DateTime!
}

type Neighbourhood implements Node {
  id: ID!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location!]
  name: String!
  slug: String!
  homePreview(where: PictureWhereInput): Picture
  city(where: CityWhereInput): City!
  featured: Boolean!
  popularity: Int!
}

type Notification implements Node {
  id: ID!
  createdAt: DateTime!
  type: NOTIFICATION_TYPE
  user(where: UserWhereInput): User!
  link: String!
  readDate: DateTime!
}

type Payment implements Node {
  id: ID!
  createdAt: DateTime!
  serviceFee: Float!
  placePrice: Float!
  totalPrice: Float!
  booking(where: BookingWhereInput): Booking!
  paymentMethod(where: PaymentAccountWhereInput): PaymentAccount!
}

type PaymentAccount implements Node {
  id: ID!
  createdAt: DateTime!
  type: PAYMENT_PROVIDER
  user(where: UserWhereInput): User!
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment!]
  paypal(where: PaypalInformationWhereInput): PaypalInformation
  creditcard(where: CreditCardInformationWhereInput): CreditCardInformation
}

type PaypalInformation implements Node {
  id: ID!
  createdAt: DateTime!
  email: String!
  paymentAccount(where: PaymentAccountWhereInput): PaymentAccount!
}

type Picture implements Node {
  id: ID!
  name: String!
  size: Int
  secret: String!
  contentType: String!
}

type Place implements Node {
  id: ID!
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
  amenities(where: AmenitiesWhereInput): Amenities!
  host(where: UserWhereInput): User!
  pricing(where: PricingWhereInput): Pricing!
  location(where: LocationWhereInput): Location!
  views(where: ViewsWhereInput): Views!
  guestRequirements(where: GuestRequirementsWhereInput): GuestRequirements
  policies(where: PoliciesWhereInput): Policies
  houseRules(where: HouseRulesWhereInput): HouseRules
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  pictures(where: PictureWhereInput, orderBy: PictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Picture!]
  popularity: Int!
}

type Policies implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  checkInStartTime: Float!
  checkInEndTime: Float!
  checkoutTime: Float!
  place(where: PlaceWhereInput): Place!
}

type Pricing implements Node {
  id: ID!
  place(where: PlaceWhereInput): Place!
  monthlyDiscount: Int
  weeklyDiscount: Int
  perNight: Int!
  smartPricing: Boolean!
  basePrice: Int!
  averageWeekly: Int!
  averageMonthly: Int!
  cleaningFee: Int
  securityDeposit: Int
  extraGuests: Int
  weekendPricing: Int
  currency: CURRENCY
}

type Restaurant implements Node {
  id: ID!
  createdAt: DateTime!
  title: String!
  avgPricePerPerson: Int!
  pictures(where: PictureWhereInput, orderBy: PictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Picture!]
  location(where: LocationWhereInput): Location!
  isCurated: Boolean!
  slug: String!
  popularity: Int!
}

type Review implements Node {
  id: ID!
  createdAt: DateTime!
  text: String!
  stars: Int!
  accuracy: Int!
  location: Int!
  checkIn: Int!
  value: Int!
  cleanliness: Int!
  communication: Int!
  place(where: PlaceWhereInput): Place!
  experience(where: ExperienceWhereInput): Experience
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean!
  ownedPlaces(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place!]
  location(where: LocationWhereInput): Location
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking!]
  paymentAccount(where: PaymentAccountWhereInput, orderBy: PaymentAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentAccount!]
  sentMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  receivedMessages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message!]
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification!]
  profilePicture(where: PictureWhereInput): Picture
  hostingExperiences(where: ExperienceWhereInput, orderBy: ExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Experience!]
}

type Views implements Node {
  id: ID!
  lastWeek: Int!
  place(where: PlaceWhereInput): Place!
}


#
# Other Types
#

type AmenitiesConnection {
  pageInfo: PageInfo!
  edges: [AmenitiesEdge]!
}

input AmenitiesCreateInput {
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  breakfast: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireplace: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  babyBath: Boolean
  babyMonitor: Boolean
  babysitterRecommendations: Boolean
  bathtub: Boolean
  changingTable: Boolean
  childrensBooksAndToys: Boolean
  childrensDinnerware: Boolean
  crib: Boolean
  place: PlaceCreateOneWithoutAmenitiesInput!
}

input AmenitiesCreateOneWithoutPlaceInput {
  create: AmenitiesCreateWithoutPlaceInput
  connect: AmenitiesWhereUniqueInput
}

input AmenitiesCreateWithoutPlaceInput {
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  breakfast: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireplace: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  babyBath: Boolean
  babyMonitor: Boolean
  babysitterRecommendations: Boolean
  bathtub: Boolean
  changingTable: Boolean
  childrensBooksAndToys: Boolean
  childrensDinnerware: Boolean
  crib: Boolean
}

type AmenitiesEdge {
  node: Amenities!
  cursor: String!
}

enum AmenitiesOrderByInput {
  id_ASC
  id_DESC
  elevator_ASC
  elevator_DESC
  petsAllowed_ASC
  petsAllowed_DESC
  internet_ASC
  internet_DESC
  kitchen_ASC
  kitchen_DESC
  wirelessInternet_ASC
  wirelessInternet_DESC
  familyKidFriendly_ASC
  familyKidFriendly_DESC
  freeParkingOnPremises_ASC
  freeParkingOnPremises_DESC
  hotTub_ASC
  hotTub_DESC
  pool_ASC
  pool_DESC
  smokingAllowed_ASC
  smokingAllowed_DESC
  wheelchairAccessible_ASC
  wheelchairAccessible_DESC
  breakfast_ASC
  breakfast_DESC
  cableTv_ASC
  cableTv_DESC
  suitableForEvents_ASC
  suitableForEvents_DESC
  dryer_ASC
  dryer_DESC
  washer_ASC
  washer_DESC
  indoorFireplace_ASC
  indoorFireplace_DESC
  tv_ASC
  tv_DESC
  heating_ASC
  heating_DESC
  hangers_ASC
  hangers_DESC
  iron_ASC
  iron_DESC
  hairDryer_ASC
  hairDryer_DESC
  doorman_ASC
  doorman_DESC
  paidParkingOffPremises_ASC
  paidParkingOffPremises_DESC
  freeParkingOnStreet_ASC
  freeParkingOnStreet_DESC
  gym_ASC
  gym_DESC
  airConditioning_ASC
  airConditioning_DESC
  shampoo_ASC
  shampoo_DESC
  essentials_ASC
  essentials_DESC
  laptopFriendlyWorkspace_ASC
  laptopFriendlyWorkspace_DESC
  privateEntrance_ASC
  privateEntrance_DESC
  buzzerWirelessIntercom_ASC
  buzzerWirelessIntercom_DESC
  babyBath_ASC
  babyBath_DESC
  babyMonitor_ASC
  babyMonitor_DESC
  babysitterRecommendations_ASC
  babysitterRecommendations_DESC
  bathtub_ASC
  bathtub_DESC
  changingTable_ASC
  changingTable_DESC
  childrensBooksAndToys_ASC
  childrensBooksAndToys_DESC
  childrensDinnerware_ASC
  childrensDinnerware_DESC
  crib_ASC
  crib_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type AmenitiesPreviousValues {
  id: ID!
  elevator: Boolean!
  petsAllowed: Boolean!
  internet: Boolean!
  kitchen: Boolean!
  wirelessInternet: Boolean!
  familyKidFriendly: Boolean!
  freeParkingOnPremises: Boolean!
  hotTub: Boolean!
  pool: Boolean!
  smokingAllowed: Boolean!
  wheelchairAccessible: Boolean!
  breakfast: Boolean!
  cableTv: Boolean!
  suitableForEvents: Boolean!
  dryer: Boolean!
  washer: Boolean!
  indoorFireplace: Boolean!
  tv: Boolean!
  heating: Boolean!
  hangers: Boolean!
  iron: Boolean!
  hairDryer: Boolean!
  doorman: Boolean!
  paidParkingOffPremises: Boolean!
  freeParkingOnStreet: Boolean!
  gym: Boolean!
  airConditioning: Boolean!
  shampoo: Boolean!
  essentials: Boolean!
  laptopFriendlyWorkspace: Boolean!
  privateEntrance: Boolean!
  buzzerWirelessIntercom: Boolean!
  babyBath: Boolean!
  babyMonitor: Boolean!
  babysitterRecommendations: Boolean!
  bathtub: Boolean!
  changingTable: Boolean!
  childrensBooksAndToys: Boolean!
  childrensDinnerware: Boolean!
  crib: Boolean!
}

type AmenitiesSubscriptionPayload {
  mutation: MutationType!
  node: Amenities
  updatedFields: [String!]
  previousValues: AmenitiesPreviousValues
}

input AmenitiesSubscriptionWhereInput {
  AND: [AmenitiesSubscriptionWhereInput!]
  OR: [AmenitiesSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: AmenitiesWhereInput
}

input AmenitiesUpdateInput {
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  breakfast: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireplace: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  babyBath: Boolean
  babyMonitor: Boolean
  babysitterRecommendations: Boolean
  bathtub: Boolean
  changingTable: Boolean
  childrensBooksAndToys: Boolean
  childrensDinnerware: Boolean
  crib: Boolean
  place: PlaceUpdateOneWithoutAmenitiesInput
}

input AmenitiesUpdateOneWithoutPlaceInput {
  create: AmenitiesCreateWithoutPlaceInput
  connect: AmenitiesWhereUniqueInput
  disconnect: AmenitiesWhereUniqueInput
  delete: AmenitiesWhereUniqueInput
  update: AmenitiesUpdateWithoutPlaceInput
  upsert: AmenitiesUpsertWithoutPlaceInput
}

input AmenitiesUpdateWithoutPlaceDataInput {
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  breakfast: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireplace: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  babyBath: Boolean
  babyMonitor: Boolean
  babysitterRecommendations: Boolean
  bathtub: Boolean
  changingTable: Boolean
  childrensBooksAndToys: Boolean
  childrensDinnerware: Boolean
  crib: Boolean
}

input AmenitiesUpdateWithoutPlaceInput {
  where: AmenitiesWhereUniqueInput!
  data: AmenitiesUpdateWithoutPlaceDataInput!
}

input AmenitiesUpsertWithoutPlaceInput {
  where: AmenitiesWhereUniqueInput!
  update: AmenitiesUpdateWithoutPlaceDataInput!
  create: AmenitiesCreateWithoutPlaceInput!
}

input AmenitiesWhereInput {
  AND: [AmenitiesWhereInput!]
  OR: [AmenitiesWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  elevator: Boolean
  elevator_not: Boolean
  petsAllowed: Boolean
  petsAllowed_not: Boolean
  internet: Boolean
  internet_not: Boolean
  kitchen: Boolean
  kitchen_not: Boolean
  wirelessInternet: Boolean
  wirelessInternet_not: Boolean
  familyKidFriendly: Boolean
  familyKidFriendly_not: Boolean
  freeParkingOnPremises: Boolean
  freeParkingOnPremises_not: Boolean
  hotTub: Boolean
  hotTub_not: Boolean
  pool: Boolean
  pool_not: Boolean
  smokingAllowed: Boolean
  smokingAllowed_not: Boolean
  wheelchairAccessible: Boolean
  wheelchairAccessible_not: Boolean
  breakfast: Boolean
  breakfast_not: Boolean
  cableTv: Boolean
  cableTv_not: Boolean
  suitableForEvents: Boolean
  suitableForEvents_not: Boolean
  dryer: Boolean
  dryer_not: Boolean
  washer: Boolean
  washer_not: Boolean
  indoorFireplace: Boolean
  indoorFireplace_not: Boolean
  tv: Boolean
  tv_not: Boolean
  heating: Boolean
  heating_not: Boolean
  hangers: Boolean
  hangers_not: Boolean
  iron: Boolean
  iron_not: Boolean
  hairDryer: Boolean
  hairDryer_not: Boolean
  doorman: Boolean
  doorman_not: Boolean
  paidParkingOffPremises: Boolean
  paidParkingOffPremises_not: Boolean
  freeParkingOnStreet: Boolean
  freeParkingOnStreet_not: Boolean
  gym: Boolean
  gym_not: Boolean
  airConditioning: Boolean
  airConditioning_not: Boolean
  shampoo: Boolean
  shampoo_not: Boolean
  essentials: Boolean
  essentials_not: Boolean
  laptopFriendlyWorkspace: Boolean
  laptopFriendlyWorkspace_not: Boolean
  privateEntrance: Boolean
  privateEntrance_not: Boolean
  buzzerWirelessIntercom: Boolean
  buzzerWirelessIntercom_not: Boolean
  babyBath: Boolean
  babyBath_not: Boolean
  babyMonitor: Boolean
  babyMonitor_not: Boolean
  babysitterRecommendations: Boolean
  babysitterRecommendations_not: Boolean
  bathtub: Boolean
  bathtub_not: Boolean
  changingTable: Boolean
  changingTable_not: Boolean
  childrensBooksAndToys: Boolean
  childrensBooksAndToys_not: Boolean
  childrensDinnerware: Boolean
  childrensDinnerware_not: Boolean
  crib: Boolean
  crib_not: Boolean
  place: PlaceWhereInput
}

input AmenitiesWhereUniqueInput {
  id: ID
}

type BatchPayload {
  count: Long!
}

type BookingConnection {
  pageInfo: PageInfo!
  edges: [BookingEdge]!
}

input BookingCreateInput {
  startDate: DateTime!
  endDate: DateTime!
  bookee: UserCreateOneWithoutBookingsInput!
  place: PlaceCreateOneWithoutBookingsInput!
  payment: PaymentCreateOneWithoutBookingInput!
}

input BookingCreateManyWithoutBookeeInput {
  create: [BookingCreateWithoutBookeeInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateManyWithoutPlaceInput {
  create: [BookingCreateWithoutPlaceInput!]
  connect: [BookingWhereUniqueInput!]
}

input BookingCreateOneWithoutPaymentInput {
  create: BookingCreateWithoutPaymentInput
  connect: BookingWhereUniqueInput
}

input BookingCreateWithoutBookeeInput {
  startDate: DateTime!
  endDate: DateTime!
  place: PlaceCreateOneWithoutBookingsInput!
  payment: PaymentCreateOneWithoutBookingInput!
}

input BookingCreateWithoutPaymentInput {
  startDate: DateTime!
  endDate: DateTime!
  bookee: UserCreateOneWithoutBookingsInput!
  place: PlaceCreateOneWithoutBookingsInput!
}

input BookingCreateWithoutPlaceInput {
  startDate: DateTime!
  endDate: DateTime!
  bookee: UserCreateOneWithoutBookingsInput!
  payment: PaymentCreateOneWithoutBookingInput!
}

type BookingEdge {
  node: Booking!
  cursor: String!
}

enum BookingOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  startDate_ASC
  startDate_DESC
  endDate_ASC
  endDate_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type BookingPreviousValues {
  id: ID!
  createdAt: DateTime!
  startDate: DateTime!
  endDate: DateTime!
}

type BookingSubscriptionPayload {
  mutation: MutationType!
  node: Booking
  updatedFields: [String!]
  previousValues: BookingPreviousValues
}

input BookingSubscriptionWhereInput {
  AND: [BookingSubscriptionWhereInput!]
  OR: [BookingSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: BookingWhereInput
}

input BookingUpdateInput {
  startDate: DateTime
  endDate: DateTime
  bookee: UserUpdateOneWithoutBookingsInput
  place: PlaceUpdateOneWithoutBookingsInput
  payment: PaymentUpdateOneWithoutBookingInput
}

input BookingUpdateManyWithoutBookeeInput {
  create: [BookingCreateWithoutBookeeInput!]
  connect: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithoutBookeeInput!]
  upsert: [BookingUpsertWithoutBookeeInput!]
}

input BookingUpdateManyWithoutPlaceInput {
  create: [BookingCreateWithoutPlaceInput!]
  connect: [BookingWhereUniqueInput!]
  disconnect: [BookingWhereUniqueInput!]
  delete: [BookingWhereUniqueInput!]
  update: [BookingUpdateWithoutPlaceInput!]
  upsert: [BookingUpsertWithoutPlaceInput!]
}

input BookingUpdateOneWithoutPaymentInput {
  create: BookingCreateWithoutPaymentInput
  connect: BookingWhereUniqueInput
  disconnect: BookingWhereUniqueInput
  delete: BookingWhereUniqueInput
  update: BookingUpdateWithoutPaymentInput
  upsert: BookingUpsertWithoutPaymentInput
}

input BookingUpdateWithoutBookeeDataInput {
  startDate: DateTime
  endDate: DateTime
  place: PlaceUpdateOneWithoutBookingsInput
  payment: PaymentUpdateOneWithoutBookingInput
}

input BookingUpdateWithoutBookeeInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutBookeeDataInput!
}

input BookingUpdateWithoutPaymentDataInput {
  startDate: DateTime
  endDate: DateTime
  bookee: UserUpdateOneWithoutBookingsInput
  place: PlaceUpdateOneWithoutBookingsInput
}

input BookingUpdateWithoutPaymentInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutPaymentDataInput!
}

input BookingUpdateWithoutPlaceDataInput {
  startDate: DateTime
  endDate: DateTime
  bookee: UserUpdateOneWithoutBookingsInput
  payment: PaymentUpdateOneWithoutBookingInput
}

input BookingUpdateWithoutPlaceInput {
  where: BookingWhereUniqueInput!
  data: BookingUpdateWithoutPlaceDataInput!
}

input BookingUpsertWithoutBookeeInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutBookeeDataInput!
  create: BookingCreateWithoutBookeeInput!
}

input BookingUpsertWithoutPaymentInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutPaymentDataInput!
  create: BookingCreateWithoutPaymentInput!
}

input BookingUpsertWithoutPlaceInput {
  where: BookingWhereUniqueInput!
  update: BookingUpdateWithoutPlaceDataInput!
  create: BookingCreateWithoutPlaceInput!
}

input BookingWhereInput {
  AND: [BookingWhereInput!]
  OR: [BookingWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  startDate: DateTime
  startDate_not: DateTime
  startDate_in: [DateTime!]
  startDate_not_in: [DateTime!]
  startDate_lt: DateTime
  startDate_lte: DateTime
  startDate_gt: DateTime
  startDate_gte: DateTime
  endDate: DateTime
  endDate_not: DateTime
  endDate_in: [DateTime!]
  endDate_not_in: [DateTime!]
  endDate_lt: DateTime
  endDate_lte: DateTime
  endDate_gt: DateTime
  endDate_gte: DateTime
  bookee: UserWhereInput
  place: PlaceWhereInput
  payment: PaymentWhereInput
}

input BookingWhereUniqueInput {
  id: ID
}

type CityConnection {
  pageInfo: PageInfo!
  edges: [CityEdge]!
}

input CityCreateInput {
  name: String!
  neighbourhoods: NeighbourhoodCreateManyWithoutCityInput
}

input CityCreateOneWithoutNeighbourhoodsInput {
  create: CityCreateWithoutNeighbourhoodsInput
  connect: CityWhereUniqueInput
}

input CityCreateWithoutNeighbourhoodsInput {
  name: String!
}

type CityEdge {
  node: City!
  cursor: String!
}

enum CityOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type CityPreviousValues {
  id: ID!
  name: String!
}

type CitySubscriptionPayload {
  mutation: MutationType!
  node: City
  updatedFields: [String!]
  previousValues: CityPreviousValues
}

input CitySubscriptionWhereInput {
  AND: [CitySubscriptionWhereInput!]
  OR: [CitySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CityWhereInput
}

input CityUpdateInput {
  name: String
  neighbourhoods: NeighbourhoodUpdateManyWithoutCityInput
}

input CityUpdateOneWithoutNeighbourhoodsInput {
  create: CityCreateWithoutNeighbourhoodsInput
  connect: CityWhereUniqueInput
  disconnect: CityWhereUniqueInput
  delete: CityWhereUniqueInput
  update: CityUpdateWithoutNeighbourhoodsInput
  upsert: CityUpsertWithoutNeighbourhoodsInput
}

input CityUpdateWithoutNeighbourhoodsDataInput {
  name: String
}

input CityUpdateWithoutNeighbourhoodsInput {
  where: CityWhereUniqueInput!
  data: CityUpdateWithoutNeighbourhoodsDataInput!
}

input CityUpsertWithoutNeighbourhoodsInput {
  where: CityWhereUniqueInput!
  update: CityUpdateWithoutNeighbourhoodsDataInput!
  create: CityCreateWithoutNeighbourhoodsInput!
}

input CityWhereInput {
  AND: [CityWhereInput!]
  OR: [CityWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  neighbourhoods_every: NeighbourhoodWhereInput
  neighbourhoods_some: NeighbourhoodWhereInput
  neighbourhoods_none: NeighbourhoodWhereInput
}

input CityWhereUniqueInput {
  id: ID
}

type CreditCardInformationConnection {
  pageInfo: PageInfo!
  edges: [CreditCardInformationEdge]!
}

input CreditCardInformationCreateInput {
  cardNumber: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  securityCode: String!
  firstName: String!
  lastName: String!
  postalCode: String!
  country: String!
  paymentAccount: PaymentAccountCreateOneWithoutCreditcardInput
}

input CreditCardInformationCreateOneWithoutPaymentAccountInput {
  create: CreditCardInformationCreateWithoutPaymentAccountInput
  connect: CreditCardInformationWhereUniqueInput
}

input CreditCardInformationCreateWithoutPaymentAccountInput {
  cardNumber: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  securityCode: String!
  firstName: String!
  lastName: String!
  postalCode: String!
  country: String!
}

type CreditCardInformationEdge {
  node: CreditCardInformation!
  cursor: String!
}

enum CreditCardInformationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  cardNumber_ASC
  cardNumber_DESC
  expiresOnMonth_ASC
  expiresOnMonth_DESC
  expiresOnYear_ASC
  expiresOnYear_DESC
  securityCode_ASC
  securityCode_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  postalCode_ASC
  postalCode_DESC
  country_ASC
  country_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type CreditCardInformationPreviousValues {
  id: ID!
  createdAt: DateTime!
  cardNumber: String!
  expiresOnMonth: Int!
  expiresOnYear: Int!
  securityCode: String!
  firstName: String!
  lastName: String!
  postalCode: String!
  country: String!
}

type CreditCardInformationSubscriptionPayload {
  mutation: MutationType!
  node: CreditCardInformation
  updatedFields: [String!]
  previousValues: CreditCardInformationPreviousValues
}

input CreditCardInformationSubscriptionWhereInput {
  AND: [CreditCardInformationSubscriptionWhereInput!]
  OR: [CreditCardInformationSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: CreditCardInformationWhereInput
}

input CreditCardInformationUpdateInput {
  cardNumber: String
  expiresOnMonth: Int
  expiresOnYear: Int
  securityCode: String
  firstName: String
  lastName: String
  postalCode: String
  country: String
  paymentAccount: PaymentAccountUpdateOneWithoutCreditcardInput
}

input CreditCardInformationUpdateOneWithoutPaymentAccountInput {
  create: CreditCardInformationCreateWithoutPaymentAccountInput
  connect: CreditCardInformationWhereUniqueInput
  disconnect: CreditCardInformationWhereUniqueInput
  delete: CreditCardInformationWhereUniqueInput
  update: CreditCardInformationUpdateWithoutPaymentAccountInput
  upsert: CreditCardInformationUpsertWithoutPaymentAccountInput
}

input CreditCardInformationUpdateWithoutPaymentAccountDataInput {
  cardNumber: String
  expiresOnMonth: Int
  expiresOnYear: Int
  securityCode: String
  firstName: String
  lastName: String
  postalCode: String
  country: String
}

input CreditCardInformationUpdateWithoutPaymentAccountInput {
  where: CreditCardInformationWhereUniqueInput!
  data: CreditCardInformationUpdateWithoutPaymentAccountDataInput!
}

input CreditCardInformationUpsertWithoutPaymentAccountInput {
  where: CreditCardInformationWhereUniqueInput!
  update: CreditCardInformationUpdateWithoutPaymentAccountDataInput!
  create: CreditCardInformationCreateWithoutPaymentAccountInput!
}

input CreditCardInformationWhereInput {
  AND: [CreditCardInformationWhereInput!]
  OR: [CreditCardInformationWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  cardNumber: String
  cardNumber_not: String
  cardNumber_in: [String!]
  cardNumber_not_in: [String!]
  cardNumber_lt: String
  cardNumber_lte: String
  cardNumber_gt: String
  cardNumber_gte: String
  cardNumber_contains: String
  cardNumber_not_contains: String
  cardNumber_starts_with: String
  cardNumber_not_starts_with: String
  cardNumber_ends_with: String
  cardNumber_not_ends_with: String
  expiresOnMonth: Int
  expiresOnMonth_not: Int
  expiresOnMonth_in: [Int!]
  expiresOnMonth_not_in: [Int!]
  expiresOnMonth_lt: Int
  expiresOnMonth_lte: Int
  expiresOnMonth_gt: Int
  expiresOnMonth_gte: Int
  expiresOnYear: Int
  expiresOnYear_not: Int
  expiresOnYear_in: [Int!]
  expiresOnYear_not_in: [Int!]
  expiresOnYear_lt: Int
  expiresOnYear_lte: Int
  expiresOnYear_gt: Int
  expiresOnYear_gte: Int
  securityCode: String
  securityCode_not: String
  securityCode_in: [String!]
  securityCode_not_in: [String!]
  securityCode_lt: String
  securityCode_lte: String
  securityCode_gt: String
  securityCode_gte: String
  securityCode_contains: String
  securityCode_not_contains: String
  securityCode_starts_with: String
  securityCode_not_starts_with: String
  securityCode_ends_with: String
  securityCode_not_ends_with: String
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  postalCode: String
  postalCode_not: String
  postalCode_in: [String!]
  postalCode_not_in: [String!]
  postalCode_lt: String
  postalCode_lte: String
  postalCode_gt: String
  postalCode_gte: String
  postalCode_contains: String
  postalCode_not_contains: String
  postalCode_starts_with: String
  postalCode_not_starts_with: String
  postalCode_ends_with: String
  postalCode_not_ends_with: String
  country: String
  country_not: String
  country_in: [String!]
  country_not_in: [String!]
  country_lt: String
  country_lte: String
  country_gt: String
  country_gte: String
  country_contains: String
  country_not_contains: String
  country_starts_with: String
  country_not_starts_with: String
  country_ends_with: String
  country_not_ends_with: String
  paymentAccount: PaymentAccountWhereInput
}

input CreditCardInformationWhereUniqueInput {
  id: ID
}

enum CURRENCY {
  CAD
  CHF
  EUR
  JPY
  USD
  ZAR
}

scalar DateTime

type ExperienceCategoryConnection {
  pageInfo: PageInfo!
  edges: [ExperienceCategoryEdge]!
}

input ExperienceCategoryCreateInput {
  mainColor: String
  name: String!
  experience: ExperienceCreateOneWithoutCategoryInput
}

input ExperienceCategoryCreateOneWithoutExperienceInput {
  create: ExperienceCategoryCreateWithoutExperienceInput
  connect: ExperienceCategoryWhereUniqueInput
}

input ExperienceCategoryCreateWithoutExperienceInput {
  mainColor: String
  name: String!
}

type ExperienceCategoryEdge {
  node: ExperienceCategory!
  cursor: String!
}

enum ExperienceCategoryOrderByInput {
  id_ASC
  id_DESC
  mainColor_ASC
  mainColor_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ExperienceCategoryPreviousValues {
  id: ID!
  mainColor: String!
  name: String!
}

type ExperienceCategorySubscriptionPayload {
  mutation: MutationType!
  node: ExperienceCategory
  updatedFields: [String!]
  previousValues: ExperienceCategoryPreviousValues
}

input ExperienceCategorySubscriptionWhereInput {
  AND: [ExperienceCategorySubscriptionWhereInput!]
  OR: [ExperienceCategorySubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExperienceCategoryWhereInput
}

input ExperienceCategoryUpdateInput {
  mainColor: String
  name: String
  experience: ExperienceUpdateOneWithoutCategoryInput
}

input ExperienceCategoryUpdateOneWithoutExperienceInput {
  create: ExperienceCategoryCreateWithoutExperienceInput
  connect: ExperienceCategoryWhereUniqueInput
  disconnect: ExperienceCategoryWhereUniqueInput
  delete: ExperienceCategoryWhereUniqueInput
  update: ExperienceCategoryUpdateWithoutExperienceInput
  upsert: ExperienceCategoryUpsertWithoutExperienceInput
}

input ExperienceCategoryUpdateWithoutExperienceDataInput {
  mainColor: String
  name: String
}

input ExperienceCategoryUpdateWithoutExperienceInput {
  where: ExperienceCategoryWhereUniqueInput!
  data: ExperienceCategoryUpdateWithoutExperienceDataInput!
}

input ExperienceCategoryUpsertWithoutExperienceInput {
  where: ExperienceCategoryWhereUniqueInput!
  update: ExperienceCategoryUpdateWithoutExperienceDataInput!
  create: ExperienceCategoryCreateWithoutExperienceInput!
}

input ExperienceCategoryWhereInput {
  AND: [ExperienceCategoryWhereInput!]
  OR: [ExperienceCategoryWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  mainColor: String
  mainColor_not: String
  mainColor_in: [String!]
  mainColor_not_in: [String!]
  mainColor_lt: String
  mainColor_lte: String
  mainColor_gt: String
  mainColor_gte: String
  mainColor_contains: String
  mainColor_not_contains: String
  mainColor_starts_with: String
  mainColor_not_starts_with: String
  mainColor_ends_with: String
  mainColor_not_ends_with: String
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  experience: ExperienceWhereInput
}

input ExperienceCategoryWhereUniqueInput {
  id: ID
}

type ExperienceConnection {
  pageInfo: PageInfo!
  edges: [ExperienceEdge]!
}

input ExperienceCreateInput {
  title: String!
  pricePerPerson: Int!
  popularity: Int!
  category: ExperienceCategoryCreateOneWithoutExperienceInput
  host: UserCreateOneWithoutHostingExperiencesInput!
  location: LocationCreateOneWithoutExperienceInput!
  reviews: ReviewCreateManyWithoutExperienceInput
  preview: PictureCreateOneInput!
}

input ExperienceCreateManyWithoutHostInput {
  create: [ExperienceCreateWithoutHostInput!]
  connect: [ExperienceWhereUniqueInput!]
}

input ExperienceCreateOneWithoutCategoryInput {
  create: ExperienceCreateWithoutCategoryInput
  connect: ExperienceWhereUniqueInput
}

input ExperienceCreateOneWithoutLocationInput {
  create: ExperienceCreateWithoutLocationInput
  connect: ExperienceWhereUniqueInput
}

input ExperienceCreateOneWithoutReviewsInput {
  create: ExperienceCreateWithoutReviewsInput
  connect: ExperienceWhereUniqueInput
}

input ExperienceCreateWithoutCategoryInput {
  title: String!
  pricePerPerson: Int!
  popularity: Int!
  host: UserCreateOneWithoutHostingExperiencesInput!
  location: LocationCreateOneWithoutExperienceInput!
  reviews: ReviewCreateManyWithoutExperienceInput
  preview: PictureCreateOneInput!
}

input ExperienceCreateWithoutHostInput {
  title: String!
  pricePerPerson: Int!
  popularity: Int!
  category: ExperienceCategoryCreateOneWithoutExperienceInput
  location: LocationCreateOneWithoutExperienceInput!
  reviews: ReviewCreateManyWithoutExperienceInput
  preview: PictureCreateOneInput!
}

input ExperienceCreateWithoutLocationInput {
  title: String!
  pricePerPerson: Int!
  popularity: Int!
  category: ExperienceCategoryCreateOneWithoutExperienceInput
  host: UserCreateOneWithoutHostingExperiencesInput!
  reviews: ReviewCreateManyWithoutExperienceInput
  preview: PictureCreateOneInput!
}

input ExperienceCreateWithoutReviewsInput {
  title: String!
  pricePerPerson: Int!
  popularity: Int!
  category: ExperienceCategoryCreateOneWithoutExperienceInput
  host: UserCreateOneWithoutHostingExperiencesInput!
  location: LocationCreateOneWithoutExperienceInput!
  preview: PictureCreateOneInput!
}

type ExperienceEdge {
  node: Experience!
  cursor: String!
}

enum ExperienceOrderByInput {
  id_ASC
  id_DESC
  title_ASC
  title_DESC
  pricePerPerson_ASC
  pricePerPerson_DESC
  popularity_ASC
  popularity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ExperiencePreviousValues {
  id: ID!
  title: String!
  pricePerPerson: Int!
  popularity: Int!
}

type ExperienceSubscriptionPayload {
  mutation: MutationType!
  node: Experience
  updatedFields: [String!]
  previousValues: ExperiencePreviousValues
}

input ExperienceSubscriptionWhereInput {
  AND: [ExperienceSubscriptionWhereInput!]
  OR: [ExperienceSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ExperienceWhereInput
}

input ExperienceUpdateInput {
  title: String
  pricePerPerson: Int
  popularity: Int
  category: ExperienceCategoryUpdateOneWithoutExperienceInput
  host: UserUpdateOneWithoutHostingExperiencesInput
  location: LocationUpdateOneWithoutExperienceInput
  reviews: ReviewUpdateManyWithoutExperienceInput
  preview: PictureUpdateOneInput
}

input ExperienceUpdateManyWithoutHostInput {
  create: [ExperienceCreateWithoutHostInput!]
  connect: [ExperienceWhereUniqueInput!]
  disconnect: [ExperienceWhereUniqueInput!]
  delete: [ExperienceWhereUniqueInput!]
  update: [ExperienceUpdateWithoutHostInput!]
  upsert: [ExperienceUpsertWithoutHostInput!]
}

input ExperienceUpdateOneWithoutCategoryInput {
  create: ExperienceCreateWithoutCategoryInput
  connect: ExperienceWhereUniqueInput
  disconnect: ExperienceWhereUniqueInput
  delete: ExperienceWhereUniqueInput
  update: ExperienceUpdateWithoutCategoryInput
  upsert: ExperienceUpsertWithoutCategoryInput
}

input ExperienceUpdateOneWithoutLocationInput {
  create: ExperienceCreateWithoutLocationInput
  connect: ExperienceWhereUniqueInput
  disconnect: ExperienceWhereUniqueInput
  delete: ExperienceWhereUniqueInput
  update: ExperienceUpdateWithoutLocationInput
  upsert: ExperienceUpsertWithoutLocationInput
}

input ExperienceUpdateOneWithoutReviewsInput {
  create: ExperienceCreateWithoutReviewsInput
  connect: ExperienceWhereUniqueInput
  disconnect: ExperienceWhereUniqueInput
  delete: ExperienceWhereUniqueInput
  update: ExperienceUpdateWithoutReviewsInput
  upsert: ExperienceUpsertWithoutReviewsInput
}

input ExperienceUpdateWithoutCategoryDataInput {
  title: String
  pricePerPerson: Int
  popularity: Int
  host: UserUpdateOneWithoutHostingExperiencesInput
  location: LocationUpdateOneWithoutExperienceInput
  reviews: ReviewUpdateManyWithoutExperienceInput
  preview: PictureUpdateOneInput
}

input ExperienceUpdateWithoutCategoryInput {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateWithoutCategoryDataInput!
}

input ExperienceUpdateWithoutHostDataInput {
  title: String
  pricePerPerson: Int
  popularity: Int
  category: ExperienceCategoryUpdateOneWithoutExperienceInput
  location: LocationUpdateOneWithoutExperienceInput
  reviews: ReviewUpdateManyWithoutExperienceInput
  preview: PictureUpdateOneInput
}

input ExperienceUpdateWithoutHostInput {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateWithoutHostDataInput!
}

input ExperienceUpdateWithoutLocationDataInput {
  title: String
  pricePerPerson: Int
  popularity: Int
  category: ExperienceCategoryUpdateOneWithoutExperienceInput
  host: UserUpdateOneWithoutHostingExperiencesInput
  reviews: ReviewUpdateManyWithoutExperienceInput
  preview: PictureUpdateOneInput
}

input ExperienceUpdateWithoutLocationInput {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateWithoutLocationDataInput!
}

input ExperienceUpdateWithoutReviewsDataInput {
  title: String
  pricePerPerson: Int
  popularity: Int
  category: ExperienceCategoryUpdateOneWithoutExperienceInput
  host: UserUpdateOneWithoutHostingExperiencesInput
  location: LocationUpdateOneWithoutExperienceInput
  preview: PictureUpdateOneInput
}

input ExperienceUpdateWithoutReviewsInput {
  where: ExperienceWhereUniqueInput!
  data: ExperienceUpdateWithoutReviewsDataInput!
}

input ExperienceUpsertWithoutCategoryInput {
  where: ExperienceWhereUniqueInput!
  update: ExperienceUpdateWithoutCategoryDataInput!
  create: ExperienceCreateWithoutCategoryInput!
}

input ExperienceUpsertWithoutHostInput {
  where: ExperienceWhereUniqueInput!
  update: ExperienceUpdateWithoutHostDataInput!
  create: ExperienceCreateWithoutHostInput!
}

input ExperienceUpsertWithoutLocationInput {
  where: ExperienceWhereUniqueInput!
  update: ExperienceUpdateWithoutLocationDataInput!
  create: ExperienceCreateWithoutLocationInput!
}

input ExperienceUpsertWithoutReviewsInput {
  where: ExperienceWhereUniqueInput!
  update: ExperienceUpdateWithoutReviewsDataInput!
  create: ExperienceCreateWithoutReviewsInput!
}

input ExperienceWhereInput {
  AND: [ExperienceWhereInput!]
  OR: [ExperienceWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  pricePerPerson: Int
  pricePerPerson_not: Int
  pricePerPerson_in: [Int!]
  pricePerPerson_not_in: [Int!]
  pricePerPerson_lt: Int
  pricePerPerson_lte: Int
  pricePerPerson_gt: Int
  pricePerPerson_gte: Int
  popularity: Int
  popularity_not: Int
  popularity_in: [Int!]
  popularity_not_in: [Int!]
  popularity_lt: Int
  popularity_lte: Int
  popularity_gt: Int
  popularity_gte: Int
  category: ExperienceCategoryWhereInput
  host: UserWhereInput
  location: LocationWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  preview: PictureWhereInput
}

input ExperienceWhereUniqueInput {
  id: ID
}

type GuestRequirementsConnection {
  pageInfo: PageInfo!
  edges: [GuestRequirementsEdge]!
}

input GuestRequirementsCreateInput {
  govIssuedId: Boolean
  recommendationsFromOtherHosts: Boolean
  guestTripInformation: Boolean
  place: PlaceCreateOneWithoutGuestRequirementsInput!
}

input GuestRequirementsCreateOneWithoutPlaceInput {
  create: GuestRequirementsCreateWithoutPlaceInput
  connect: GuestRequirementsWhereUniqueInput
}

input GuestRequirementsCreateWithoutPlaceInput {
  govIssuedId: Boolean
  recommendationsFromOtherHosts: Boolean
  guestTripInformation: Boolean
}

type GuestRequirementsEdge {
  node: GuestRequirements!
  cursor: String!
}

enum GuestRequirementsOrderByInput {
  id_ASC
  id_DESC
  govIssuedId_ASC
  govIssuedId_DESC
  recommendationsFromOtherHosts_ASC
  recommendationsFromOtherHosts_DESC
  guestTripInformation_ASC
  guestTripInformation_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GuestRequirementsPreviousValues {
  id: ID!
  govIssuedId: Boolean!
  recommendationsFromOtherHosts: Boolean!
  guestTripInformation: Boolean!
}

type GuestRequirementsSubscriptionPayload {
  mutation: MutationType!
  node: GuestRequirements
  updatedFields: [String!]
  previousValues: GuestRequirementsPreviousValues
}

input GuestRequirementsSubscriptionWhereInput {
  AND: [GuestRequirementsSubscriptionWhereInput!]
  OR: [GuestRequirementsSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: GuestRequirementsWhereInput
}

input GuestRequirementsUpdateInput {
  govIssuedId: Boolean
  recommendationsFromOtherHosts: Boolean
  guestTripInformation: Boolean
  place: PlaceUpdateOneWithoutGuestRequirementsInput
}

input GuestRequirementsUpdateOneWithoutPlaceInput {
  create: GuestRequirementsCreateWithoutPlaceInput
  connect: GuestRequirementsWhereUniqueInput
  disconnect: GuestRequirementsWhereUniqueInput
  delete: GuestRequirementsWhereUniqueInput
  update: GuestRequirementsUpdateWithoutPlaceInput
  upsert: GuestRequirementsUpsertWithoutPlaceInput
}

input GuestRequirementsUpdateWithoutPlaceDataInput {
  govIssuedId: Boolean
  recommendationsFromOtherHosts: Boolean
  guestTripInformation: Boolean
}

input GuestRequirementsUpdateWithoutPlaceInput {
  where: GuestRequirementsWhereUniqueInput!
  data: GuestRequirementsUpdateWithoutPlaceDataInput!
}

input GuestRequirementsUpsertWithoutPlaceInput {
  where: GuestRequirementsWhereUniqueInput!
  update: GuestRequirementsUpdateWithoutPlaceDataInput!
  create: GuestRequirementsCreateWithoutPlaceInput!
}

input GuestRequirementsWhereInput {
  AND: [GuestRequirementsWhereInput!]
  OR: [GuestRequirementsWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  govIssuedId: Boolean
  govIssuedId_not: Boolean
  recommendationsFromOtherHosts: Boolean
  recommendationsFromOtherHosts_not: Boolean
  guestTripInformation: Boolean
  guestTripInformation_not: Boolean
  place: PlaceWhereInput
}

input GuestRequirementsWhereUniqueInput {
  id: ID
}

type HouseRulesConnection {
  pageInfo: PageInfo!
  edges: [HouseRulesEdge]!
}

input HouseRulesCreateInput {
  suitableForChildren: Boolean
  suitableForInfants: Boolean
  petsAllowed: Boolean
  smokingAllowed: Boolean
  partiesAndEventsAllowed: Boolean
  additionalRules: String
}

input HouseRulesCreateOneInput {
  create: HouseRulesCreateInput
  connect: HouseRulesWhereUniqueInput
}

type HouseRulesEdge {
  node: HouseRules!
  cursor: String!
}

enum HouseRulesOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  suitableForChildren_ASC
  suitableForChildren_DESC
  suitableForInfants_ASC
  suitableForInfants_DESC
  petsAllowed_ASC
  petsAllowed_DESC
  smokingAllowed_ASC
  smokingAllowed_DESC
  partiesAndEventsAllowed_ASC
  partiesAndEventsAllowed_DESC
  additionalRules_ASC
  additionalRules_DESC
}

type HouseRulesPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  suitableForChildren: Boolean
  suitableForInfants: Boolean
  petsAllowed: Boolean
  smokingAllowed: Boolean
  partiesAndEventsAllowed: Boolean
  additionalRules: String
}

type HouseRulesSubscriptionPayload {
  mutation: MutationType!
  node: HouseRules
  updatedFields: [String!]
  previousValues: HouseRulesPreviousValues
}

input HouseRulesSubscriptionWhereInput {
  AND: [HouseRulesSubscriptionWhereInput!]
  OR: [HouseRulesSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: HouseRulesWhereInput
}

input HouseRulesUpdateInput {
  suitableForChildren: Boolean
  suitableForInfants: Boolean
  petsAllowed: Boolean
  smokingAllowed: Boolean
  partiesAndEventsAllowed: Boolean
  additionalRules: String
}

input HouseRulesUpdateOneInput {
  create: HouseRulesCreateInput
  connect: HouseRulesWhereUniqueInput
  disconnect: HouseRulesWhereUniqueInput
  delete: HouseRulesWhereUniqueInput
}

input HouseRulesWhereInput {
  AND: [HouseRulesWhereInput!]
  OR: [HouseRulesWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  suitableForChildren: Boolean
  suitableForChildren_not: Boolean
  suitableForInfants: Boolean
  suitableForInfants_not: Boolean
  petsAllowed: Boolean
  petsAllowed_not: Boolean
  smokingAllowed: Boolean
  smokingAllowed_not: Boolean
  partiesAndEventsAllowed: Boolean
  partiesAndEventsAllowed_not: Boolean
  additionalRules: String
  additionalRules_not: String
  additionalRules_in: [String!]
  additionalRules_not_in: [String!]
  additionalRules_lt: String
  additionalRules_lte: String
  additionalRules_gt: String
  additionalRules_gte: String
  additionalRules_contains: String
  additionalRules_not_contains: String
  additionalRules_starts_with: String
  additionalRules_not_starts_with: String
  additionalRules_ends_with: String
  additionalRules_not_ends_with: String
}

input HouseRulesWhereUniqueInput {
  id: ID
}

type LocationConnection {
  pageInfo: PageInfo!
  edges: [LocationEdge]!
}

input LocationCreateInput {
  lat: Float!
  lng: Float!
  address: String
  directions: String
  neighbourHood: NeighbourhoodCreateOneWithoutLocationsInput
  user: UserCreateOneWithoutLocationInput
  place: PlaceCreateOneWithoutLocationInput
  experience: ExperienceCreateOneWithoutLocationInput
  restaurant: RestaurantCreateOneWithoutLocationInput
}

input LocationCreateManyWithoutNeighbourHoodInput {
  create: [LocationCreateWithoutNeighbourHoodInput!]
  connect: [LocationWhereUniqueInput!]
}

input LocationCreateOneWithoutExperienceInput {
  create: LocationCreateWithoutExperienceInput
  connect: LocationWhereUniqueInput
}

input LocationCreateOneWithoutPlaceInput {
  create: LocationCreateWithoutPlaceInput
  connect: LocationWhereUniqueInput
}

input LocationCreateOneWithoutRestaurantInput {
  create: LocationCreateWithoutRestaurantInput
  connect: LocationWhereUniqueInput
}

input LocationCreateOneWithoutUserInput {
  create: LocationCreateWithoutUserInput
  connect: LocationWhereUniqueInput
}

input LocationCreateWithoutExperienceInput {
  lat: Float!
  lng: Float!
  address: String
  directions: String
  neighbourHood: NeighbourhoodCreateOneWithoutLocationsInput
  user: UserCreateOneWithoutLocationInput
  place: PlaceCreateOneWithoutLocationInput
  restaurant: RestaurantCreateOneWithoutLocationInput
}

input LocationCreateWithoutNeighbourHoodInput {
  lat: Float!
  lng: Float!
  address: String
  directions: String
  user: UserCreateOneWithoutLocationInput
  place: PlaceCreateOneWithoutLocationInput
  experience: ExperienceCreateOneWithoutLocationInput
  restaurant: RestaurantCreateOneWithoutLocationInput
}

input LocationCreateWithoutPlaceInput {
  lat: Float!
  lng: Float!
  address: String
  directions: String
  neighbourHood: NeighbourhoodCreateOneWithoutLocationsInput
  user: UserCreateOneWithoutLocationInput
  experience: ExperienceCreateOneWithoutLocationInput
  restaurant: RestaurantCreateOneWithoutLocationInput
}

input LocationCreateWithoutRestaurantInput {
  lat: Float!
  lng: Float!
  address: String
  directions: String
  neighbourHood: NeighbourhoodCreateOneWithoutLocationsInput
  user: UserCreateOneWithoutLocationInput
  place: PlaceCreateOneWithoutLocationInput
  experience: ExperienceCreateOneWithoutLocationInput
}

input LocationCreateWithoutUserInput {
  lat: Float!
  lng: Float!
  address: String
  directions: String
  neighbourHood: NeighbourhoodCreateOneWithoutLocationsInput
  place: PlaceCreateOneWithoutLocationInput
  experience: ExperienceCreateOneWithoutLocationInput
  restaurant: RestaurantCreateOneWithoutLocationInput
}

type LocationEdge {
  node: Location!
  cursor: String!
}

enum LocationOrderByInput {
  id_ASC
  id_DESC
  lat_ASC
  lat_DESC
  lng_ASC
  lng_DESC
  address_ASC
  address_DESC
  directions_ASC
  directions_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type LocationPreviousValues {
  id: ID!
  lat: Float!
  lng: Float!
  address: String
  directions: String
}

type LocationSubscriptionPayload {
  mutation: MutationType!
  node: Location
  updatedFields: [String!]
  previousValues: LocationPreviousValues
}

input LocationSubscriptionWhereInput {
  AND: [LocationSubscriptionWhereInput!]
  OR: [LocationSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: LocationWhereInput
}

input LocationUpdateInput {
  lat: Float
  lng: Float
  address: String
  directions: String
  neighbourHood: NeighbourhoodUpdateOneWithoutLocationsInput
  user: UserUpdateOneWithoutLocationInput
  place: PlaceUpdateOneWithoutLocationInput
  experience: ExperienceUpdateOneWithoutLocationInput
  restaurant: RestaurantUpdateOneWithoutLocationInput
}

input LocationUpdateManyWithoutNeighbourHoodInput {
  create: [LocationCreateWithoutNeighbourHoodInput!]
  connect: [LocationWhereUniqueInput!]
  disconnect: [LocationWhereUniqueInput!]
  delete: [LocationWhereUniqueInput!]
  update: [LocationUpdateWithoutNeighbourHoodInput!]
  upsert: [LocationUpsertWithoutNeighbourHoodInput!]
}

input LocationUpdateOneWithoutExperienceInput {
  create: LocationCreateWithoutExperienceInput
  connect: LocationWhereUniqueInput
  disconnect: LocationWhereUniqueInput
  delete: LocationWhereUniqueInput
  update: LocationUpdateWithoutExperienceInput
  upsert: LocationUpsertWithoutExperienceInput
}

input LocationUpdateOneWithoutPlaceInput {
  create: LocationCreateWithoutPlaceInput
  connect: LocationWhereUniqueInput
  disconnect: LocationWhereUniqueInput
  delete: LocationWhereUniqueInput
  update: LocationUpdateWithoutPlaceInput
  upsert: LocationUpsertWithoutPlaceInput
}

input LocationUpdateOneWithoutRestaurantInput {
  create: LocationCreateWithoutRestaurantInput
  connect: LocationWhereUniqueInput
  disconnect: LocationWhereUniqueInput
  delete: LocationWhereUniqueInput
  update: LocationUpdateWithoutRestaurantInput
  upsert: LocationUpsertWithoutRestaurantInput
}

input LocationUpdateOneWithoutUserInput {
  create: LocationCreateWithoutUserInput
  connect: LocationWhereUniqueInput
  disconnect: LocationWhereUniqueInput
  delete: LocationWhereUniqueInput
  update: LocationUpdateWithoutUserInput
  upsert: LocationUpsertWithoutUserInput
}

input LocationUpdateWithoutExperienceDataInput {
  lat: Float
  lng: Float
  address: String
  directions: String
  neighbourHood: NeighbourhoodUpdateOneWithoutLocationsInput
  user: UserUpdateOneWithoutLocationInput
  place: PlaceUpdateOneWithoutLocationInput
  restaurant: RestaurantUpdateOneWithoutLocationInput
}

input LocationUpdateWithoutExperienceInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutExperienceDataInput!
}

input LocationUpdateWithoutNeighbourHoodDataInput {
  lat: Float
  lng: Float
  address: String
  directions: String
  user: UserUpdateOneWithoutLocationInput
  place: PlaceUpdateOneWithoutLocationInput
  experience: ExperienceUpdateOneWithoutLocationInput
  restaurant: RestaurantUpdateOneWithoutLocationInput
}

input LocationUpdateWithoutNeighbourHoodInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutNeighbourHoodDataInput!
}

input LocationUpdateWithoutPlaceDataInput {
  lat: Float
  lng: Float
  address: String
  directions: String
  neighbourHood: NeighbourhoodUpdateOneWithoutLocationsInput
  user: UserUpdateOneWithoutLocationInput
  experience: ExperienceUpdateOneWithoutLocationInput
  restaurant: RestaurantUpdateOneWithoutLocationInput
}

input LocationUpdateWithoutPlaceInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutPlaceDataInput!
}

input LocationUpdateWithoutRestaurantDataInput {
  lat: Float
  lng: Float
  address: String
  directions: String
  neighbourHood: NeighbourhoodUpdateOneWithoutLocationsInput
  user: UserUpdateOneWithoutLocationInput
  place: PlaceUpdateOneWithoutLocationInput
  experience: ExperienceUpdateOneWithoutLocationInput
}

input LocationUpdateWithoutRestaurantInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutRestaurantDataInput!
}

input LocationUpdateWithoutUserDataInput {
  lat: Float
  lng: Float
  address: String
  directions: String
  neighbourHood: NeighbourhoodUpdateOneWithoutLocationsInput
  place: PlaceUpdateOneWithoutLocationInput
  experience: ExperienceUpdateOneWithoutLocationInput
  restaurant: RestaurantUpdateOneWithoutLocationInput
}

input LocationUpdateWithoutUserInput {
  where: LocationWhereUniqueInput!
  data: LocationUpdateWithoutUserDataInput!
}

input LocationUpsertWithoutExperienceInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutExperienceDataInput!
  create: LocationCreateWithoutExperienceInput!
}

input LocationUpsertWithoutNeighbourHoodInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutNeighbourHoodDataInput!
  create: LocationCreateWithoutNeighbourHoodInput!
}

input LocationUpsertWithoutPlaceInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutPlaceDataInput!
  create: LocationCreateWithoutPlaceInput!
}

input LocationUpsertWithoutRestaurantInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutRestaurantDataInput!
  create: LocationCreateWithoutRestaurantInput!
}

input LocationUpsertWithoutUserInput {
  where: LocationWhereUniqueInput!
  update: LocationUpdateWithoutUserDataInput!
  create: LocationCreateWithoutUserInput!
}

input LocationWhereInput {
  AND: [LocationWhereInput!]
  OR: [LocationWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lat: Float
  lat_not: Float
  lat_in: [Float!]
  lat_not_in: [Float!]
  lat_lt: Float
  lat_lte: Float
  lat_gt: Float
  lat_gte: Float
  lng: Float
  lng_not: Float
  lng_in: [Float!]
  lng_not_in: [Float!]
  lng_lt: Float
  lng_lte: Float
  lng_gt: Float
  lng_gte: Float
  address: String
  address_not: String
  address_in: [String!]
  address_not_in: [String!]
  address_lt: String
  address_lte: String
  address_gt: String
  address_gte: String
  address_contains: String
  address_not_contains: String
  address_starts_with: String
  address_not_starts_with: String
  address_ends_with: String
  address_not_ends_with: String
  directions: String
  directions_not: String
  directions_in: [String!]
  directions_not_in: [String!]
  directions_lt: String
  directions_lte: String
  directions_gt: String
  directions_gte: String
  directions_contains: String
  directions_not_contains: String
  directions_starts_with: String
  directions_not_starts_with: String
  directions_ends_with: String
  directions_not_ends_with: String
  neighbourHood: NeighbourhoodWhereInput
  user: UserWhereInput
  place: PlaceWhereInput
  experience: ExperienceWhereInput
  restaurant: RestaurantWhereInput
}

input LocationWhereUniqueInput {
  id: ID
}

scalar Long

type MessageConnection {
  pageInfo: PageInfo!
  edges: [MessageEdge]!
}

input MessageCreateInput {
  deliveredAt: DateTime!
  readAt: DateTime!
  from: UserCreateOneWithoutSentMessagesInput!
  to: UserCreateOneWithoutReceivedMessagesInput!
}

input MessageCreateManyWithoutFromInput {
  create: [MessageCreateWithoutFromInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateManyWithoutToInput {
  create: [MessageCreateWithoutToInput!]
  connect: [MessageWhereUniqueInput!]
}

input MessageCreateWithoutFromInput {
  deliveredAt: DateTime!
  readAt: DateTime!
  to: UserCreateOneWithoutReceivedMessagesInput!
}

input MessageCreateWithoutToInput {
  deliveredAt: DateTime!
  readAt: DateTime!
  from: UserCreateOneWithoutSentMessagesInput!
}

type MessageEdge {
  node: Message!
  cursor: String!
}

enum MessageOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  deliveredAt_ASC
  deliveredAt_DESC
  readAt_ASC
  readAt_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type MessagePreviousValues {
  id: ID!
  createdAt: DateTime!
  deliveredAt: DateTime!
  readAt: DateTime!
}

type MessageSubscriptionPayload {
  mutation: MutationType!
  node: Message
  updatedFields: [String!]
  previousValues: MessagePreviousValues
}

input MessageSubscriptionWhereInput {
  AND: [MessageSubscriptionWhereInput!]
  OR: [MessageSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: MessageWhereInput
}

input MessageUpdateInput {
  deliveredAt: DateTime
  readAt: DateTime
  from: UserUpdateOneWithoutSentMessagesInput
  to: UserUpdateOneWithoutReceivedMessagesInput
}

input MessageUpdateManyWithoutFromInput {
  create: [MessageCreateWithoutFromInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithoutFromInput!]
  upsert: [MessageUpsertWithoutFromInput!]
}

input MessageUpdateManyWithoutToInput {
  create: [MessageCreateWithoutToInput!]
  connect: [MessageWhereUniqueInput!]
  disconnect: [MessageWhereUniqueInput!]
  delete: [MessageWhereUniqueInput!]
  update: [MessageUpdateWithoutToInput!]
  upsert: [MessageUpsertWithoutToInput!]
}

input MessageUpdateWithoutFromDataInput {
  deliveredAt: DateTime
  readAt: DateTime
  to: UserUpdateOneWithoutReceivedMessagesInput
}

input MessageUpdateWithoutFromInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutFromDataInput!
}

input MessageUpdateWithoutToDataInput {
  deliveredAt: DateTime
  readAt: DateTime
  from: UserUpdateOneWithoutSentMessagesInput
}

input MessageUpdateWithoutToInput {
  where: MessageWhereUniqueInput!
  data: MessageUpdateWithoutToDataInput!
}

input MessageUpsertWithoutFromInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutFromDataInput!
  create: MessageCreateWithoutFromInput!
}

input MessageUpsertWithoutToInput {
  where: MessageWhereUniqueInput!
  update: MessageUpdateWithoutToDataInput!
  create: MessageCreateWithoutToInput!
}

input MessageWhereInput {
  AND: [MessageWhereInput!]
  OR: [MessageWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  deliveredAt: DateTime
  deliveredAt_not: DateTime
  deliveredAt_in: [DateTime!]
  deliveredAt_not_in: [DateTime!]
  deliveredAt_lt: DateTime
  deliveredAt_lte: DateTime
  deliveredAt_gt: DateTime
  deliveredAt_gte: DateTime
  readAt: DateTime
  readAt_not: DateTime
  readAt_in: [DateTime!]
  readAt_not_in: [DateTime!]
  readAt_lt: DateTime
  readAt_lte: DateTime
  readAt_gt: DateTime
  readAt_gte: DateTime
  from: UserWhereInput
  to: UserWhereInput
}

input MessageWhereUniqueInput {
  id: ID
}

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPlace(data: PlaceCreateInput!): Place!
  createPricing(data: PricingCreateInput!): Pricing!
  createGuestRequirements(data: GuestRequirementsCreateInput!): GuestRequirements!
  createPolicies(data: PoliciesCreateInput!): Policies!
  createHouseRules(data: HouseRulesCreateInput!): HouseRules!
  createViews(data: ViewsCreateInput!): Views!
  createLocation(data: LocationCreateInput!): Location!
  createNeighbourhood(data: NeighbourhoodCreateInput!): Neighbourhood!
  createCity(data: CityCreateInput!): City!
  createPicture(data: PictureCreateInput!): Picture!
  createExperience(data: ExperienceCreateInput!): Experience!
  createExperienceCategory(data: ExperienceCategoryCreateInput!): ExperienceCategory!
  createAmenities(data: AmenitiesCreateInput!): Amenities!
  createReview(data: ReviewCreateInput!): Review!
  createBooking(data: BookingCreateInput!): Booking!
  createPayment(data: PaymentCreateInput!): Payment!
  createPaymentAccount(data: PaymentAccountCreateInput!): PaymentAccount!
  createPaypalInformation(data: PaypalInformationCreateInput!): PaypalInformation!
  createCreditCardInformation(data: CreditCardInformationCreateInput!): CreditCardInformation!
  createMessage(data: MessageCreateInput!): Message!
  createNotification(data: NotificationCreateInput!): Notification!
  createRestaurant(data: RestaurantCreateInput!): Restaurant!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePlace(data: PlaceUpdateInput!, where: PlaceWhereUniqueInput!): Place
  updatePricing(data: PricingUpdateInput!, where: PricingWhereUniqueInput!): Pricing
  updateGuestRequirements(data: GuestRequirementsUpdateInput!, where: GuestRequirementsWhereUniqueInput!): GuestRequirements
  updatePolicies(data: PoliciesUpdateInput!, where: PoliciesWhereUniqueInput!): Policies
  updateHouseRules(data: HouseRulesUpdateInput!, where: HouseRulesWhereUniqueInput!): HouseRules
  updateViews(data: ViewsUpdateInput!, where: ViewsWhereUniqueInput!): Views
  updateLocation(data: LocationUpdateInput!, where: LocationWhereUniqueInput!): Location
  updateNeighbourhood(data: NeighbourhoodUpdateInput!, where: NeighbourhoodWhereUniqueInput!): Neighbourhood
  updateCity(data: CityUpdateInput!, where: CityWhereUniqueInput!): City
  updatePicture(data: PictureUpdateInput!, where: PictureWhereUniqueInput!): Picture
  updateExperience(data: ExperienceUpdateInput!, where: ExperienceWhereUniqueInput!): Experience
  updateExperienceCategory(data: ExperienceCategoryUpdateInput!, where: ExperienceCategoryWhereUniqueInput!): ExperienceCategory
  updateAmenities(data: AmenitiesUpdateInput!, where: AmenitiesWhereUniqueInput!): Amenities
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updateBooking(data: BookingUpdateInput!, where: BookingWhereUniqueInput!): Booking
  updatePayment(data: PaymentUpdateInput!, where: PaymentWhereUniqueInput!): Payment
  updatePaymentAccount(data: PaymentAccountUpdateInput!, where: PaymentAccountWhereUniqueInput!): PaymentAccount
  updatePaypalInformation(data: PaypalInformationUpdateInput!, where: PaypalInformationWhereUniqueInput!): PaypalInformation
  updateCreditCardInformation(data: CreditCardInformationUpdateInput!, where: CreditCardInformationWhereUniqueInput!): CreditCardInformation
  updateMessage(data: MessageUpdateInput!, where: MessageWhereUniqueInput!): Message
  updateNotification(data: NotificationUpdateInput!, where: NotificationWhereUniqueInput!): Notification
  updateRestaurant(data: RestaurantUpdateInput!, where: RestaurantWhereUniqueInput!): Restaurant
  deleteUser(where: UserWhereUniqueInput!): User
  deletePlace(where: PlaceWhereUniqueInput!): Place
  deletePricing(where: PricingWhereUniqueInput!): Pricing
  deleteGuestRequirements(where: GuestRequirementsWhereUniqueInput!): GuestRequirements
  deletePolicies(where: PoliciesWhereUniqueInput!): Policies
  deleteHouseRules(where: HouseRulesWhereUniqueInput!): HouseRules
  deleteViews(where: ViewsWhereUniqueInput!): Views
  deleteLocation(where: LocationWhereUniqueInput!): Location
  deleteNeighbourhood(where: NeighbourhoodWhereUniqueInput!): Neighbourhood
  deleteCity(where: CityWhereUniqueInput!): City
  deletePicture(where: PictureWhereUniqueInput!): Picture
  deleteExperience(where: ExperienceWhereUniqueInput!): Experience
  deleteExperienceCategory(where: ExperienceCategoryWhereUniqueInput!): ExperienceCategory
  deleteAmenities(where: AmenitiesWhereUniqueInput!): Amenities
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deleteBooking(where: BookingWhereUniqueInput!): Booking
  deletePayment(where: PaymentWhereUniqueInput!): Payment
  deletePaymentAccount(where: PaymentAccountWhereUniqueInput!): PaymentAccount
  deletePaypalInformation(where: PaypalInformationWhereUniqueInput!): PaypalInformation
  deleteCreditCardInformation(where: CreditCardInformationWhereUniqueInput!): CreditCardInformation
  deleteMessage(where: MessageWhereUniqueInput!): Message
  deleteNotification(where: NotificationWhereUniqueInput!): Notification
  deleteRestaurant(where: RestaurantWhereUniqueInput!): Restaurant
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPlace(where: PlaceWhereUniqueInput!, create: PlaceCreateInput!, update: PlaceUpdateInput!): Place!
  upsertPricing(where: PricingWhereUniqueInput!, create: PricingCreateInput!, update: PricingUpdateInput!): Pricing!
  upsertGuestRequirements(where: GuestRequirementsWhereUniqueInput!, create: GuestRequirementsCreateInput!, update: GuestRequirementsUpdateInput!): GuestRequirements!
  upsertPolicies(where: PoliciesWhereUniqueInput!, create: PoliciesCreateInput!, update: PoliciesUpdateInput!): Policies!
  upsertHouseRules(where: HouseRulesWhereUniqueInput!, create: HouseRulesCreateInput!, update: HouseRulesUpdateInput!): HouseRules!
  upsertViews(where: ViewsWhereUniqueInput!, create: ViewsCreateInput!, update: ViewsUpdateInput!): Views!
  upsertLocation(where: LocationWhereUniqueInput!, create: LocationCreateInput!, update: LocationUpdateInput!): Location!
  upsertNeighbourhood(where: NeighbourhoodWhereUniqueInput!, create: NeighbourhoodCreateInput!, update: NeighbourhoodUpdateInput!): Neighbourhood!
  upsertCity(where: CityWhereUniqueInput!, create: CityCreateInput!, update: CityUpdateInput!): City!
  upsertPicture(where: PictureWhereUniqueInput!, create: PictureCreateInput!, update: PictureUpdateInput!): Picture!
  upsertExperience(where: ExperienceWhereUniqueInput!, create: ExperienceCreateInput!, update: ExperienceUpdateInput!): Experience!
  upsertExperienceCategory(where: ExperienceCategoryWhereUniqueInput!, create: ExperienceCategoryCreateInput!, update: ExperienceCategoryUpdateInput!): ExperienceCategory!
  upsertAmenities(where: AmenitiesWhereUniqueInput!, create: AmenitiesCreateInput!, update: AmenitiesUpdateInput!): Amenities!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  upsertBooking(where: BookingWhereUniqueInput!, create: BookingCreateInput!, update: BookingUpdateInput!): Booking!
  upsertPayment(where: PaymentWhereUniqueInput!, create: PaymentCreateInput!, update: PaymentUpdateInput!): Payment!
  upsertPaymentAccount(where: PaymentAccountWhereUniqueInput!, create: PaymentAccountCreateInput!, update: PaymentAccountUpdateInput!): PaymentAccount!
  upsertPaypalInformation(where: PaypalInformationWhereUniqueInput!, create: PaypalInformationCreateInput!, update: PaypalInformationUpdateInput!): PaypalInformation!
  upsertCreditCardInformation(where: CreditCardInformationWhereUniqueInput!, create: CreditCardInformationCreateInput!, update: CreditCardInformationUpdateInput!): CreditCardInformation!
  upsertMessage(where: MessageWhereUniqueInput!, create: MessageCreateInput!, update: MessageUpdateInput!): Message!
  upsertNotification(where: NotificationWhereUniqueInput!, create: NotificationCreateInput!, update: NotificationUpdateInput!): Notification!
  upsertRestaurant(where: RestaurantWhereUniqueInput!, create: RestaurantCreateInput!, update: RestaurantUpdateInput!): Restaurant!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput!): BatchPayload!
  updateManyPlaces(data: PlaceUpdateInput!, where: PlaceWhereInput!): BatchPayload!
  updateManyPricings(data: PricingUpdateInput!, where: PricingWhereInput!): BatchPayload!
  updateManyGuestRequirementses(data: GuestRequirementsUpdateInput!, where: GuestRequirementsWhereInput!): BatchPayload!
  updateManyPolicieses(data: PoliciesUpdateInput!, where: PoliciesWhereInput!): BatchPayload!
  updateManyHouseRuleses(data: HouseRulesUpdateInput!, where: HouseRulesWhereInput!): BatchPayload!
  updateManyViewses(data: ViewsUpdateInput!, where: ViewsWhereInput!): BatchPayload!
  updateManyLocations(data: LocationUpdateInput!, where: LocationWhereInput!): BatchPayload!
  updateManyNeighbourhoods(data: NeighbourhoodUpdateInput!, where: NeighbourhoodWhereInput!): BatchPayload!
  updateManyCities(data: CityUpdateInput!, where: CityWhereInput!): BatchPayload!
  updateManyPictures(data: PictureUpdateInput!, where: PictureWhereInput!): BatchPayload!
  updateManyExperiences(data: ExperienceUpdateInput!, where: ExperienceWhereInput!): BatchPayload!
  updateManyExperienceCategories(data: ExperienceCategoryUpdateInput!, where: ExperienceCategoryWhereInput!): BatchPayload!
  updateManyAmenitieses(data: AmenitiesUpdateInput!, where: AmenitiesWhereInput!): BatchPayload!
  updateManyReviews(data: ReviewUpdateInput!, where: ReviewWhereInput!): BatchPayload!
  updateManyBookings(data: BookingUpdateInput!, where: BookingWhereInput!): BatchPayload!
  updateManyPayments(data: PaymentUpdateInput!, where: PaymentWhereInput!): BatchPayload!
  updateManyPaymentAccounts(data: PaymentAccountUpdateInput!, where: PaymentAccountWhereInput!): BatchPayload!
  updateManyPaypalInformations(data: PaypalInformationUpdateInput!, where: PaypalInformationWhereInput!): BatchPayload!
  updateManyCreditCardInformations(data: CreditCardInformationUpdateInput!, where: CreditCardInformationWhereInput!): BatchPayload!
  updateManyMessages(data: MessageUpdateInput!, where: MessageWhereInput!): BatchPayload!
  updateManyNotifications(data: NotificationUpdateInput!, where: NotificationWhereInput!): BatchPayload!
  updateManyRestaurants(data: RestaurantUpdateInput!, where: RestaurantWhereInput!): BatchPayload!
  deleteManyUsers(where: UserWhereInput!): BatchPayload!
  deleteManyPlaces(where: PlaceWhereInput!): BatchPayload!
  deleteManyPricings(where: PricingWhereInput!): BatchPayload!
  deleteManyGuestRequirementses(where: GuestRequirementsWhereInput!): BatchPayload!
  deleteManyPolicieses(where: PoliciesWhereInput!): BatchPayload!
  deleteManyHouseRuleses(where: HouseRulesWhereInput!): BatchPayload!
  deleteManyViewses(where: ViewsWhereInput!): BatchPayload!
  deleteManyLocations(where: LocationWhereInput!): BatchPayload!
  deleteManyNeighbourhoods(where: NeighbourhoodWhereInput!): BatchPayload!
  deleteManyCities(where: CityWhereInput!): BatchPayload!
  deleteManyPictures(where: PictureWhereInput!): BatchPayload!
  deleteManyExperiences(where: ExperienceWhereInput!): BatchPayload!
  deleteManyExperienceCategories(where: ExperienceCategoryWhereInput!): BatchPayload!
  deleteManyAmenitieses(where: AmenitiesWhereInput!): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput!): BatchPayload!
  deleteManyBookings(where: BookingWhereInput!): BatchPayload!
  deleteManyPayments(where: PaymentWhereInput!): BatchPayload!
  deleteManyPaymentAccounts(where: PaymentAccountWhereInput!): BatchPayload!
  deleteManyPaypalInformations(where: PaypalInformationWhereInput!): BatchPayload!
  deleteManyCreditCardInformations(where: CreditCardInformationWhereInput!): BatchPayload!
  deleteManyMessages(where: MessageWhereInput!): BatchPayload!
  deleteManyNotifications(where: NotificationWhereInput!): BatchPayload!
  deleteManyRestaurants(where: RestaurantWhereInput!): BatchPayload!
  resetData: Boolean
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

type NeighbourhoodConnection {
  pageInfo: PageInfo!
  edges: [NeighbourhoodEdge]!
}

input NeighbourhoodCreateInput {
  name: String!
  slug: String!
  featured: Boolean!
  popularity: Int!
  locations: LocationCreateManyWithoutNeighbourHoodInput
  homePreview: PictureCreateOneInput
  city: CityCreateOneWithoutNeighbourhoodsInput!
}

input NeighbourhoodCreateManyWithoutCityInput {
  create: [NeighbourhoodCreateWithoutCityInput!]
  connect: [NeighbourhoodWhereUniqueInput!]
}

input NeighbourhoodCreateOneWithoutLocationsInput {
  create: NeighbourhoodCreateWithoutLocationsInput
  connect: NeighbourhoodWhereUniqueInput
}

input NeighbourhoodCreateWithoutCityInput {
  name: String!
  slug: String!
  featured: Boolean!
  popularity: Int!
  locations: LocationCreateManyWithoutNeighbourHoodInput
  homePreview: PictureCreateOneInput
}

input NeighbourhoodCreateWithoutLocationsInput {
  name: String!
  slug: String!
  featured: Boolean!
  popularity: Int!
  homePreview: PictureCreateOneInput
  city: CityCreateOneWithoutNeighbourhoodsInput!
}

type NeighbourhoodEdge {
  node: Neighbourhood!
  cursor: String!
}

enum NeighbourhoodOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  slug_ASC
  slug_DESC
  featured_ASC
  featured_DESC
  popularity_ASC
  popularity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type NeighbourhoodPreviousValues {
  id: ID!
  name: String!
  slug: String!
  featured: Boolean!
  popularity: Int!
}

type NeighbourhoodSubscriptionPayload {
  mutation: MutationType!
  node: Neighbourhood
  updatedFields: [String!]
  previousValues: NeighbourhoodPreviousValues
}

input NeighbourhoodSubscriptionWhereInput {
  AND: [NeighbourhoodSubscriptionWhereInput!]
  OR: [NeighbourhoodSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NeighbourhoodWhereInput
}

input NeighbourhoodUpdateInput {
  name: String
  slug: String
  featured: Boolean
  popularity: Int
  locations: LocationUpdateManyWithoutNeighbourHoodInput
  homePreview: PictureUpdateOneInput
  city: CityUpdateOneWithoutNeighbourhoodsInput
}

input NeighbourhoodUpdateManyWithoutCityInput {
  create: [NeighbourhoodCreateWithoutCityInput!]
  connect: [NeighbourhoodWhereUniqueInput!]
  disconnect: [NeighbourhoodWhereUniqueInput!]
  delete: [NeighbourhoodWhereUniqueInput!]
  update: [NeighbourhoodUpdateWithoutCityInput!]
  upsert: [NeighbourhoodUpsertWithoutCityInput!]
}

input NeighbourhoodUpdateOneWithoutLocationsInput {
  create: NeighbourhoodCreateWithoutLocationsInput
  connect: NeighbourhoodWhereUniqueInput
  disconnect: NeighbourhoodWhereUniqueInput
  delete: NeighbourhoodWhereUniqueInput
  update: NeighbourhoodUpdateWithoutLocationsInput
  upsert: NeighbourhoodUpsertWithoutLocationsInput
}

input NeighbourhoodUpdateWithoutCityDataInput {
  name: String
  slug: String
  featured: Boolean
  popularity: Int
  locations: LocationUpdateManyWithoutNeighbourHoodInput
  homePreview: PictureUpdateOneInput
}

input NeighbourhoodUpdateWithoutCityInput {
  where: NeighbourhoodWhereUniqueInput!
  data: NeighbourhoodUpdateWithoutCityDataInput!
}

input NeighbourhoodUpdateWithoutLocationsDataInput {
  name: String
  slug: String
  featured: Boolean
  popularity: Int
  homePreview: PictureUpdateOneInput
  city: CityUpdateOneWithoutNeighbourhoodsInput
}

input NeighbourhoodUpdateWithoutLocationsInput {
  where: NeighbourhoodWhereUniqueInput!
  data: NeighbourhoodUpdateWithoutLocationsDataInput!
}

input NeighbourhoodUpsertWithoutCityInput {
  where: NeighbourhoodWhereUniqueInput!
  update: NeighbourhoodUpdateWithoutCityDataInput!
  create: NeighbourhoodCreateWithoutCityInput!
}

input NeighbourhoodUpsertWithoutLocationsInput {
  where: NeighbourhoodWhereUniqueInput!
  update: NeighbourhoodUpdateWithoutLocationsDataInput!
  create: NeighbourhoodCreateWithoutLocationsInput!
}

input NeighbourhoodWhereInput {
  AND: [NeighbourhoodWhereInput!]
  OR: [NeighbourhoodWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  featured: Boolean
  featured_not: Boolean
  popularity: Int
  popularity_not: Int
  popularity_in: [Int!]
  popularity_not_in: [Int!]
  popularity_lt: Int
  popularity_lte: Int
  popularity_gt: Int
  popularity_gte: Int
  locations_every: LocationWhereInput
  locations_some: LocationWhereInput
  locations_none: LocationWhereInput
  homePreview: PictureWhereInput
  city: CityWhereInput
}

input NeighbourhoodWhereUniqueInput {
  id: ID
}

interface Node {
  id: ID!
}

enum NOTIFICATION_TYPE {
  OFFER
  INSTANT_BOOK
  RESPONSIVENESS
  NEW_AMENITIES
  HOUSE_RULES
}

type NotificationConnection {
  pageInfo: PageInfo!
  edges: [NotificationEdge]!
}

input NotificationCreateInput {
  type: NOTIFICATION_TYPE
  link: String!
  readDate: DateTime!
  user: UserCreateOneWithoutNotificationsInput!
}

input NotificationCreateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  connect: [NotificationWhereUniqueInput!]
}

input NotificationCreateWithoutUserInput {
  type: NOTIFICATION_TYPE
  link: String!
  readDate: DateTime!
}

type NotificationEdge {
  node: Notification!
  cursor: String!
}

enum NotificationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  link_ASC
  link_DESC
  readDate_ASC
  readDate_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type NotificationPreviousValues {
  id: ID!
  createdAt: DateTime!
  type: NOTIFICATION_TYPE
  link: String!
  readDate: DateTime!
}

type NotificationSubscriptionPayload {
  mutation: MutationType!
  node: Notification
  updatedFields: [String!]
  previousValues: NotificationPreviousValues
}

input NotificationSubscriptionWhereInput {
  AND: [NotificationSubscriptionWhereInput!]
  OR: [NotificationSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: NotificationWhereInput
}

input NotificationUpdateInput {
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
  user: UserUpdateOneWithoutNotificationsInput
}

input NotificationUpdateManyWithoutUserInput {
  create: [NotificationCreateWithoutUserInput!]
  connect: [NotificationWhereUniqueInput!]
  disconnect: [NotificationWhereUniqueInput!]
  delete: [NotificationWhereUniqueInput!]
  update: [NotificationUpdateWithoutUserInput!]
  upsert: [NotificationUpsertWithoutUserInput!]
}

input NotificationUpdateWithoutUserDataInput {
  type: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

input NotificationUpdateWithoutUserInput {
  where: NotificationWhereUniqueInput!
  data: NotificationUpdateWithoutUserDataInput!
}

input NotificationUpsertWithoutUserInput {
  where: NotificationWhereUniqueInput!
  update: NotificationUpdateWithoutUserDataInput!
  create: NotificationCreateWithoutUserInput!
}

input NotificationWhereInput {
  AND: [NotificationWhereInput!]
  OR: [NotificationWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  type: NOTIFICATION_TYPE
  type_not: NOTIFICATION_TYPE
  type_in: [NOTIFICATION_TYPE!]
  type_not_in: [NOTIFICATION_TYPE!]
  link: String
  link_not: String
  link_in: [String!]
  link_not_in: [String!]
  link_lt: String
  link_lte: String
  link_gt: String
  link_gte: String
  link_contains: String
  link_not_contains: String
  link_starts_with: String
  link_not_starts_with: String
  link_ends_with: String
  link_not_ends_with: String
  readDate: DateTime
  readDate_not: DateTime
  readDate_in: [DateTime!]
  readDate_not_in: [DateTime!]
  readDate_lt: DateTime
  readDate_lte: DateTime
  readDate_gt: DateTime
  readDate_gte: DateTime
  user: UserWhereInput
}

input NotificationWhereUniqueInput {
  id: ID
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

enum PAYMENT_PROVIDER {
  PAYPAL
  CREDIT_CARD
}

type PaymentAccountConnection {
  pageInfo: PageInfo!
  edges: [PaymentAccountEdge]!
}

input PaymentAccountCreateInput {
  type: PAYMENT_PROVIDER
  user: UserCreateOneWithoutPaymentAccountInput!
  payments: PaymentCreateManyWithoutPaymentMethodInput
  paypal: PaypalInformationCreateOneWithoutPaymentAccountInput
  creditcard: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

input PaymentAccountCreateManyWithoutUserInput {
  create: [PaymentAccountCreateWithoutUserInput!]
  connect: [PaymentAccountWhereUniqueInput!]
}

input PaymentAccountCreateOneWithoutCreditcardInput {
  create: PaymentAccountCreateWithoutCreditcardInput
  connect: PaymentAccountWhereUniqueInput
}

input PaymentAccountCreateOneWithoutPaymentsInput {
  create: PaymentAccountCreateWithoutPaymentsInput
  connect: PaymentAccountWhereUniqueInput
}

input PaymentAccountCreateOneWithoutPaypalInput {
  create: PaymentAccountCreateWithoutPaypalInput
  connect: PaymentAccountWhereUniqueInput
}

input PaymentAccountCreateWithoutCreditcardInput {
  type: PAYMENT_PROVIDER
  user: UserCreateOneWithoutPaymentAccountInput!
  payments: PaymentCreateManyWithoutPaymentMethodInput
  paypal: PaypalInformationCreateOneWithoutPaymentAccountInput
}

input PaymentAccountCreateWithoutPaymentsInput {
  type: PAYMENT_PROVIDER
  user: UserCreateOneWithoutPaymentAccountInput!
  paypal: PaypalInformationCreateOneWithoutPaymentAccountInput
  creditcard: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

input PaymentAccountCreateWithoutPaypalInput {
  type: PAYMENT_PROVIDER
  user: UserCreateOneWithoutPaymentAccountInput!
  payments: PaymentCreateManyWithoutPaymentMethodInput
  creditcard: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

input PaymentAccountCreateWithoutUserInput {
  type: PAYMENT_PROVIDER
  payments: PaymentCreateManyWithoutPaymentMethodInput
  paypal: PaypalInformationCreateOneWithoutPaymentAccountInput
  creditcard: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

type PaymentAccountEdge {
  node: PaymentAccount!
  cursor: String!
}

enum PaymentAccountOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  type_ASC
  type_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaymentAccountPreviousValues {
  id: ID!
  createdAt: DateTime!
  type: PAYMENT_PROVIDER
}

type PaymentAccountSubscriptionPayload {
  mutation: MutationType!
  node: PaymentAccount
  updatedFields: [String!]
  previousValues: PaymentAccountPreviousValues
}

input PaymentAccountSubscriptionWhereInput {
  AND: [PaymentAccountSubscriptionWhereInput!]
  OR: [PaymentAccountSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaymentAccountWhereInput
}

input PaymentAccountUpdateInput {
  type: PAYMENT_PROVIDER
  user: UserUpdateOneWithoutPaymentAccountInput
  payments: PaymentUpdateManyWithoutPaymentMethodInput
  paypal: PaypalInformationUpdateOneWithoutPaymentAccountInput
  creditcard: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

input PaymentAccountUpdateManyWithoutUserInput {
  create: [PaymentAccountCreateWithoutUserInput!]
  connect: [PaymentAccountWhereUniqueInput!]
  disconnect: [PaymentAccountWhereUniqueInput!]
  delete: [PaymentAccountWhereUniqueInput!]
  update: [PaymentAccountUpdateWithoutUserInput!]
  upsert: [PaymentAccountUpsertWithoutUserInput!]
}

input PaymentAccountUpdateOneWithoutCreditcardInput {
  create: PaymentAccountCreateWithoutCreditcardInput
  connect: PaymentAccountWhereUniqueInput
  disconnect: PaymentAccountWhereUniqueInput
  delete: PaymentAccountWhereUniqueInput
  update: PaymentAccountUpdateWithoutCreditcardInput
  upsert: PaymentAccountUpsertWithoutCreditcardInput
}

input PaymentAccountUpdateOneWithoutPaymentsInput {
  create: PaymentAccountCreateWithoutPaymentsInput
  connect: PaymentAccountWhereUniqueInput
  disconnect: PaymentAccountWhereUniqueInput
  delete: PaymentAccountWhereUniqueInput
  update: PaymentAccountUpdateWithoutPaymentsInput
  upsert: PaymentAccountUpsertWithoutPaymentsInput
}

input PaymentAccountUpdateOneWithoutPaypalInput {
  create: PaymentAccountCreateWithoutPaypalInput
  connect: PaymentAccountWhereUniqueInput
  disconnect: PaymentAccountWhereUniqueInput
  delete: PaymentAccountWhereUniqueInput
  update: PaymentAccountUpdateWithoutPaypalInput
  upsert: PaymentAccountUpsertWithoutPaypalInput
}

input PaymentAccountUpdateWithoutCreditcardDataInput {
  type: PAYMENT_PROVIDER
  user: UserUpdateOneWithoutPaymentAccountInput
  payments: PaymentUpdateManyWithoutPaymentMethodInput
  paypal: PaypalInformationUpdateOneWithoutPaymentAccountInput
}

input PaymentAccountUpdateWithoutCreditcardInput {
  where: PaymentAccountWhereUniqueInput!
  data: PaymentAccountUpdateWithoutCreditcardDataInput!
}

input PaymentAccountUpdateWithoutPaymentsDataInput {
  type: PAYMENT_PROVIDER
  user: UserUpdateOneWithoutPaymentAccountInput
  paypal: PaypalInformationUpdateOneWithoutPaymentAccountInput
  creditcard: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

input PaymentAccountUpdateWithoutPaymentsInput {
  where: PaymentAccountWhereUniqueInput!
  data: PaymentAccountUpdateWithoutPaymentsDataInput!
}

input PaymentAccountUpdateWithoutPaypalDataInput {
  type: PAYMENT_PROVIDER
  user: UserUpdateOneWithoutPaymentAccountInput
  payments: PaymentUpdateManyWithoutPaymentMethodInput
  creditcard: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

input PaymentAccountUpdateWithoutPaypalInput {
  where: PaymentAccountWhereUniqueInput!
  data: PaymentAccountUpdateWithoutPaypalDataInput!
}

input PaymentAccountUpdateWithoutUserDataInput {
  type: PAYMENT_PROVIDER
  payments: PaymentUpdateManyWithoutPaymentMethodInput
  paypal: PaypalInformationUpdateOneWithoutPaymentAccountInput
  creditcard: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

input PaymentAccountUpdateWithoutUserInput {
  where: PaymentAccountWhereUniqueInput!
  data: PaymentAccountUpdateWithoutUserDataInput!
}

input PaymentAccountUpsertWithoutCreditcardInput {
  where: PaymentAccountWhereUniqueInput!
  update: PaymentAccountUpdateWithoutCreditcardDataInput!
  create: PaymentAccountCreateWithoutCreditcardInput!
}

input PaymentAccountUpsertWithoutPaymentsInput {
  where: PaymentAccountWhereUniqueInput!
  update: PaymentAccountUpdateWithoutPaymentsDataInput!
  create: PaymentAccountCreateWithoutPaymentsInput!
}

input PaymentAccountUpsertWithoutPaypalInput {
  where: PaymentAccountWhereUniqueInput!
  update: PaymentAccountUpdateWithoutPaypalDataInput!
  create: PaymentAccountCreateWithoutPaypalInput!
}

input PaymentAccountUpsertWithoutUserInput {
  where: PaymentAccountWhereUniqueInput!
  update: PaymentAccountUpdateWithoutUserDataInput!
  create: PaymentAccountCreateWithoutUserInput!
}

input PaymentAccountWhereInput {
  AND: [PaymentAccountWhereInput!]
  OR: [PaymentAccountWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  type: PAYMENT_PROVIDER
  type_not: PAYMENT_PROVIDER
  type_in: [PAYMENT_PROVIDER!]
  type_not_in: [PAYMENT_PROVIDER!]
  user: UserWhereInput
  payments_every: PaymentWhereInput
  payments_some: PaymentWhereInput
  payments_none: PaymentWhereInput
  paypal: PaypalInformationWhereInput
  creditcard: CreditCardInformationWhereInput
}

input PaymentAccountWhereUniqueInput {
  id: ID
}

type PaymentConnection {
  pageInfo: PageInfo!
  edges: [PaymentEdge]!
}

input PaymentCreateInput {
  serviceFee: Float!
  placePrice: Float!
  totalPrice: Float!
  booking: BookingCreateOneWithoutPaymentInput!
  paymentMethod: PaymentAccountCreateOneWithoutPaymentsInput!
}

input PaymentCreateManyWithoutPaymentMethodInput {
  create: [PaymentCreateWithoutPaymentMethodInput!]
  connect: [PaymentWhereUniqueInput!]
}

input PaymentCreateOneWithoutBookingInput {
  create: PaymentCreateWithoutBookingInput
  connect: PaymentWhereUniqueInput
}

input PaymentCreateWithoutBookingInput {
  serviceFee: Float!
  placePrice: Float!
  totalPrice: Float!
  paymentMethod: PaymentAccountCreateOneWithoutPaymentsInput!
}

input PaymentCreateWithoutPaymentMethodInput {
  serviceFee: Float!
  placePrice: Float!
  totalPrice: Float!
  booking: BookingCreateOneWithoutPaymentInput!
}

type PaymentEdge {
  node: Payment!
  cursor: String!
}

enum PaymentOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  serviceFee_ASC
  serviceFee_DESC
  placePrice_ASC
  placePrice_DESC
  totalPrice_ASC
  totalPrice_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaymentPreviousValues {
  id: ID!
  createdAt: DateTime!
  serviceFee: Float!
  placePrice: Float!
  totalPrice: Float!
}

type PaymentSubscriptionPayload {
  mutation: MutationType!
  node: Payment
  updatedFields: [String!]
  previousValues: PaymentPreviousValues
}

input PaymentSubscriptionWhereInput {
  AND: [PaymentSubscriptionWhereInput!]
  OR: [PaymentSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaymentWhereInput
}

input PaymentUpdateInput {
  serviceFee: Float
  placePrice: Float
  totalPrice: Float
  booking: BookingUpdateOneWithoutPaymentInput
  paymentMethod: PaymentAccountUpdateOneWithoutPaymentsInput
}

input PaymentUpdateManyWithoutPaymentMethodInput {
  create: [PaymentCreateWithoutPaymentMethodInput!]
  connect: [PaymentWhereUniqueInput!]
  disconnect: [PaymentWhereUniqueInput!]
  delete: [PaymentWhereUniqueInput!]
  update: [PaymentUpdateWithoutPaymentMethodInput!]
  upsert: [PaymentUpsertWithoutPaymentMethodInput!]
}

input PaymentUpdateOneWithoutBookingInput {
  create: PaymentCreateWithoutBookingInput
  connect: PaymentWhereUniqueInput
  disconnect: PaymentWhereUniqueInput
  delete: PaymentWhereUniqueInput
  update: PaymentUpdateWithoutBookingInput
  upsert: PaymentUpsertWithoutBookingInput
}

input PaymentUpdateWithoutBookingDataInput {
  serviceFee: Float
  placePrice: Float
  totalPrice: Float
  paymentMethod: PaymentAccountUpdateOneWithoutPaymentsInput
}

input PaymentUpdateWithoutBookingInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutBookingDataInput!
}

input PaymentUpdateWithoutPaymentMethodDataInput {
  serviceFee: Float
  placePrice: Float
  totalPrice: Float
  booking: BookingUpdateOneWithoutPaymentInput
}

input PaymentUpdateWithoutPaymentMethodInput {
  where: PaymentWhereUniqueInput!
  data: PaymentUpdateWithoutPaymentMethodDataInput!
}

input PaymentUpsertWithoutBookingInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutBookingDataInput!
  create: PaymentCreateWithoutBookingInput!
}

input PaymentUpsertWithoutPaymentMethodInput {
  where: PaymentWhereUniqueInput!
  update: PaymentUpdateWithoutPaymentMethodDataInput!
  create: PaymentCreateWithoutPaymentMethodInput!
}

input PaymentWhereInput {
  AND: [PaymentWhereInput!]
  OR: [PaymentWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  serviceFee: Float
  serviceFee_not: Float
  serviceFee_in: [Float!]
  serviceFee_not_in: [Float!]
  serviceFee_lt: Float
  serviceFee_lte: Float
  serviceFee_gt: Float
  serviceFee_gte: Float
  placePrice: Float
  placePrice_not: Float
  placePrice_in: [Float!]
  placePrice_not_in: [Float!]
  placePrice_lt: Float
  placePrice_lte: Float
  placePrice_gt: Float
  placePrice_gte: Float
  totalPrice: Float
  totalPrice_not: Float
  totalPrice_in: [Float!]
  totalPrice_not_in: [Float!]
  totalPrice_lt: Float
  totalPrice_lte: Float
  totalPrice_gt: Float
  totalPrice_gte: Float
  booking: BookingWhereInput
  paymentMethod: PaymentAccountWhereInput
}

input PaymentWhereUniqueInput {
  id: ID
}

type PaypalInformationConnection {
  pageInfo: PageInfo!
  edges: [PaypalInformationEdge]!
}

input PaypalInformationCreateInput {
  email: String!
  paymentAccount: PaymentAccountCreateOneWithoutPaypalInput!
}

input PaypalInformationCreateOneWithoutPaymentAccountInput {
  create: PaypalInformationCreateWithoutPaymentAccountInput
  connect: PaypalInformationWhereUniqueInput
}

input PaypalInformationCreateWithoutPaymentAccountInput {
  email: String!
}

type PaypalInformationEdge {
  node: PaypalInformation!
  cursor: String!
}

enum PaypalInformationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  email_ASC
  email_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type PaypalInformationPreviousValues {
  id: ID!
  createdAt: DateTime!
  email: String!
}

type PaypalInformationSubscriptionPayload {
  mutation: MutationType!
  node: PaypalInformation
  updatedFields: [String!]
  previousValues: PaypalInformationPreviousValues
}

input PaypalInformationSubscriptionWhereInput {
  AND: [PaypalInformationSubscriptionWhereInput!]
  OR: [PaypalInformationSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PaypalInformationWhereInput
}

input PaypalInformationUpdateInput {
  email: String
  paymentAccount: PaymentAccountUpdateOneWithoutPaypalInput
}

input PaypalInformationUpdateOneWithoutPaymentAccountInput {
  create: PaypalInformationCreateWithoutPaymentAccountInput
  connect: PaypalInformationWhereUniqueInput
  disconnect: PaypalInformationWhereUniqueInput
  delete: PaypalInformationWhereUniqueInput
  update: PaypalInformationUpdateWithoutPaymentAccountInput
  upsert: PaypalInformationUpsertWithoutPaymentAccountInput
}

input PaypalInformationUpdateWithoutPaymentAccountDataInput {
  email: String
}

input PaypalInformationUpdateWithoutPaymentAccountInput {
  where: PaypalInformationWhereUniqueInput!
  data: PaypalInformationUpdateWithoutPaymentAccountDataInput!
}

input PaypalInformationUpsertWithoutPaymentAccountInput {
  where: PaypalInformationWhereUniqueInput!
  update: PaypalInformationUpdateWithoutPaymentAccountDataInput!
  create: PaypalInformationCreateWithoutPaymentAccountInput!
}

input PaypalInformationWhereInput {
  AND: [PaypalInformationWhereInput!]
  OR: [PaypalInformationWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  paymentAccount: PaymentAccountWhereInput
}

input PaypalInformationWhereUniqueInput {
  id: ID
}

type PictureConnection {
  pageInfo: PageInfo!
  edges: [PictureEdge]!
}

input PictureCreateInput {
  name: String!
  size: Int
  secret: String!
  contentType: String!
}

input PictureCreateManyInput {
  create: [PictureCreateInput!]
  connect: [PictureWhereUniqueInput!]
}

input PictureCreateOneInput {
  create: PictureCreateInput
  connect: PictureWhereUniqueInput
}

type PictureEdge {
  node: Picture!
  cursor: String!
}

enum PictureOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  size_ASC
  size_DESC
  secret_ASC
  secret_DESC
  contentType_ASC
  contentType_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PicturePreviousValues {
  id: ID!
  name: String!
  size: Int
  secret: String!
  contentType: String!
}

type PictureSubscriptionPayload {
  mutation: MutationType!
  node: Picture
  updatedFields: [String!]
  previousValues: PicturePreviousValues
}

input PictureSubscriptionWhereInput {
  AND: [PictureSubscriptionWhereInput!]
  OR: [PictureSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PictureWhereInput
}

input PictureUpdateInput {
  name: String
  size: Int
  secret: String
  contentType: String
}

input PictureUpdateManyInput {
  create: [PictureCreateInput!]
  connect: [PictureWhereUniqueInput!]
  disconnect: [PictureWhereUniqueInput!]
  delete: [PictureWhereUniqueInput!]
}

input PictureUpdateOneInput {
  create: PictureCreateInput
  connect: PictureWhereUniqueInput
  disconnect: PictureWhereUniqueInput
  delete: PictureWhereUniqueInput
}

input PictureWhereInput {
  AND: [PictureWhereInput!]
  OR: [PictureWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  size: Int
  size_not: Int
  size_in: [Int!]
  size_not_in: [Int!]
  size_lt: Int
  size_lte: Int
  size_gt: Int
  size_gte: Int
  secret: String
  secret_not: String
  secret_in: [String!]
  secret_not_in: [String!]
  secret_lt: String
  secret_lte: String
  secret_gt: String
  secret_gte: String
  secret_contains: String
  secret_not_contains: String
  secret_starts_with: String
  secret_not_starts_with: String
  secret_ends_with: String
  secret_not_ends_with: String
  contentType: String
  contentType_not: String
  contentType_in: [String!]
  contentType_not_in: [String!]
  contentType_lt: String
  contentType_lte: String
  contentType_gt: String
  contentType_gte: String
  contentType_contains: String
  contentType_not_contains: String
  contentType_starts_with: String
  contentType_not_starts_with: String
  contentType_ends_with: String
  contentType_not_ends_with: String
}

input PictureWhereUniqueInput {
  id: ID
}

enum PLACE_SIZES {
  ENTIRE_HOUSE
  ENTIRE_APARTMENT
  ENTIRE_EARTH_HOUSE
  ENTIRE_CABIN
  ENTIRE_VILLA
  ENTIRE_PLACE
  ENTIRE_BOAT
  PRIVATE_ROOM
}

type PlaceConnection {
  pageInfo: PageInfo!
  edges: [PlaceEdge]!
}

input PlaceCreateInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
  reviews: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput!
  host: UserCreateOneWithoutOwnedPlacesInput!
  pricing: PricingCreateOneWithoutPlaceInput!
  location: LocationCreateOneWithoutPlaceInput!
  views: ViewsCreateOneWithoutPlaceInput!
  guestRequirements: GuestRequirementsCreateOneWithoutPlaceInput
  policies: PoliciesCreateOneWithoutPlaceInput
  houseRules: HouseRulesCreateOneInput
  bookings: BookingCreateManyWithoutPlaceInput
  pictures: PictureCreateManyInput
}

input PlaceCreateManyWithoutHostInput {
  create: [PlaceCreateWithoutHostInput!]
  connect: [PlaceWhereUniqueInput!]
}

input PlaceCreateOneWithoutAmenitiesInput {
  create: PlaceCreateWithoutAmenitiesInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutBookingsInput {
  create: PlaceCreateWithoutBookingsInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutGuestRequirementsInput {
  create: PlaceCreateWithoutGuestRequirementsInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutLocationInput {
  create: PlaceCreateWithoutLocationInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutPoliciesInput {
  create: PlaceCreateWithoutPoliciesInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutPricingInput {
  create: PlaceCreateWithoutPricingInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutReviewsInput {
  create: PlaceCreateWithoutReviewsInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateOneWithoutViewsInput {
  create: PlaceCreateWithoutViewsInput
  connect: PlaceWhereUniqueInput
}

input PlaceCreateWithoutAmenitiesInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
  reviews: ReviewCreateManyWithoutPlaceInput
  host: UserCreateOneWithoutOwnedPlacesInput!
  pricing: PricingCreateOneWithoutPlaceInput!
  location: LocationCreateOneWithoutPlaceInput!
  views: ViewsCreateOneWithoutPlaceInput!
  guestRequirements: GuestRequirementsCreateOneWithoutPlaceInput
  policies: PoliciesCreateOneWithoutPlaceInput
  houseRules: HouseRulesCreateOneInput
  bookings: BookingCreateManyWithoutPlaceInput
  pictures: PictureCreateManyInput
}

input PlaceCreateWithoutBookingsInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
  reviews: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput!
  host: UserCreateOneWithoutOwnedPlacesInput!
  pricing: PricingCreateOneWithoutPlaceInput!
  location: LocationCreateOneWithoutPlaceInput!
  views: ViewsCreateOneWithoutPlaceInput!
  guestRequirements: GuestRequirementsCreateOneWithoutPlaceInput
  policies: PoliciesCreateOneWithoutPlaceInput
  houseRules: HouseRulesCreateOneInput
  pictures: PictureCreateManyInput
}

input PlaceCreateWithoutGuestRequirementsInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
  reviews: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput!
  host: UserCreateOneWithoutOwnedPlacesInput!
  pricing: PricingCreateOneWithoutPlaceInput!
  location: LocationCreateOneWithoutPlaceInput!
  views: ViewsCreateOneWithoutPlaceInput!
  policies: PoliciesCreateOneWithoutPlaceInput
  houseRules: HouseRulesCreateOneInput
  bookings: BookingCreateManyWithoutPlaceInput
  pictures: PictureCreateManyInput
}

input PlaceCreateWithoutHostInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
  reviews: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput!
  pricing: PricingCreateOneWithoutPlaceInput!
  location: LocationCreateOneWithoutPlaceInput!
  views: ViewsCreateOneWithoutPlaceInput!
  guestRequirements: GuestRequirementsCreateOneWithoutPlaceInput
  policies: PoliciesCreateOneWithoutPlaceInput
  houseRules: HouseRulesCreateOneInput
  bookings: BookingCreateManyWithoutPlaceInput
  pictures: PictureCreateManyInput
}

input PlaceCreateWithoutLocationInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
  reviews: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput!
  host: UserCreateOneWithoutOwnedPlacesInput!
  pricing: PricingCreateOneWithoutPlaceInput!
  views: ViewsCreateOneWithoutPlaceInput!
  guestRequirements: GuestRequirementsCreateOneWithoutPlaceInput
  policies: PoliciesCreateOneWithoutPlaceInput
  houseRules: HouseRulesCreateOneInput
  bookings: BookingCreateManyWithoutPlaceInput
  pictures: PictureCreateManyInput
}

input PlaceCreateWithoutPoliciesInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
  reviews: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput!
  host: UserCreateOneWithoutOwnedPlacesInput!
  pricing: PricingCreateOneWithoutPlaceInput!
  location: LocationCreateOneWithoutPlaceInput!
  views: ViewsCreateOneWithoutPlaceInput!
  guestRequirements: GuestRequirementsCreateOneWithoutPlaceInput
  houseRules: HouseRulesCreateOneInput
  bookings: BookingCreateManyWithoutPlaceInput
  pictures: PictureCreateManyInput
}

input PlaceCreateWithoutPricingInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
  reviews: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput!
  host: UserCreateOneWithoutOwnedPlacesInput!
  location: LocationCreateOneWithoutPlaceInput!
  views: ViewsCreateOneWithoutPlaceInput!
  guestRequirements: GuestRequirementsCreateOneWithoutPlaceInput
  policies: PoliciesCreateOneWithoutPlaceInput
  houseRules: HouseRulesCreateOneInput
  bookings: BookingCreateManyWithoutPlaceInput
  pictures: PictureCreateManyInput
}

input PlaceCreateWithoutReviewsInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
  amenities: AmenitiesCreateOneWithoutPlaceInput!
  host: UserCreateOneWithoutOwnedPlacesInput!
  pricing: PricingCreateOneWithoutPlaceInput!
  location: LocationCreateOneWithoutPlaceInput!
  views: ViewsCreateOneWithoutPlaceInput!
  guestRequirements: GuestRequirementsCreateOneWithoutPlaceInput
  policies: PoliciesCreateOneWithoutPlaceInput
  houseRules: HouseRulesCreateOneInput
  bookings: BookingCreateManyWithoutPlaceInput
  pictures: PictureCreateManyInput
}

input PlaceCreateWithoutViewsInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
  reviews: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput!
  host: UserCreateOneWithoutOwnedPlacesInput!
  pricing: PricingCreateOneWithoutPlaceInput!
  location: LocationCreateOneWithoutPlaceInput!
  guestRequirements: GuestRequirementsCreateOneWithoutPlaceInput
  policies: PoliciesCreateOneWithoutPlaceInput
  houseRules: HouseRulesCreateOneInput
  bookings: BookingCreateManyWithoutPlaceInput
  pictures: PictureCreateManyInput
}

type PlaceEdge {
  node: Place!
  cursor: String!
}

enum PlaceOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  size_ASC
  size_DESC
  shortDescription_ASC
  shortDescription_DESC
  description_ASC
  description_DESC
  slug_ASC
  slug_DESC
  maxGuests_ASC
  maxGuests_DESC
  numBedrooms_ASC
  numBedrooms_DESC
  numBeds_ASC
  numBeds_DESC
  numBaths_ASC
  numBaths_DESC
  popularity_ASC
  popularity_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PlacePreviousValues {
  id: ID!
  name: String
  size: PLACE_SIZES
  shortDescription: String!
  description: String!
  slug: String!
  maxGuests: Int!
  numBedrooms: Int!
  numBeds: Int!
  numBaths: Int!
  popularity: Int!
}

type PlaceSubscriptionPayload {
  mutation: MutationType!
  node: Place
  updatedFields: [String!]
  previousValues: PlacePreviousValues
}

input PlaceSubscriptionWhereInput {
  AND: [PlaceSubscriptionWhereInput!]
  OR: [PlaceSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PlaceWhereInput
}

input PlaceUpdateInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutPlaceInput
  amenities: AmenitiesUpdateOneWithoutPlaceInput
  host: UserUpdateOneWithoutOwnedPlacesInput
  pricing: PricingUpdateOneWithoutPlaceInput
  location: LocationUpdateOneWithoutPlaceInput
  views: ViewsUpdateOneWithoutPlaceInput
  guestRequirements: GuestRequirementsUpdateOneWithoutPlaceInput
  policies: PoliciesUpdateOneWithoutPlaceInput
  houseRules: HouseRulesUpdateOneInput
  bookings: BookingUpdateManyWithoutPlaceInput
  pictures: PictureUpdateManyInput
}

input PlaceUpdateManyWithoutHostInput {
  create: [PlaceCreateWithoutHostInput!]
  connect: [PlaceWhereUniqueInput!]
  disconnect: [PlaceWhereUniqueInput!]
  delete: [PlaceWhereUniqueInput!]
  update: [PlaceUpdateWithoutHostInput!]
  upsert: [PlaceUpsertWithoutHostInput!]
}

input PlaceUpdateOneWithoutAmenitiesInput {
  create: PlaceCreateWithoutAmenitiesInput
  connect: PlaceWhereUniqueInput
  disconnect: PlaceWhereUniqueInput
  delete: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutAmenitiesInput
  upsert: PlaceUpsertWithoutAmenitiesInput
}

input PlaceUpdateOneWithoutBookingsInput {
  create: PlaceCreateWithoutBookingsInput
  connect: PlaceWhereUniqueInput
  disconnect: PlaceWhereUniqueInput
  delete: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutBookingsInput
  upsert: PlaceUpsertWithoutBookingsInput
}

input PlaceUpdateOneWithoutGuestRequirementsInput {
  create: PlaceCreateWithoutGuestRequirementsInput
  connect: PlaceWhereUniqueInput
  disconnect: PlaceWhereUniqueInput
  delete: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutGuestRequirementsInput
  upsert: PlaceUpsertWithoutGuestRequirementsInput
}

input PlaceUpdateOneWithoutLocationInput {
  create: PlaceCreateWithoutLocationInput
  connect: PlaceWhereUniqueInput
  disconnect: PlaceWhereUniqueInput
  delete: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutLocationInput
  upsert: PlaceUpsertWithoutLocationInput
}

input PlaceUpdateOneWithoutPoliciesInput {
  create: PlaceCreateWithoutPoliciesInput
  connect: PlaceWhereUniqueInput
  disconnect: PlaceWhereUniqueInput
  delete: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutPoliciesInput
  upsert: PlaceUpsertWithoutPoliciesInput
}

input PlaceUpdateOneWithoutPricingInput {
  create: PlaceCreateWithoutPricingInput
  connect: PlaceWhereUniqueInput
  disconnect: PlaceWhereUniqueInput
  delete: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutPricingInput
  upsert: PlaceUpsertWithoutPricingInput
}

input PlaceUpdateOneWithoutReviewsInput {
  create: PlaceCreateWithoutReviewsInput
  connect: PlaceWhereUniqueInput
  disconnect: PlaceWhereUniqueInput
  delete: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutReviewsInput
  upsert: PlaceUpsertWithoutReviewsInput
}

input PlaceUpdateOneWithoutViewsInput {
  create: PlaceCreateWithoutViewsInput
  connect: PlaceWhereUniqueInput
  disconnect: PlaceWhereUniqueInput
  delete: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutViewsInput
  upsert: PlaceUpsertWithoutViewsInput
}

input PlaceUpdateWithoutAmenitiesDataInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutPlaceInput
  host: UserUpdateOneWithoutOwnedPlacesInput
  pricing: PricingUpdateOneWithoutPlaceInput
  location: LocationUpdateOneWithoutPlaceInput
  views: ViewsUpdateOneWithoutPlaceInput
  guestRequirements: GuestRequirementsUpdateOneWithoutPlaceInput
  policies: PoliciesUpdateOneWithoutPlaceInput
  houseRules: HouseRulesUpdateOneInput
  bookings: BookingUpdateManyWithoutPlaceInput
  pictures: PictureUpdateManyInput
}

input PlaceUpdateWithoutAmenitiesInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutAmenitiesDataInput!
}

input PlaceUpdateWithoutBookingsDataInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutPlaceInput
  amenities: AmenitiesUpdateOneWithoutPlaceInput
  host: UserUpdateOneWithoutOwnedPlacesInput
  pricing: PricingUpdateOneWithoutPlaceInput
  location: LocationUpdateOneWithoutPlaceInput
  views: ViewsUpdateOneWithoutPlaceInput
  guestRequirements: GuestRequirementsUpdateOneWithoutPlaceInput
  policies: PoliciesUpdateOneWithoutPlaceInput
  houseRules: HouseRulesUpdateOneInput
  pictures: PictureUpdateManyInput
}

input PlaceUpdateWithoutBookingsInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutBookingsDataInput!
}

input PlaceUpdateWithoutGuestRequirementsDataInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutPlaceInput
  amenities: AmenitiesUpdateOneWithoutPlaceInput
  host: UserUpdateOneWithoutOwnedPlacesInput
  pricing: PricingUpdateOneWithoutPlaceInput
  location: LocationUpdateOneWithoutPlaceInput
  views: ViewsUpdateOneWithoutPlaceInput
  policies: PoliciesUpdateOneWithoutPlaceInput
  houseRules: HouseRulesUpdateOneInput
  bookings: BookingUpdateManyWithoutPlaceInput
  pictures: PictureUpdateManyInput
}

input PlaceUpdateWithoutGuestRequirementsInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutGuestRequirementsDataInput!
}

input PlaceUpdateWithoutHostDataInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutPlaceInput
  amenities: AmenitiesUpdateOneWithoutPlaceInput
  pricing: PricingUpdateOneWithoutPlaceInput
  location: LocationUpdateOneWithoutPlaceInput
  views: ViewsUpdateOneWithoutPlaceInput
  guestRequirements: GuestRequirementsUpdateOneWithoutPlaceInput
  policies: PoliciesUpdateOneWithoutPlaceInput
  houseRules: HouseRulesUpdateOneInput
  bookings: BookingUpdateManyWithoutPlaceInput
  pictures: PictureUpdateManyInput
}

input PlaceUpdateWithoutHostInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutHostDataInput!
}

input PlaceUpdateWithoutLocationDataInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutPlaceInput
  amenities: AmenitiesUpdateOneWithoutPlaceInput
  host: UserUpdateOneWithoutOwnedPlacesInput
  pricing: PricingUpdateOneWithoutPlaceInput
  views: ViewsUpdateOneWithoutPlaceInput
  guestRequirements: GuestRequirementsUpdateOneWithoutPlaceInput
  policies: PoliciesUpdateOneWithoutPlaceInput
  houseRules: HouseRulesUpdateOneInput
  bookings: BookingUpdateManyWithoutPlaceInput
  pictures: PictureUpdateManyInput
}

input PlaceUpdateWithoutLocationInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutLocationDataInput!
}

input PlaceUpdateWithoutPoliciesDataInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutPlaceInput
  amenities: AmenitiesUpdateOneWithoutPlaceInput
  host: UserUpdateOneWithoutOwnedPlacesInput
  pricing: PricingUpdateOneWithoutPlaceInput
  location: LocationUpdateOneWithoutPlaceInput
  views: ViewsUpdateOneWithoutPlaceInput
  guestRequirements: GuestRequirementsUpdateOneWithoutPlaceInput
  houseRules: HouseRulesUpdateOneInput
  bookings: BookingUpdateManyWithoutPlaceInput
  pictures: PictureUpdateManyInput
}

input PlaceUpdateWithoutPoliciesInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutPoliciesDataInput!
}

input PlaceUpdateWithoutPricingDataInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutPlaceInput
  amenities: AmenitiesUpdateOneWithoutPlaceInput
  host: UserUpdateOneWithoutOwnedPlacesInput
  location: LocationUpdateOneWithoutPlaceInput
  views: ViewsUpdateOneWithoutPlaceInput
  guestRequirements: GuestRequirementsUpdateOneWithoutPlaceInput
  policies: PoliciesUpdateOneWithoutPlaceInput
  houseRules: HouseRulesUpdateOneInput
  bookings: BookingUpdateManyWithoutPlaceInput
  pictures: PictureUpdateManyInput
}

input PlaceUpdateWithoutPricingInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutPricingDataInput!
}

input PlaceUpdateWithoutReviewsDataInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  amenities: AmenitiesUpdateOneWithoutPlaceInput
  host: UserUpdateOneWithoutOwnedPlacesInput
  pricing: PricingUpdateOneWithoutPlaceInput
  location: LocationUpdateOneWithoutPlaceInput
  views: ViewsUpdateOneWithoutPlaceInput
  guestRequirements: GuestRequirementsUpdateOneWithoutPlaceInput
  policies: PoliciesUpdateOneWithoutPlaceInput
  houseRules: HouseRulesUpdateOneInput
  bookings: BookingUpdateManyWithoutPlaceInput
  pictures: PictureUpdateManyInput
}

input PlaceUpdateWithoutReviewsInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutReviewsDataInput!
}

input PlaceUpdateWithoutViewsDataInput {
  name: String
  size: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews: ReviewUpdateManyWithoutPlaceInput
  amenities: AmenitiesUpdateOneWithoutPlaceInput
  host: UserUpdateOneWithoutOwnedPlacesInput
  pricing: PricingUpdateOneWithoutPlaceInput
  location: LocationUpdateOneWithoutPlaceInput
  guestRequirements: GuestRequirementsUpdateOneWithoutPlaceInput
  policies: PoliciesUpdateOneWithoutPlaceInput
  houseRules: HouseRulesUpdateOneInput
  bookings: BookingUpdateManyWithoutPlaceInput
  pictures: PictureUpdateManyInput
}

input PlaceUpdateWithoutViewsInput {
  where: PlaceWhereUniqueInput!
  data: PlaceUpdateWithoutViewsDataInput!
}

input PlaceUpsertWithoutAmenitiesInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutAmenitiesDataInput!
  create: PlaceCreateWithoutAmenitiesInput!
}

input PlaceUpsertWithoutBookingsInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutBookingsDataInput!
  create: PlaceCreateWithoutBookingsInput!
}

input PlaceUpsertWithoutGuestRequirementsInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutGuestRequirementsDataInput!
  create: PlaceCreateWithoutGuestRequirementsInput!
}

input PlaceUpsertWithoutHostInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutHostDataInput!
  create: PlaceCreateWithoutHostInput!
}

input PlaceUpsertWithoutLocationInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutLocationDataInput!
  create: PlaceCreateWithoutLocationInput!
}

input PlaceUpsertWithoutPoliciesInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutPoliciesDataInput!
  create: PlaceCreateWithoutPoliciesInput!
}

input PlaceUpsertWithoutPricingInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutPricingDataInput!
  create: PlaceCreateWithoutPricingInput!
}

input PlaceUpsertWithoutReviewsInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutReviewsDataInput!
  create: PlaceCreateWithoutReviewsInput!
}

input PlaceUpsertWithoutViewsInput {
  where: PlaceWhereUniqueInput!
  update: PlaceUpdateWithoutViewsDataInput!
  create: PlaceCreateWithoutViewsInput!
}

input PlaceWhereInput {
  AND: [PlaceWhereInput!]
  OR: [PlaceWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  name: String
  name_not: String
  name_in: [String!]
  name_not_in: [String!]
  name_lt: String
  name_lte: String
  name_gt: String
  name_gte: String
  name_contains: String
  name_not_contains: String
  name_starts_with: String
  name_not_starts_with: String
  name_ends_with: String
  name_not_ends_with: String
  size: PLACE_SIZES
  size_not: PLACE_SIZES
  size_in: [PLACE_SIZES!]
  size_not_in: [PLACE_SIZES!]
  shortDescription: String
  shortDescription_not: String
  shortDescription_in: [String!]
  shortDescription_not_in: [String!]
  shortDescription_lt: String
  shortDescription_lte: String
  shortDescription_gt: String
  shortDescription_gte: String
  shortDescription_contains: String
  shortDescription_not_contains: String
  shortDescription_starts_with: String
  shortDescription_not_starts_with: String
  shortDescription_ends_with: String
  shortDescription_not_ends_with: String
  description: String
  description_not: String
  description_in: [String!]
  description_not_in: [String!]
  description_lt: String
  description_lte: String
  description_gt: String
  description_gte: String
  description_contains: String
  description_not_contains: String
  description_starts_with: String
  description_not_starts_with: String
  description_ends_with: String
  description_not_ends_with: String
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  maxGuests: Int
  maxGuests_not: Int
  maxGuests_in: [Int!]
  maxGuests_not_in: [Int!]
  maxGuests_lt: Int
  maxGuests_lte: Int
  maxGuests_gt: Int
  maxGuests_gte: Int
  numBedrooms: Int
  numBedrooms_not: Int
  numBedrooms_in: [Int!]
  numBedrooms_not_in: [Int!]
  numBedrooms_lt: Int
  numBedrooms_lte: Int
  numBedrooms_gt: Int
  numBedrooms_gte: Int
  numBeds: Int
  numBeds_not: Int
  numBeds_in: [Int!]
  numBeds_not_in: [Int!]
  numBeds_lt: Int
  numBeds_lte: Int
  numBeds_gt: Int
  numBeds_gte: Int
  numBaths: Int
  numBaths_not: Int
  numBaths_in: [Int!]
  numBaths_not_in: [Int!]
  numBaths_lt: Int
  numBaths_lte: Int
  numBaths_gt: Int
  numBaths_gte: Int
  popularity: Int
  popularity_not: Int
  popularity_in: [Int!]
  popularity_not_in: [Int!]
  popularity_lt: Int
  popularity_lte: Int
  popularity_gt: Int
  popularity_gte: Int
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
  amenities: AmenitiesWhereInput
  host: UserWhereInput
  pricing: PricingWhereInput
  location: LocationWhereInput
  views: ViewsWhereInput
  guestRequirements: GuestRequirementsWhereInput
  policies: PoliciesWhereInput
  houseRules: HouseRulesWhereInput
  bookings_every: BookingWhereInput
  bookings_some: BookingWhereInput
  bookings_none: BookingWhereInput
  pictures_every: PictureWhereInput
  pictures_some: PictureWhereInput
  pictures_none: PictureWhereInput
}

input PlaceWhereUniqueInput {
  id: ID
}

type PoliciesConnection {
  pageInfo: PageInfo!
  edges: [PoliciesEdge]!
}

input PoliciesCreateInput {
  checkInStartTime: Float!
  checkInEndTime: Float!
  checkoutTime: Float!
  place: PlaceCreateOneWithoutPoliciesInput!
}

input PoliciesCreateOneWithoutPlaceInput {
  create: PoliciesCreateWithoutPlaceInput
  connect: PoliciesWhereUniqueInput
}

input PoliciesCreateWithoutPlaceInput {
  checkInStartTime: Float!
  checkInEndTime: Float!
  checkoutTime: Float!
}

type PoliciesEdge {
  node: Policies!
  cursor: String!
}

enum PoliciesOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  checkInStartTime_ASC
  checkInStartTime_DESC
  checkInEndTime_ASC
  checkInEndTime_DESC
  checkoutTime_ASC
  checkoutTime_DESC
}

type PoliciesPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  checkInStartTime: Float!
  checkInEndTime: Float!
  checkoutTime: Float!
}

type PoliciesSubscriptionPayload {
  mutation: MutationType!
  node: Policies
  updatedFields: [String!]
  previousValues: PoliciesPreviousValues
}

input PoliciesSubscriptionWhereInput {
  AND: [PoliciesSubscriptionWhereInput!]
  OR: [PoliciesSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PoliciesWhereInput
}

input PoliciesUpdateInput {
  checkInStartTime: Float
  checkInEndTime: Float
  checkoutTime: Float
  place: PlaceUpdateOneWithoutPoliciesInput
}

input PoliciesUpdateOneWithoutPlaceInput {
  create: PoliciesCreateWithoutPlaceInput
  connect: PoliciesWhereUniqueInput
  disconnect: PoliciesWhereUniqueInput
  delete: PoliciesWhereUniqueInput
  update: PoliciesUpdateWithoutPlaceInput
  upsert: PoliciesUpsertWithoutPlaceInput
}

input PoliciesUpdateWithoutPlaceDataInput {
  checkInStartTime: Float
  checkInEndTime: Float
  checkoutTime: Float
}

input PoliciesUpdateWithoutPlaceInput {
  where: PoliciesWhereUniqueInput!
  data: PoliciesUpdateWithoutPlaceDataInput!
}

input PoliciesUpsertWithoutPlaceInput {
  where: PoliciesWhereUniqueInput!
  update: PoliciesUpdateWithoutPlaceDataInput!
  create: PoliciesCreateWithoutPlaceInput!
}

input PoliciesWhereInput {
  AND: [PoliciesWhereInput!]
  OR: [PoliciesWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  checkInStartTime: Float
  checkInStartTime_not: Float
  checkInStartTime_in: [Float!]
  checkInStartTime_not_in: [Float!]
  checkInStartTime_lt: Float
  checkInStartTime_lte: Float
  checkInStartTime_gt: Float
  checkInStartTime_gte: Float
  checkInEndTime: Float
  checkInEndTime_not: Float
  checkInEndTime_in: [Float!]
  checkInEndTime_not_in: [Float!]
  checkInEndTime_lt: Float
  checkInEndTime_lte: Float
  checkInEndTime_gt: Float
  checkInEndTime_gte: Float
  checkoutTime: Float
  checkoutTime_not: Float
  checkoutTime_in: [Float!]
  checkoutTime_not_in: [Float!]
  checkoutTime_lt: Float
  checkoutTime_lte: Float
  checkoutTime_gt: Float
  checkoutTime_gte: Float
  place: PlaceWhereInput
}

input PoliciesWhereUniqueInput {
  id: ID
}

type PricingConnection {
  pageInfo: PageInfo!
  edges: [PricingEdge]!
}

input PricingCreateInput {
  monthlyDiscount: Int
  weeklyDiscount: Int
  perNight: Int!
  smartPricing: Boolean
  basePrice: Int!
  averageWeekly: Int!
  averageMonthly: Int!
  cleaningFee: Int
  securityDeposit: Int
  extraGuests: Int
  weekendPricing: Int
  currency: CURRENCY
  place: PlaceCreateOneWithoutPricingInput!
}

input PricingCreateOneWithoutPlaceInput {
  create: PricingCreateWithoutPlaceInput
  connect: PricingWhereUniqueInput
}

input PricingCreateWithoutPlaceInput {
  monthlyDiscount: Int
  weeklyDiscount: Int
  perNight: Int!
  smartPricing: Boolean
  basePrice: Int!
  averageWeekly: Int!
  averageMonthly: Int!
  cleaningFee: Int
  securityDeposit: Int
  extraGuests: Int
  weekendPricing: Int
  currency: CURRENCY
}

type PricingEdge {
  node: Pricing!
  cursor: String!
}

enum PricingOrderByInput {
  id_ASC
  id_DESC
  monthlyDiscount_ASC
  monthlyDiscount_DESC
  weeklyDiscount_ASC
  weeklyDiscount_DESC
  perNight_ASC
  perNight_DESC
  smartPricing_ASC
  smartPricing_DESC
  basePrice_ASC
  basePrice_DESC
  averageWeekly_ASC
  averageWeekly_DESC
  averageMonthly_ASC
  averageMonthly_DESC
  cleaningFee_ASC
  cleaningFee_DESC
  securityDeposit_ASC
  securityDeposit_DESC
  extraGuests_ASC
  extraGuests_DESC
  weekendPricing_ASC
  weekendPricing_DESC
  currency_ASC
  currency_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PricingPreviousValues {
  id: ID!
  monthlyDiscount: Int
  weeklyDiscount: Int
  perNight: Int!
  smartPricing: Boolean!
  basePrice: Int!
  averageWeekly: Int!
  averageMonthly: Int!
  cleaningFee: Int
  securityDeposit: Int
  extraGuests: Int
  weekendPricing: Int
  currency: CURRENCY
}

type PricingSubscriptionPayload {
  mutation: MutationType!
  node: Pricing
  updatedFields: [String!]
  previousValues: PricingPreviousValues
}

input PricingSubscriptionWhereInput {
  AND: [PricingSubscriptionWhereInput!]
  OR: [PricingSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: PricingWhereInput
}

input PricingUpdateInput {
  monthlyDiscount: Int
  weeklyDiscount: Int
  perNight: Int
  smartPricing: Boolean
  basePrice: Int
  averageWeekly: Int
  averageMonthly: Int
  cleaningFee: Int
  securityDeposit: Int
  extraGuests: Int
  weekendPricing: Int
  currency: CURRENCY
  place: PlaceUpdateOneWithoutPricingInput
}

input PricingUpdateOneWithoutPlaceInput {
  create: PricingCreateWithoutPlaceInput
  connect: PricingWhereUniqueInput
  disconnect: PricingWhereUniqueInput
  delete: PricingWhereUniqueInput
  update: PricingUpdateWithoutPlaceInput
  upsert: PricingUpsertWithoutPlaceInput
}

input PricingUpdateWithoutPlaceDataInput {
  monthlyDiscount: Int
  weeklyDiscount: Int
  perNight: Int
  smartPricing: Boolean
  basePrice: Int
  averageWeekly: Int
  averageMonthly: Int
  cleaningFee: Int
  securityDeposit: Int
  extraGuests: Int
  weekendPricing: Int
  currency: CURRENCY
}

input PricingUpdateWithoutPlaceInput {
  where: PricingWhereUniqueInput!
  data: PricingUpdateWithoutPlaceDataInput!
}

input PricingUpsertWithoutPlaceInput {
  where: PricingWhereUniqueInput!
  update: PricingUpdateWithoutPlaceDataInput!
  create: PricingCreateWithoutPlaceInput!
}

input PricingWhereInput {
  AND: [PricingWhereInput!]
  OR: [PricingWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  monthlyDiscount: Int
  monthlyDiscount_not: Int
  monthlyDiscount_in: [Int!]
  monthlyDiscount_not_in: [Int!]
  monthlyDiscount_lt: Int
  monthlyDiscount_lte: Int
  monthlyDiscount_gt: Int
  monthlyDiscount_gte: Int
  weeklyDiscount: Int
  weeklyDiscount_not: Int
  weeklyDiscount_in: [Int!]
  weeklyDiscount_not_in: [Int!]
  weeklyDiscount_lt: Int
  weeklyDiscount_lte: Int
  weeklyDiscount_gt: Int
  weeklyDiscount_gte: Int
  perNight: Int
  perNight_not: Int
  perNight_in: [Int!]
  perNight_not_in: [Int!]
  perNight_lt: Int
  perNight_lte: Int
  perNight_gt: Int
  perNight_gte: Int
  smartPricing: Boolean
  smartPricing_not: Boolean
  basePrice: Int
  basePrice_not: Int
  basePrice_in: [Int!]
  basePrice_not_in: [Int!]
  basePrice_lt: Int
  basePrice_lte: Int
  basePrice_gt: Int
  basePrice_gte: Int
  averageWeekly: Int
  averageWeekly_not: Int
  averageWeekly_in: [Int!]
  averageWeekly_not_in: [Int!]
  averageWeekly_lt: Int
  averageWeekly_lte: Int
  averageWeekly_gt: Int
  averageWeekly_gte: Int
  averageMonthly: Int
  averageMonthly_not: Int
  averageMonthly_in: [Int!]
  averageMonthly_not_in: [Int!]
  averageMonthly_lt: Int
  averageMonthly_lte: Int
  averageMonthly_gt: Int
  averageMonthly_gte: Int
  cleaningFee: Int
  cleaningFee_not: Int
  cleaningFee_in: [Int!]
  cleaningFee_not_in: [Int!]
  cleaningFee_lt: Int
  cleaningFee_lte: Int
  cleaningFee_gt: Int
  cleaningFee_gte: Int
  securityDeposit: Int
  securityDeposit_not: Int
  securityDeposit_in: [Int!]
  securityDeposit_not_in: [Int!]
  securityDeposit_lt: Int
  securityDeposit_lte: Int
  securityDeposit_gt: Int
  securityDeposit_gte: Int
  extraGuests: Int
  extraGuests_not: Int
  extraGuests_in: [Int!]
  extraGuests_not_in: [Int!]
  extraGuests_lt: Int
  extraGuests_lte: Int
  extraGuests_gt: Int
  extraGuests_gte: Int
  weekendPricing: Int
  weekendPricing_not: Int
  weekendPricing_in: [Int!]
  weekendPricing_not_in: [Int!]
  weekendPricing_lt: Int
  weekendPricing_lte: Int
  weekendPricing_gt: Int
  weekendPricing_gte: Int
  currency: CURRENCY
  currency_not: CURRENCY
  currency_in: [CURRENCY!]
  currency_not_in: [CURRENCY!]
  place: PlaceWhereInput
}

input PricingWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  places(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Place]!
  pricings(where: PricingWhereInput, orderBy: PricingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Pricing]!
  guestRequirementses(where: GuestRequirementsWhereInput, orderBy: GuestRequirementsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GuestRequirements]!
  policieses(where: PoliciesWhereInput, orderBy: PoliciesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Policies]!
  houseRuleses(where: HouseRulesWhereInput, orderBy: HouseRulesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [HouseRules]!
  viewses(where: ViewsWhereInput, orderBy: ViewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Views]!
  locations(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Location]!
  neighbourhoods(where: NeighbourhoodWhereInput, orderBy: NeighbourhoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Neighbourhood]!
  cities(where: CityWhereInput, orderBy: CityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [City]!
  pictures(where: PictureWhereInput, orderBy: PictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Picture]!
  experiences(where: ExperienceWhereInput, orderBy: ExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Experience]!
  experienceCategories(where: ExperienceCategoryWhereInput, orderBy: ExperienceCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ExperienceCategory]!
  amenitieses(where: AmenitiesWhereInput, orderBy: AmenitiesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Amenities]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  bookings(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Booking]!
  payments(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Payment]!
  paymentAccounts(where: PaymentAccountWhereInput, orderBy: PaymentAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaymentAccount]!
  paypalInformations(where: PaypalInformationWhereInput, orderBy: PaypalInformationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [PaypalInformation]!
  creditCardInformations(where: CreditCardInformationWhereInput, orderBy: CreditCardInformationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [CreditCardInformation]!
  messages(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Message]!
  notifications(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Notification]!
  restaurants(where: RestaurantWhereInput, orderBy: RestaurantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Restaurant]!
  user(where: UserWhereUniqueInput!): User
  place(where: PlaceWhereUniqueInput!): Place
  pricing(where: PricingWhereUniqueInput!): Pricing
  guestRequirements(where: GuestRequirementsWhereUniqueInput!): GuestRequirements
  policies(where: PoliciesWhereUniqueInput!): Policies
  houseRules(where: HouseRulesWhereUniqueInput!): HouseRules
  views(where: ViewsWhereUniqueInput!): Views
  location(where: LocationWhereUniqueInput!): Location
  neighbourhood(where: NeighbourhoodWhereUniqueInput!): Neighbourhood
  city(where: CityWhereUniqueInput!): City
  picture(where: PictureWhereUniqueInput!): Picture
  experience(where: ExperienceWhereUniqueInput!): Experience
  experienceCategory(where: ExperienceCategoryWhereUniqueInput!): ExperienceCategory
  amenities(where: AmenitiesWhereUniqueInput!): Amenities
  review(where: ReviewWhereUniqueInput!): Review
  booking(where: BookingWhereUniqueInput!): Booking
  payment(where: PaymentWhereUniqueInput!): Payment
  paymentAccount(where: PaymentAccountWhereUniqueInput!): PaymentAccount
  paypalInformation(where: PaypalInformationWhereUniqueInput!): PaypalInformation
  creditCardInformation(where: CreditCardInformationWhereUniqueInput!): CreditCardInformation
  message(where: MessageWhereUniqueInput!): Message
  notification(where: NotificationWhereUniqueInput!): Notification
  restaurant(where: RestaurantWhereUniqueInput!): Restaurant
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  placesConnection(where: PlaceWhereInput, orderBy: PlaceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PlaceConnection!
  pricingsConnection(where: PricingWhereInput, orderBy: PricingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PricingConnection!
  guestRequirementsesConnection(where: GuestRequirementsWhereInput, orderBy: GuestRequirementsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GuestRequirementsConnection!
  policiesesConnection(where: PoliciesWhereInput, orderBy: PoliciesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PoliciesConnection!
  houseRulesesConnection(where: HouseRulesWhereInput, orderBy: HouseRulesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): HouseRulesConnection!
  viewsesConnection(where: ViewsWhereInput, orderBy: ViewsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ViewsConnection!
  locationsConnection(where: LocationWhereInput, orderBy: LocationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): LocationConnection!
  neighbourhoodsConnection(where: NeighbourhoodWhereInput, orderBy: NeighbourhoodOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NeighbourhoodConnection!
  citiesConnection(where: CityWhereInput, orderBy: CityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CityConnection!
  picturesConnection(where: PictureWhereInput, orderBy: PictureOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PictureConnection!
  experiencesConnection(where: ExperienceWhereInput, orderBy: ExperienceOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExperienceConnection!
  experienceCategoriesConnection(where: ExperienceCategoryWhereInput, orderBy: ExperienceCategoryOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ExperienceCategoryConnection!
  amenitiesesConnection(where: AmenitiesWhereInput, orderBy: AmenitiesOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AmenitiesConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  bookingsConnection(where: BookingWhereInput, orderBy: BookingOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BookingConnection!
  paymentsConnection(where: PaymentWhereInput, orderBy: PaymentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentConnection!
  paymentAccountsConnection(where: PaymentAccountWhereInput, orderBy: PaymentAccountOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaymentAccountConnection!
  paypalInformationsConnection(where: PaypalInformationWhereInput, orderBy: PaypalInformationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PaypalInformationConnection!
  creditCardInformationsConnection(where: CreditCardInformationWhereInput, orderBy: CreditCardInformationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): CreditCardInformationConnection!
  messagesConnection(where: MessageWhereInput, orderBy: MessageOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): MessageConnection!
  notificationsConnection(where: NotificationWhereInput, orderBy: NotificationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): NotificationConnection!
  restaurantsConnection(where: RestaurantWhereInput, orderBy: RestaurantOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RestaurantConnection!
  node(id: ID!): Node
}

type RestaurantConnection {
  pageInfo: PageInfo!
  edges: [RestaurantEdge]!
}

input RestaurantCreateInput {
  title: String!
  avgPricePerPerson: Int!
  isCurated: Boolean
  slug: String!
  popularity: Int!
  pictures: PictureCreateManyInput
  location: LocationCreateOneWithoutRestaurantInput!
}

input RestaurantCreateOneWithoutLocationInput {
  create: RestaurantCreateWithoutLocationInput
  connect: RestaurantWhereUniqueInput
}

input RestaurantCreateWithoutLocationInput {
  title: String!
  avgPricePerPerson: Int!
  isCurated: Boolean
  slug: String!
  popularity: Int!
  pictures: PictureCreateManyInput
}

type RestaurantEdge {
  node: Restaurant!
  cursor: String!
}

enum RestaurantOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  title_ASC
  title_DESC
  avgPricePerPerson_ASC
  avgPricePerPerson_DESC
  isCurated_ASC
  isCurated_DESC
  slug_ASC
  slug_DESC
  popularity_ASC
  popularity_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type RestaurantPreviousValues {
  id: ID!
  createdAt: DateTime!
  title: String!
  avgPricePerPerson: Int!
  isCurated: Boolean!
  slug: String!
  popularity: Int!
}

type RestaurantSubscriptionPayload {
  mutation: MutationType!
  node: Restaurant
  updatedFields: [String!]
  previousValues: RestaurantPreviousValues
}

input RestaurantSubscriptionWhereInput {
  AND: [RestaurantSubscriptionWhereInput!]
  OR: [RestaurantSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: RestaurantWhereInput
}

input RestaurantUpdateInput {
  title: String
  avgPricePerPerson: Int
  isCurated: Boolean
  slug: String
  popularity: Int
  pictures: PictureUpdateManyInput
  location: LocationUpdateOneWithoutRestaurantInput
}

input RestaurantUpdateOneWithoutLocationInput {
  create: RestaurantCreateWithoutLocationInput
  connect: RestaurantWhereUniqueInput
  disconnect: RestaurantWhereUniqueInput
  delete: RestaurantWhereUniqueInput
  update: RestaurantUpdateWithoutLocationInput
  upsert: RestaurantUpsertWithoutLocationInput
}

input RestaurantUpdateWithoutLocationDataInput {
  title: String
  avgPricePerPerson: Int
  isCurated: Boolean
  slug: String
  popularity: Int
  pictures: PictureUpdateManyInput
}

input RestaurantUpdateWithoutLocationInput {
  where: RestaurantWhereUniqueInput!
  data: RestaurantUpdateWithoutLocationDataInput!
}

input RestaurantUpsertWithoutLocationInput {
  where: RestaurantWhereUniqueInput!
  update: RestaurantUpdateWithoutLocationDataInput!
  create: RestaurantCreateWithoutLocationInput!
}

input RestaurantWhereInput {
  AND: [RestaurantWhereInput!]
  OR: [RestaurantWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  title: String
  title_not: String
  title_in: [String!]
  title_not_in: [String!]
  title_lt: String
  title_lte: String
  title_gt: String
  title_gte: String
  title_contains: String
  title_not_contains: String
  title_starts_with: String
  title_not_starts_with: String
  title_ends_with: String
  title_not_ends_with: String
  avgPricePerPerson: Int
  avgPricePerPerson_not: Int
  avgPricePerPerson_in: [Int!]
  avgPricePerPerson_not_in: [Int!]
  avgPricePerPerson_lt: Int
  avgPricePerPerson_lte: Int
  avgPricePerPerson_gt: Int
  avgPricePerPerson_gte: Int
  isCurated: Boolean
  isCurated_not: Boolean
  slug: String
  slug_not: String
  slug_in: [String!]
  slug_not_in: [String!]
  slug_lt: String
  slug_lte: String
  slug_gt: String
  slug_gte: String
  slug_contains: String
  slug_not_contains: String
  slug_starts_with: String
  slug_not_starts_with: String
  slug_ends_with: String
  slug_not_ends_with: String
  popularity: Int
  popularity_not: Int
  popularity_in: [Int!]
  popularity_not_in: [Int!]
  popularity_lt: Int
  popularity_lte: Int
  popularity_gt: Int
  popularity_gte: Int
  pictures_every: PictureWhereInput
  pictures_some: PictureWhereInput
  pictures_none: PictureWhereInput
  location: LocationWhereInput
}

input RestaurantWhereUniqueInput {
  id: ID
}

type ReviewConnection {
  pageInfo: PageInfo!
  edges: [ReviewEdge]!
}

input ReviewCreateInput {
  text: String!
  stars: Int!
  accuracy: Int!
  location: Int!
  checkIn: Int!
  value: Int!
  cleanliness: Int!
  communication: Int!
  place: PlaceCreateOneWithoutReviewsInput!
  experience: ExperienceCreateOneWithoutReviewsInput
}

input ReviewCreateManyWithoutExperienceInput {
  create: [ReviewCreateWithoutExperienceInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateManyWithoutPlaceInput {
  create: [ReviewCreateWithoutPlaceInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutExperienceInput {
  text: String!
  stars: Int!
  accuracy: Int!
  location: Int!
  checkIn: Int!
  value: Int!
  cleanliness: Int!
  communication: Int!
  place: PlaceCreateOneWithoutReviewsInput!
}

input ReviewCreateWithoutPlaceInput {
  text: String!
  stars: Int!
  accuracy: Int!
  location: Int!
  checkIn: Int!
  value: Int!
  cleanliness: Int!
  communication: Int!
  experience: ExperienceCreateOneWithoutReviewsInput
}

type ReviewEdge {
  node: Review!
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  text_ASC
  text_DESC
  stars_ASC
  stars_DESC
  accuracy_ASC
  accuracy_DESC
  location_ASC
  location_DESC
  checkIn_ASC
  checkIn_DESC
  value_ASC
  value_DESC
  cleanliness_ASC
  cleanliness_DESC
  communication_ASC
  communication_DESC
  updatedAt_ASC
  updatedAt_DESC
}

type ReviewPreviousValues {
  id: ID!
  createdAt: DateTime!
  text: String!
  stars: Int!
  accuracy: Int!
  location: Int!
  checkIn: Int!
  value: Int!
  cleanliness: Int!
  communication: Int!
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  AND: [ReviewSubscriptionWhereInput!]
  OR: [ReviewSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  cleanliness: Int
  communication: Int
  place: PlaceUpdateOneWithoutReviewsInput
  experience: ExperienceUpdateOneWithoutReviewsInput
}

input ReviewUpdateManyWithoutExperienceInput {
  create: [ReviewCreateWithoutExperienceInput!]
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithoutExperienceInput!]
  upsert: [ReviewUpsertWithoutExperienceInput!]
}

input ReviewUpdateManyWithoutPlaceInput {
  create: [ReviewCreateWithoutPlaceInput!]
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithoutPlaceInput!]
  upsert: [ReviewUpsertWithoutPlaceInput!]
}

input ReviewUpdateWithoutExperienceDataInput {
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  cleanliness: Int
  communication: Int
  place: PlaceUpdateOneWithoutReviewsInput
}

input ReviewUpdateWithoutExperienceInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutExperienceDataInput!
}

input ReviewUpdateWithoutPlaceDataInput {
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  cleanliness: Int
  communication: Int
  experience: ExperienceUpdateOneWithoutReviewsInput
}

input ReviewUpdateWithoutPlaceInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutPlaceDataInput!
}

input ReviewUpsertWithoutExperienceInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutExperienceDataInput!
  create: ReviewCreateWithoutExperienceInput!
}

input ReviewUpsertWithoutPlaceInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutPlaceDataInput!
  create: ReviewCreateWithoutPlaceInput!
}

input ReviewWhereInput {
  AND: [ReviewWhereInput!]
  OR: [ReviewWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  text: String
  text_not: String
  text_in: [String!]
  text_not_in: [String!]
  text_lt: String
  text_lte: String
  text_gt: String
  text_gte: String
  text_contains: String
  text_not_contains: String
  text_starts_with: String
  text_not_starts_with: String
  text_ends_with: String
  text_not_ends_with: String
  stars: Int
  stars_not: Int
  stars_in: [Int!]
  stars_not_in: [Int!]
  stars_lt: Int
  stars_lte: Int
  stars_gt: Int
  stars_gte: Int
  accuracy: Int
  accuracy_not: Int
  accuracy_in: [Int!]
  accuracy_not_in: [Int!]
  accuracy_lt: Int
  accuracy_lte: Int
  accuracy_gt: Int
  accuracy_gte: Int
  location: Int
  location_not: Int
  location_in: [Int!]
  location_not_in: [Int!]
  location_lt: Int
  location_lte: Int
  location_gt: Int
  location_gte: Int
  checkIn: Int
  checkIn_not: Int
  checkIn_in: [Int!]
  checkIn_not_in: [Int!]
  checkIn_lt: Int
  checkIn_lte: Int
  checkIn_gt: Int
  checkIn_gte: Int
  value: Int
  value_not: Int
  value_in: [Int!]
  value_not_in: [Int!]
  value_lt: Int
  value_lte: Int
  value_gt: Int
  value_gte: Int
  cleanliness: Int
  cleanliness_not: Int
  cleanliness_in: [Int!]
  cleanliness_not_in: [Int!]
  cleanliness_lt: Int
  cleanliness_lte: Int
  cleanliness_gt: Int
  cleanliness_gte: Int
  communication: Int
  communication_not: Int
  communication_in: [Int!]
  communication_not_in: [Int!]
  communication_lt: Int
  communication_lte: Int
  communication_gt: Int
  communication_gte: Int
  place: PlaceWhereInput
  experience: ExperienceWhereInput
}

input ReviewWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  place(where: PlaceSubscriptionWhereInput): PlaceSubscriptionPayload
  pricing(where: PricingSubscriptionWhereInput): PricingSubscriptionPayload
  guestRequirements(where: GuestRequirementsSubscriptionWhereInput): GuestRequirementsSubscriptionPayload
  policies(where: PoliciesSubscriptionWhereInput): PoliciesSubscriptionPayload
  houseRules(where: HouseRulesSubscriptionWhereInput): HouseRulesSubscriptionPayload
  views(where: ViewsSubscriptionWhereInput): ViewsSubscriptionPayload
  location(where: LocationSubscriptionWhereInput): LocationSubscriptionPayload
  neighbourhood(where: NeighbourhoodSubscriptionWhereInput): NeighbourhoodSubscriptionPayload
  city(where: CitySubscriptionWhereInput): CitySubscriptionPayload
  picture(where: PictureSubscriptionWhereInput): PictureSubscriptionPayload
  experience(where: ExperienceSubscriptionWhereInput): ExperienceSubscriptionPayload
  experienceCategory(where: ExperienceCategorySubscriptionWhereInput): ExperienceCategorySubscriptionPayload
  amenities(where: AmenitiesSubscriptionWhereInput): AmenitiesSubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  booking(where: BookingSubscriptionWhereInput): BookingSubscriptionPayload
  payment(where: PaymentSubscriptionWhereInput): PaymentSubscriptionPayload
  paymentAccount(where: PaymentAccountSubscriptionWhereInput): PaymentAccountSubscriptionPayload
  paypalInformation(where: PaypalInformationSubscriptionWhereInput): PaypalInformationSubscriptionPayload
  creditCardInformation(where: CreditCardInformationSubscriptionWhereInput): CreditCardInformationSubscriptionPayload
  message(where: MessageSubscriptionWhereInput): MessageSubscriptionPayload
  notification(where: NotificationSubscriptionWhereInput): NotificationSubscriptionPayload
  restaurant(where: RestaurantSubscriptionWhereInput): RestaurantSubscriptionPayload
}

type UserConnection {
  pageInfo: PageInfo!
  edges: [UserEdge]!
}

input UserCreateInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceCreateManyWithoutHostInput
  location: LocationCreateOneWithoutUserInput
  bookings: BookingCreateManyWithoutBookeeInput
  paymentAccount: PaymentAccountCreateManyWithoutUserInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
  hostingExperiences: ExperienceCreateManyWithoutHostInput
}

input UserCreateOneWithoutBookingsInput {
  create: UserCreateWithoutBookingsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutHostingExperiencesInput {
  create: UserCreateWithoutHostingExperiencesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutLocationInput {
  create: UserCreateWithoutLocationInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutOwnedPlacesInput {
  create: UserCreateWithoutOwnedPlacesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutPaymentAccountInput {
  create: UserCreateWithoutPaymentAccountInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReceivedMessagesInput {
  create: UserCreateWithoutReceivedMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutBookingsInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceCreateManyWithoutHostInput
  location: LocationCreateOneWithoutUserInput
  paymentAccount: PaymentAccountCreateManyWithoutUserInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
  hostingExperiences: ExperienceCreateManyWithoutHostInput
}

input UserCreateWithoutHostingExperiencesInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceCreateManyWithoutHostInput
  location: LocationCreateOneWithoutUserInput
  bookings: BookingCreateManyWithoutBookeeInput
  paymentAccount: PaymentAccountCreateManyWithoutUserInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
}

input UserCreateWithoutLocationInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceCreateManyWithoutHostInput
  bookings: BookingCreateManyWithoutBookeeInput
  paymentAccount: PaymentAccountCreateManyWithoutUserInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
  hostingExperiences: ExperienceCreateManyWithoutHostInput
}

input UserCreateWithoutNotificationsInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceCreateManyWithoutHostInput
  location: LocationCreateOneWithoutUserInput
  bookings: BookingCreateManyWithoutBookeeInput
  paymentAccount: PaymentAccountCreateManyWithoutUserInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  profilePicture: PictureCreateOneInput
  hostingExperiences: ExperienceCreateManyWithoutHostInput
}

input UserCreateWithoutOwnedPlacesInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  location: LocationCreateOneWithoutUserInput
  bookings: BookingCreateManyWithoutBookeeInput
  paymentAccount: PaymentAccountCreateManyWithoutUserInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
  hostingExperiences: ExperienceCreateManyWithoutHostInput
}

input UserCreateWithoutPaymentAccountInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceCreateManyWithoutHostInput
  location: LocationCreateOneWithoutUserInput
  bookings: BookingCreateManyWithoutBookeeInput
  sentMessages: MessageCreateManyWithoutFromInput
  receivedMessages: MessageCreateManyWithoutToInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
  hostingExperiences: ExperienceCreateManyWithoutHostInput
}

input UserCreateWithoutReceivedMessagesInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceCreateManyWithoutHostInput
  location: LocationCreateOneWithoutUserInput
  bookings: BookingCreateManyWithoutBookeeInput
  paymentAccount: PaymentAccountCreateManyWithoutUserInput
  sentMessages: MessageCreateManyWithoutFromInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
  hostingExperiences: ExperienceCreateManyWithoutHostInput
}

input UserCreateWithoutSentMessagesInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceCreateManyWithoutHostInput
  location: LocationCreateOneWithoutUserInput
  bookings: BookingCreateManyWithoutBookeeInput
  paymentAccount: PaymentAccountCreateManyWithoutUserInput
  receivedMessages: MessageCreateManyWithoutToInput
  notifications: NotificationCreateManyWithoutUserInput
  profilePicture: PictureCreateOneInput
  hostingExperiences: ExperienceCreateManyWithoutHostInput
}

type UserEdge {
  node: User!
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  firstName_ASC
  firstName_DESC
  lastName_ASC
  lastName_DESC
  email_ASC
  email_DESC
  password_ASC
  password_DESC
  phone_ASC
  phone_DESC
  responseRate_ASC
  responseRate_DESC
  responseTime_ASC
  responseTime_DESC
  isSuperHost_ASC
  isSuperHost_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  firstName: String!
  lastName: String!
  email: String!
  password: String!
  phone: String!
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  AND: [UserSubscriptionWhereInput!]
  OR: [UserSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceUpdateManyWithoutHostInput
  location: LocationUpdateOneWithoutUserInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paymentAccount: PaymentAccountUpdateManyWithoutUserInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
  hostingExperiences: ExperienceUpdateManyWithoutHostInput
}

input UserUpdateOneWithoutBookingsInput {
  create: UserCreateWithoutBookingsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutBookingsInput
  upsert: UserUpsertWithoutBookingsInput
}

input UserUpdateOneWithoutHostingExperiencesInput {
  create: UserCreateWithoutHostingExperiencesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutHostingExperiencesInput
  upsert: UserUpsertWithoutHostingExperiencesInput
}

input UserUpdateOneWithoutLocationInput {
  create: UserCreateWithoutLocationInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutLocationInput
  upsert: UserUpsertWithoutLocationInput
}

input UserUpdateOneWithoutNotificationsInput {
  create: UserCreateWithoutNotificationsInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutNotificationsInput
  upsert: UserUpsertWithoutNotificationsInput
}

input UserUpdateOneWithoutOwnedPlacesInput {
  create: UserCreateWithoutOwnedPlacesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutOwnedPlacesInput
  upsert: UserUpsertWithoutOwnedPlacesInput
}

input UserUpdateOneWithoutPaymentAccountInput {
  create: UserCreateWithoutPaymentAccountInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutPaymentAccountInput
  upsert: UserUpsertWithoutPaymentAccountInput
}

input UserUpdateOneWithoutReceivedMessagesInput {
  create: UserCreateWithoutReceivedMessagesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutReceivedMessagesInput
  upsert: UserUpsertWithoutReceivedMessagesInput
}

input UserUpdateOneWithoutSentMessagesInput {
  create: UserCreateWithoutSentMessagesInput
  connect: UserWhereUniqueInput
  disconnect: UserWhereUniqueInput
  delete: UserWhereUniqueInput
  update: UserUpdateWithoutSentMessagesInput
  upsert: UserUpsertWithoutSentMessagesInput
}

input UserUpdateWithoutBookingsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceUpdateManyWithoutHostInput
  location: LocationUpdateOneWithoutUserInput
  paymentAccount: PaymentAccountUpdateManyWithoutUserInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
  hostingExperiences: ExperienceUpdateManyWithoutHostInput
}

input UserUpdateWithoutBookingsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutBookingsDataInput!
}

input UserUpdateWithoutHostingExperiencesDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceUpdateManyWithoutHostInput
  location: LocationUpdateOneWithoutUserInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paymentAccount: PaymentAccountUpdateManyWithoutUserInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
}

input UserUpdateWithoutHostingExperiencesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutHostingExperiencesDataInput!
}

input UserUpdateWithoutLocationDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceUpdateManyWithoutHostInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paymentAccount: PaymentAccountUpdateManyWithoutUserInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
  hostingExperiences: ExperienceUpdateManyWithoutHostInput
}

input UserUpdateWithoutLocationInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutLocationDataInput!
}

input UserUpdateWithoutNotificationsDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceUpdateManyWithoutHostInput
  location: LocationUpdateOneWithoutUserInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paymentAccount: PaymentAccountUpdateManyWithoutUserInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  profilePicture: PictureUpdateOneInput
  hostingExperiences: ExperienceUpdateManyWithoutHostInput
}

input UserUpdateWithoutNotificationsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutNotificationsDataInput!
}

input UserUpdateWithoutOwnedPlacesDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  location: LocationUpdateOneWithoutUserInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paymentAccount: PaymentAccountUpdateManyWithoutUserInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
  hostingExperiences: ExperienceUpdateManyWithoutHostInput
}

input UserUpdateWithoutOwnedPlacesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutOwnedPlacesDataInput!
}

input UserUpdateWithoutPaymentAccountDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceUpdateManyWithoutHostInput
  location: LocationUpdateOneWithoutUserInput
  bookings: BookingUpdateManyWithoutBookeeInput
  sentMessages: MessageUpdateManyWithoutFromInput
  receivedMessages: MessageUpdateManyWithoutToInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
  hostingExperiences: ExperienceUpdateManyWithoutHostInput
}

input UserUpdateWithoutPaymentAccountInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPaymentAccountDataInput!
}

input UserUpdateWithoutReceivedMessagesDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceUpdateManyWithoutHostInput
  location: LocationUpdateOneWithoutUserInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paymentAccount: PaymentAccountUpdateManyWithoutUserInput
  sentMessages: MessageUpdateManyWithoutFromInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
  hostingExperiences: ExperienceUpdateManyWithoutHostInput
}

input UserUpdateWithoutReceivedMessagesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutReceivedMessagesDataInput!
}

input UserUpdateWithoutSentMessagesDataInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate: Float
  responseTime: Int
  isSuperHost: Boolean
  ownedPlaces: PlaceUpdateManyWithoutHostInput
  location: LocationUpdateOneWithoutUserInput
  bookings: BookingUpdateManyWithoutBookeeInput
  paymentAccount: PaymentAccountUpdateManyWithoutUserInput
  receivedMessages: MessageUpdateManyWithoutToInput
  notifications: NotificationUpdateManyWithoutUserInput
  profilePicture: PictureUpdateOneInput
  hostingExperiences: ExperienceUpdateManyWithoutHostInput
}

input UserUpdateWithoutSentMessagesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutSentMessagesDataInput!
}

input UserUpsertWithoutBookingsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutBookingsDataInput!
  create: UserCreateWithoutBookingsInput!
}

input UserUpsertWithoutHostingExperiencesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutHostingExperiencesDataInput!
  create: UserCreateWithoutHostingExperiencesInput!
}

input UserUpsertWithoutLocationInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutLocationDataInput!
  create: UserCreateWithoutLocationInput!
}

input UserUpsertWithoutNotificationsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutNotificationsDataInput!
  create: UserCreateWithoutNotificationsInput!
}

input UserUpsertWithoutOwnedPlacesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutOwnedPlacesDataInput!
  create: UserCreateWithoutOwnedPlacesInput!
}

input UserUpsertWithoutPaymentAccountInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPaymentAccountDataInput!
  create: UserCreateWithoutPaymentAccountInput!
}

input UserUpsertWithoutReceivedMessagesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutReceivedMessagesDataInput!
  create: UserCreateWithoutReceivedMessagesInput!
}

input UserUpsertWithoutSentMessagesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutSentMessagesDataInput!
  create: UserCreateWithoutSentMessagesInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  createdAt: DateTime
  createdAt_not: DateTime
  createdAt_in: [DateTime!]
  createdAt_not_in: [DateTime!]
  createdAt_lt: DateTime
  createdAt_lte: DateTime
  createdAt_gt: DateTime
  createdAt_gte: DateTime
  updatedAt: DateTime
  updatedAt_not: DateTime
  updatedAt_in: [DateTime!]
  updatedAt_not_in: [DateTime!]
  updatedAt_lt: DateTime
  updatedAt_lte: DateTime
  updatedAt_gt: DateTime
  updatedAt_gte: DateTime
  firstName: String
  firstName_not: String
  firstName_in: [String!]
  firstName_not_in: [String!]
  firstName_lt: String
  firstName_lte: String
  firstName_gt: String
  firstName_gte: String
  firstName_contains: String
  firstName_not_contains: String
  firstName_starts_with: String
  firstName_not_starts_with: String
  firstName_ends_with: String
  firstName_not_ends_with: String
  lastName: String
  lastName_not: String
  lastName_in: [String!]
  lastName_not_in: [String!]
  lastName_lt: String
  lastName_lte: String
  lastName_gt: String
  lastName_gte: String
  lastName_contains: String
  lastName_not_contains: String
  lastName_starts_with: String
  lastName_not_starts_with: String
  lastName_ends_with: String
  lastName_not_ends_with: String
  email: String
  email_not: String
  email_in: [String!]
  email_not_in: [String!]
  email_lt: String
  email_lte: String
  email_gt: String
  email_gte: String
  email_contains: String
  email_not_contains: String
  email_starts_with: String
  email_not_starts_with: String
  email_ends_with: String
  email_not_ends_with: String
  password: String
  password_not: String
  password_in: [String!]
  password_not_in: [String!]
  password_lt: String
  password_lte: String
  password_gt: String
  password_gte: String
  password_contains: String
  password_not_contains: String
  password_starts_with: String
  password_not_starts_with: String
  password_ends_with: String
  password_not_ends_with: String
  phone: String
  phone_not: String
  phone_in: [String!]
  phone_not_in: [String!]
  phone_lt: String
  phone_lte: String
  phone_gt: String
  phone_gte: String
  phone_contains: String
  phone_not_contains: String
  phone_starts_with: String
  phone_not_starts_with: String
  phone_ends_with: String
  phone_not_ends_with: String
  responseRate: Float
  responseRate_not: Float
  responseRate_in: [Float!]
  responseRate_not_in: [Float!]
  responseRate_lt: Float
  responseRate_lte: Float
  responseRate_gt: Float
  responseRate_gte: Float
  responseTime: Int
  responseTime_not: Int
  responseTime_in: [Int!]
  responseTime_not_in: [Int!]
  responseTime_lt: Int
  responseTime_lte: Int
  responseTime_gt: Int
  responseTime_gte: Int
  isSuperHost: Boolean
  isSuperHost_not: Boolean
  ownedPlaces_every: PlaceWhereInput
  ownedPlaces_some: PlaceWhereInput
  ownedPlaces_none: PlaceWhereInput
  location: LocationWhereInput
  bookings_every: BookingWhereInput
  bookings_some: BookingWhereInput
  bookings_none: BookingWhereInput
  paymentAccount_every: PaymentAccountWhereInput
  paymentAccount_some: PaymentAccountWhereInput
  paymentAccount_none: PaymentAccountWhereInput
  sentMessages_every: MessageWhereInput
  sentMessages_some: MessageWhereInput
  sentMessages_none: MessageWhereInput
  receivedMessages_every: MessageWhereInput
  receivedMessages_some: MessageWhereInput
  receivedMessages_none: MessageWhereInput
  notifications_every: NotificationWhereInput
  notifications_some: NotificationWhereInput
  notifications_none: NotificationWhereInput
  profilePicture: PictureWhereInput
  hostingExperiences_every: ExperienceWhereInput
  hostingExperiences_some: ExperienceWhereInput
  hostingExperiences_none: ExperienceWhereInput
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

type ViewsConnection {
  pageInfo: PageInfo!
  edges: [ViewsEdge]!
}

input ViewsCreateInput {
  lastWeek: Int!
  place: PlaceCreateOneWithoutViewsInput!
}

input ViewsCreateOneWithoutPlaceInput {
  create: ViewsCreateWithoutPlaceInput
  connect: ViewsWhereUniqueInput
}

input ViewsCreateWithoutPlaceInput {
  lastWeek: Int!
}

type ViewsEdge {
  node: Views!
  cursor: String!
}

enum ViewsOrderByInput {
  id_ASC
  id_DESC
  lastWeek_ASC
  lastWeek_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ViewsPreviousValues {
  id: ID!
  lastWeek: Int!
}

type ViewsSubscriptionPayload {
  mutation: MutationType!
  node: Views
  updatedFields: [String!]
  previousValues: ViewsPreviousValues
}

input ViewsSubscriptionWhereInput {
  AND: [ViewsSubscriptionWhereInput!]
  OR: [ViewsSubscriptionWhereInput!]
  mutation_in: [MutationType!]
  updatedFields_contains: String
  updatedFields_contains_every: [String!]
  updatedFields_contains_some: [String!]
  node: ViewsWhereInput
}

input ViewsUpdateInput {
  lastWeek: Int
  place: PlaceUpdateOneWithoutViewsInput
}

input ViewsUpdateOneWithoutPlaceInput {
  create: ViewsCreateWithoutPlaceInput
  connect: ViewsWhereUniqueInput
  disconnect: ViewsWhereUniqueInput
  delete: ViewsWhereUniqueInput
  update: ViewsUpdateWithoutPlaceInput
  upsert: ViewsUpsertWithoutPlaceInput
}

input ViewsUpdateWithoutPlaceDataInput {
  lastWeek: Int
}

input ViewsUpdateWithoutPlaceInput {
  where: ViewsWhereUniqueInput!
  data: ViewsUpdateWithoutPlaceDataInput!
}

input ViewsUpsertWithoutPlaceInput {
  where: ViewsWhereUniqueInput!
  update: ViewsUpdateWithoutPlaceDataInput!
  create: ViewsCreateWithoutPlaceInput!
}

input ViewsWhereInput {
  AND: [ViewsWhereInput!]
  OR: [ViewsWhereInput!]
  id: ID
  id_not: ID
  id_in: [ID!]
  id_not_in: [ID!]
  id_lt: ID
  id_lte: ID
  id_gt: ID
  id_gte: ID
  id_contains: ID
  id_not_contains: ID
  id_starts_with: ID
  id_not_starts_with: ID
  id_ends_with: ID
  id_not_ends_with: ID
  lastWeek: Int
  lastWeek_not: Int
  lastWeek_in: [Int!]
  lastWeek_not_in: [Int!]
  lastWeek_lt: Int
  lastWeek_lte: Int
  lastWeek_gt: Int
  lastWeek_gte: Int
  place: PlaceWhereInput
}

input ViewsWhereUniqueInput {
  id: ID
}
`

export type ExperienceOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'title_ASC' |
  'title_DESC' |
  'pricePerPerson_ASC' |
  'pricePerPerson_DESC' |
  'popularity_ASC' |
  'popularity_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type NOTIFICATION_TYPE = 
  'OFFER' |
  'INSTANT_BOOK' |
  'RESPONSIVENESS' |
  'NEW_AMENITIES' |
  'HOUSE_RULES'

export type NotificationOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'type_ASC' |
  'type_DESC' |
  'link_ASC' |
  'link_DESC' |
  'readDate_ASC' |
  'readDate_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type RestaurantOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'title_ASC' |
  'title_DESC' |
  'avgPricePerPerson_ASC' |
  'avgPricePerPerson_DESC' |
  'isCurated_ASC' |
  'isCurated_DESC' |
  'slug_ASC' |
  'slug_DESC' |
  'popularity_ASC' |
  'popularity_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type MessageOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'deliveredAt_ASC' |
  'deliveredAt_DESC' |
  'readAt_ASC' |
  'readAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type PaypalInformationOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'email_ASC' |
  'email_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type PaymentAccountOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'type_ASC' |
  'type_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type ExperienceCategoryOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'mainColor_ASC' |
  'mainColor_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type CURRENCY = 
  'CAD' |
  'CHF' |
  'EUR' |
  'JPY' |
  'USD' |
  'ZAR'

export type CityOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type PaymentOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'serviceFee_ASC' |
  'serviceFee_DESC' |
  'placePrice_ASC' |
  'placePrice_DESC' |
  'totalPrice_ASC' |
  'totalPrice_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type HouseRulesOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'suitableForChildren_ASC' |
  'suitableForChildren_DESC' |
  'suitableForInfants_ASC' |
  'suitableForInfants_DESC' |
  'petsAllowed_ASC' |
  'petsAllowed_DESC' |
  'smokingAllowed_ASC' |
  'smokingAllowed_DESC' |
  'partiesAndEventsAllowed_ASC' |
  'partiesAndEventsAllowed_DESC' |
  'additionalRules_ASC' |
  'additionalRules_DESC'

export type BookingOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'startDate_ASC' |
  'startDate_DESC' |
  'endDate_ASC' |
  'endDate_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type GuestRequirementsOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'govIssuedId_ASC' |
  'govIssuedId_DESC' |
  'recommendationsFromOtherHosts_ASC' |
  'recommendationsFromOtherHosts_DESC' |
  'guestTripInformation_ASC' |
  'guestTripInformation_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type PictureOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'size_ASC' |
  'size_DESC' |
  'secret_ASC' |
  'secret_DESC' |
  'contentType_ASC' |
  'contentType_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type MutationType = 
  'CREATED' |
  'UPDATED' |
  'DELETED'

export type NeighbourhoodOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'slug_ASC' |
  'slug_DESC' |
  'featured_ASC' |
  'featured_DESC' |
  'popularity_ASC' |
  'popularity_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type AmenitiesOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'elevator_ASC' |
  'elevator_DESC' |
  'petsAllowed_ASC' |
  'petsAllowed_DESC' |
  'internet_ASC' |
  'internet_DESC' |
  'kitchen_ASC' |
  'kitchen_DESC' |
  'wirelessInternet_ASC' |
  'wirelessInternet_DESC' |
  'familyKidFriendly_ASC' |
  'familyKidFriendly_DESC' |
  'freeParkingOnPremises_ASC' |
  'freeParkingOnPremises_DESC' |
  'hotTub_ASC' |
  'hotTub_DESC' |
  'pool_ASC' |
  'pool_DESC' |
  'smokingAllowed_ASC' |
  'smokingAllowed_DESC' |
  'wheelchairAccessible_ASC' |
  'wheelchairAccessible_DESC' |
  'breakfast_ASC' |
  'breakfast_DESC' |
  'cableTv_ASC' |
  'cableTv_DESC' |
  'suitableForEvents_ASC' |
  'suitableForEvents_DESC' |
  'dryer_ASC' |
  'dryer_DESC' |
  'washer_ASC' |
  'washer_DESC' |
  'indoorFireplace_ASC' |
  'indoorFireplace_DESC' |
  'tv_ASC' |
  'tv_DESC' |
  'heating_ASC' |
  'heating_DESC' |
  'hangers_ASC' |
  'hangers_DESC' |
  'iron_ASC' |
  'iron_DESC' |
  'hairDryer_ASC' |
  'hairDryer_DESC' |
  'doorman_ASC' |
  'doorman_DESC' |
  'paidParkingOffPremises_ASC' |
  'paidParkingOffPremises_DESC' |
  'freeParkingOnStreet_ASC' |
  'freeParkingOnStreet_DESC' |
  'gym_ASC' |
  'gym_DESC' |
  'airConditioning_ASC' |
  'airConditioning_DESC' |
  'shampoo_ASC' |
  'shampoo_DESC' |
  'essentials_ASC' |
  'essentials_DESC' |
  'laptopFriendlyWorkspace_ASC' |
  'laptopFriendlyWorkspace_DESC' |
  'privateEntrance_ASC' |
  'privateEntrance_DESC' |
  'buzzerWirelessIntercom_ASC' |
  'buzzerWirelessIntercom_DESC' |
  'babyBath_ASC' |
  'babyBath_DESC' |
  'babyMonitor_ASC' |
  'babyMonitor_DESC' |
  'babysitterRecommendations_ASC' |
  'babysitterRecommendations_DESC' |
  'bathtub_ASC' |
  'bathtub_DESC' |
  'changingTable_ASC' |
  'changingTable_DESC' |
  'childrensBooksAndToys_ASC' |
  'childrensBooksAndToys_DESC' |
  'childrensDinnerware_ASC' |
  'childrensDinnerware_DESC' |
  'crib_ASC' |
  'crib_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type LocationOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'lat_ASC' |
  'lat_DESC' |
  'lng_ASC' |
  'lng_DESC' |
  'address_ASC' |
  'address_DESC' |
  'directions_ASC' |
  'directions_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type ViewsOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'lastWeek_ASC' |
  'lastWeek_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type UserOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'firstName_ASC' |
  'firstName_DESC' |
  'lastName_ASC' |
  'lastName_DESC' |
  'email_ASC' |
  'email_DESC' |
  'password_ASC' |
  'password_DESC' |
  'phone_ASC' |
  'phone_DESC' |
  'responseRate_ASC' |
  'responseRate_DESC' |
  'responseTime_ASC' |
  'responseTime_DESC' |
  'isSuperHost_ASC' |
  'isSuperHost_DESC'

export type PAYMENT_PROVIDER = 
  'PAYPAL' |
  'CREDIT_CARD'

export type PlaceOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'name_ASC' |
  'name_DESC' |
  'size_ASC' |
  'size_DESC' |
  'shortDescription_ASC' |
  'shortDescription_DESC' |
  'description_ASC' |
  'description_DESC' |
  'slug_ASC' |
  'slug_DESC' |
  'maxGuests_ASC' |
  'maxGuests_DESC' |
  'numBedrooms_ASC' |
  'numBedrooms_DESC' |
  'numBeds_ASC' |
  'numBeds_DESC' |
  'numBaths_ASC' |
  'numBaths_DESC' |
  'popularity_ASC' |
  'popularity_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export type ReviewOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'text_ASC' |
  'text_DESC' |
  'stars_ASC' |
  'stars_DESC' |
  'accuracy_ASC' |
  'accuracy_DESC' |
  'location_ASC' |
  'location_DESC' |
  'checkIn_ASC' |
  'checkIn_DESC' |
  'value_ASC' |
  'value_DESC' |
  'cleanliness_ASC' |
  'cleanliness_DESC' |
  'communication_ASC' |
  'communication_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type PoliciesOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'checkInStartTime_ASC' |
  'checkInStartTime_DESC' |
  'checkInEndTime_ASC' |
  'checkInEndTime_DESC' |
  'checkoutTime_ASC' |
  'checkoutTime_DESC'

export type PLACE_SIZES = 
  'ENTIRE_HOUSE' |
  'ENTIRE_APARTMENT' |
  'ENTIRE_EARTH_HOUSE' |
  'ENTIRE_CABIN' |
  'ENTIRE_VILLA' |
  'ENTIRE_PLACE' |
  'ENTIRE_BOAT' |
  'PRIVATE_ROOM'

export type CreditCardInformationOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC' |
  'cardNumber_ASC' |
  'cardNumber_DESC' |
  'expiresOnMonth_ASC' |
  'expiresOnMonth_DESC' |
  'expiresOnYear_ASC' |
  'expiresOnYear_DESC' |
  'securityCode_ASC' |
  'securityCode_DESC' |
  'firstName_ASC' |
  'firstName_DESC' |
  'lastName_ASC' |
  'lastName_DESC' |
  'postalCode_ASC' |
  'postalCode_DESC' |
  'country_ASC' |
  'country_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC'

export type PricingOrderByInput = 
  'id_ASC' |
  'id_DESC' |
  'monthlyDiscount_ASC' |
  'monthlyDiscount_DESC' |
  'weeklyDiscount_ASC' |
  'weeklyDiscount_DESC' |
  'perNight_ASC' |
  'perNight_DESC' |
  'smartPricing_ASC' |
  'smartPricing_DESC' |
  'basePrice_ASC' |
  'basePrice_DESC' |
  'averageWeekly_ASC' |
  'averageWeekly_DESC' |
  'averageMonthly_ASC' |
  'averageMonthly_DESC' |
  'cleaningFee_ASC' |
  'cleaningFee_DESC' |
  'securityDeposit_ASC' |
  'securityDeposit_DESC' |
  'extraGuests_ASC' |
  'extraGuests_DESC' |
  'weekendPricing_ASC' |
  'weekendPricing_DESC' |
  'currency_ASC' |
  'currency_DESC' |
  'updatedAt_ASC' |
  'updatedAt_DESC' |
  'createdAt_ASC' |
  'createdAt_DESC'

export interface ExperienceCategoryUpsertWithoutExperienceInput {
  where: ExperienceCategoryWhereUniqueInput
  update: ExperienceCategoryUpdateWithoutExperienceDataInput
  create: ExperienceCategoryCreateWithoutExperienceInput
}

export interface UserWhereInput {
  AND?: UserWhereInput[] | UserWhereInput
  OR?: UserWhereInput[] | UserWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  firstName?: String
  firstName_not?: String
  firstName_in?: String[] | String
  firstName_not_in?: String[] | String
  firstName_lt?: String
  firstName_lte?: String
  firstName_gt?: String
  firstName_gte?: String
  firstName_contains?: String
  firstName_not_contains?: String
  firstName_starts_with?: String
  firstName_not_starts_with?: String
  firstName_ends_with?: String
  firstName_not_ends_with?: String
  lastName?: String
  lastName_not?: String
  lastName_in?: String[] | String
  lastName_not_in?: String[] | String
  lastName_lt?: String
  lastName_lte?: String
  lastName_gt?: String
  lastName_gte?: String
  lastName_contains?: String
  lastName_not_contains?: String
  lastName_starts_with?: String
  lastName_not_starts_with?: String
  lastName_ends_with?: String
  lastName_not_ends_with?: String
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  password?: String
  password_not?: String
  password_in?: String[] | String
  password_not_in?: String[] | String
  password_lt?: String
  password_lte?: String
  password_gt?: String
  password_gte?: String
  password_contains?: String
  password_not_contains?: String
  password_starts_with?: String
  password_not_starts_with?: String
  password_ends_with?: String
  password_not_ends_with?: String
  phone?: String
  phone_not?: String
  phone_in?: String[] | String
  phone_not_in?: String[] | String
  phone_lt?: String
  phone_lte?: String
  phone_gt?: String
  phone_gte?: String
  phone_contains?: String
  phone_not_contains?: String
  phone_starts_with?: String
  phone_not_starts_with?: String
  phone_ends_with?: String
  phone_not_ends_with?: String
  responseRate?: Float
  responseRate_not?: Float
  responseRate_in?: Float[] | Float
  responseRate_not_in?: Float[] | Float
  responseRate_lt?: Float
  responseRate_lte?: Float
  responseRate_gt?: Float
  responseRate_gte?: Float
  responseTime?: Int
  responseTime_not?: Int
  responseTime_in?: Int[] | Int
  responseTime_not_in?: Int[] | Int
  responseTime_lt?: Int
  responseTime_lte?: Int
  responseTime_gt?: Int
  responseTime_gte?: Int
  isSuperHost?: Boolean
  isSuperHost_not?: Boolean
  ownedPlaces_every?: PlaceWhereInput
  ownedPlaces_some?: PlaceWhereInput
  ownedPlaces_none?: PlaceWhereInput
  location?: LocationWhereInput
  bookings_every?: BookingWhereInput
  bookings_some?: BookingWhereInput
  bookings_none?: BookingWhereInput
  paymentAccount_every?: PaymentAccountWhereInput
  paymentAccount_some?: PaymentAccountWhereInput
  paymentAccount_none?: PaymentAccountWhereInput
  sentMessages_every?: MessageWhereInput
  sentMessages_some?: MessageWhereInput
  sentMessages_none?: MessageWhereInput
  receivedMessages_every?: MessageWhereInput
  receivedMessages_some?: MessageWhereInput
  receivedMessages_none?: MessageWhereInput
  notifications_every?: NotificationWhereInput
  notifications_some?: NotificationWhereInput
  notifications_none?: NotificationWhereInput
  profilePicture?: PictureWhereInput
  hostingExperiences_every?: ExperienceWhereInput
  hostingExperiences_some?: ExperienceWhereInput
  hostingExperiences_none?: ExperienceWhereInput
}

export interface NeighbourhoodUpsertWithoutLocationsInput {
  where: NeighbourhoodWhereUniqueInput
  update: NeighbourhoodUpdateWithoutLocationsDataInput
  create: NeighbourhoodCreateWithoutLocationsInput
}

export interface MessageWhereInput {
  AND?: MessageWhereInput[] | MessageWhereInput
  OR?: MessageWhereInput[] | MessageWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  deliveredAt?: DateTime
  deliveredAt_not?: DateTime
  deliveredAt_in?: DateTime[] | DateTime
  deliveredAt_not_in?: DateTime[] | DateTime
  deliveredAt_lt?: DateTime
  deliveredAt_lte?: DateTime
  deliveredAt_gt?: DateTime
  deliveredAt_gte?: DateTime
  readAt?: DateTime
  readAt_not?: DateTime
  readAt_in?: DateTime[] | DateTime
  readAt_not_in?: DateTime[] | DateTime
  readAt_lt?: DateTime
  readAt_lte?: DateTime
  readAt_gt?: DateTime
  readAt_gte?: DateTime
  from?: UserWhereInput
  to?: UserWhereInput
}

export interface PlaceUpdateOneWithoutLocationInput {
  create?: PlaceCreateWithoutLocationInput
  connect?: PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutLocationInput
  upsert?: PlaceUpsertWithoutLocationInput
}

export interface CreditCardInformationWhereInput {
  AND?: CreditCardInformationWhereInput[] | CreditCardInformationWhereInput
  OR?: CreditCardInformationWhereInput[] | CreditCardInformationWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  cardNumber?: String
  cardNumber_not?: String
  cardNumber_in?: String[] | String
  cardNumber_not_in?: String[] | String
  cardNumber_lt?: String
  cardNumber_lte?: String
  cardNumber_gt?: String
  cardNumber_gte?: String
  cardNumber_contains?: String
  cardNumber_not_contains?: String
  cardNumber_starts_with?: String
  cardNumber_not_starts_with?: String
  cardNumber_ends_with?: String
  cardNumber_not_ends_with?: String
  expiresOnMonth?: Int
  expiresOnMonth_not?: Int
  expiresOnMonth_in?: Int[] | Int
  expiresOnMonth_not_in?: Int[] | Int
  expiresOnMonth_lt?: Int
  expiresOnMonth_lte?: Int
  expiresOnMonth_gt?: Int
  expiresOnMonth_gte?: Int
  expiresOnYear?: Int
  expiresOnYear_not?: Int
  expiresOnYear_in?: Int[] | Int
  expiresOnYear_not_in?: Int[] | Int
  expiresOnYear_lt?: Int
  expiresOnYear_lte?: Int
  expiresOnYear_gt?: Int
  expiresOnYear_gte?: Int
  securityCode?: String
  securityCode_not?: String
  securityCode_in?: String[] | String
  securityCode_not_in?: String[] | String
  securityCode_lt?: String
  securityCode_lte?: String
  securityCode_gt?: String
  securityCode_gte?: String
  securityCode_contains?: String
  securityCode_not_contains?: String
  securityCode_starts_with?: String
  securityCode_not_starts_with?: String
  securityCode_ends_with?: String
  securityCode_not_ends_with?: String
  firstName?: String
  firstName_not?: String
  firstName_in?: String[] | String
  firstName_not_in?: String[] | String
  firstName_lt?: String
  firstName_lte?: String
  firstName_gt?: String
  firstName_gte?: String
  firstName_contains?: String
  firstName_not_contains?: String
  firstName_starts_with?: String
  firstName_not_starts_with?: String
  firstName_ends_with?: String
  firstName_not_ends_with?: String
  lastName?: String
  lastName_not?: String
  lastName_in?: String[] | String
  lastName_not_in?: String[] | String
  lastName_lt?: String
  lastName_lte?: String
  lastName_gt?: String
  lastName_gte?: String
  lastName_contains?: String
  lastName_not_contains?: String
  lastName_starts_with?: String
  lastName_not_starts_with?: String
  lastName_ends_with?: String
  lastName_not_ends_with?: String
  postalCode?: String
  postalCode_not?: String
  postalCode_in?: String[] | String
  postalCode_not_in?: String[] | String
  postalCode_lt?: String
  postalCode_lte?: String
  postalCode_gt?: String
  postalCode_gte?: String
  postalCode_contains?: String
  postalCode_not_contains?: String
  postalCode_starts_with?: String
  postalCode_not_starts_with?: String
  postalCode_ends_with?: String
  postalCode_not_ends_with?: String
  country?: String
  country_not?: String
  country_in?: String[] | String
  country_not_in?: String[] | String
  country_lt?: String
  country_lte?: String
  country_gt?: String
  country_gte?: String
  country_contains?: String
  country_not_contains?: String
  country_starts_with?: String
  country_not_starts_with?: String
  country_ends_with?: String
  country_not_ends_with?: String
  paymentAccount?: PaymentAccountWhereInput
}

export interface LocationCreateInput {
  lat: Float
  lng: Float
  address?: String
  directions?: String
  neighbourHood?: NeighbourhoodCreateOneWithoutLocationsInput
  user?: UserCreateOneWithoutLocationInput
  place?: PlaceCreateOneWithoutLocationInput
  experience?: ExperienceCreateOneWithoutLocationInput
  restaurant?: RestaurantCreateOneWithoutLocationInput
}

export interface PlaceUpdateOneWithoutViewsInput {
  create?: PlaceCreateWithoutViewsInput
  connect?: PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutViewsInput
  upsert?: PlaceUpsertWithoutViewsInput
}

export interface NeighbourhoodCreateInput {
  name: String
  slug: String
  featured: Boolean
  popularity: Int
  locations?: LocationCreateManyWithoutNeighbourHoodInput
  homePreview?: PictureCreateOneInput
  city: CityCreateOneWithoutNeighbourhoodsInput
}

export interface PlaceUpdateWithoutLocationInput {
  where: PlaceWhereUniqueInput
  data: PlaceUpdateWithoutLocationDataInput
}

export interface LocationCreateManyWithoutNeighbourHoodInput {
  create?: LocationCreateWithoutNeighbourHoodInput[] | LocationCreateWithoutNeighbourHoodInput
  connect?: LocationWhereUniqueInput[] | LocationWhereUniqueInput
}

export interface RestaurantSubscriptionWhereInput {
  AND?: RestaurantSubscriptionWhereInput[] | RestaurantSubscriptionWhereInput
  OR?: RestaurantSubscriptionWhereInput[] | RestaurantSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: RestaurantWhereInput
}

export interface LocationCreateWithoutNeighbourHoodInput {
  lat: Float
  lng: Float
  address?: String
  directions?: String
  user?: UserCreateOneWithoutLocationInput
  place?: PlaceCreateOneWithoutLocationInput
  experience?: ExperienceCreateOneWithoutLocationInput
  restaurant?: RestaurantCreateOneWithoutLocationInput
}

export interface NotificationSubscriptionWhereInput {
  AND?: NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  OR?: NotificationSubscriptionWhereInput[] | NotificationSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: NotificationWhereInput
}

export interface CityCreateInput {
  name: String
  neighbourhoods?: NeighbourhoodCreateManyWithoutCityInput
}

export interface CreditCardInformationSubscriptionWhereInput {
  AND?: CreditCardInformationSubscriptionWhereInput[] | CreditCardInformationSubscriptionWhereInput
  OR?: CreditCardInformationSubscriptionWhereInput[] | CreditCardInformationSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: CreditCardInformationWhereInput
}

export interface NeighbourhoodCreateManyWithoutCityInput {
  create?: NeighbourhoodCreateWithoutCityInput[] | NeighbourhoodCreateWithoutCityInput
  connect?: NeighbourhoodWhereUniqueInput[] | NeighbourhoodWhereUniqueInput
}

export interface PaymentAccountSubscriptionWhereInput {
  AND?: PaymentAccountSubscriptionWhereInput[] | PaymentAccountSubscriptionWhereInput
  OR?: PaymentAccountSubscriptionWhereInput[] | PaymentAccountSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PaymentAccountWhereInput
}

export interface NeighbourhoodCreateWithoutCityInput {
  name: String
  slug: String
  featured: Boolean
  popularity: Int
  locations?: LocationCreateManyWithoutNeighbourHoodInput
  homePreview?: PictureCreateOneInput
}

export interface PaymentSubscriptionWhereInput {
  AND?: PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput
  OR?: PaymentSubscriptionWhereInput[] | PaymentSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PaymentWhereInput
}

export interface ExperienceCreateInput {
  title: String
  pricePerPerson: Int
  popularity: Int
  category?: ExperienceCategoryCreateOneWithoutExperienceInput
  host: UserCreateOneWithoutHostingExperiencesInput
  location: LocationCreateOneWithoutExperienceInput
  reviews?: ReviewCreateManyWithoutExperienceInput
  preview: PictureCreateOneInput
}

export interface HouseRulesWhereInput {
  AND?: HouseRulesWhereInput[] | HouseRulesWhereInput
  OR?: HouseRulesWhereInput[] | HouseRulesWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  suitableForChildren?: Boolean
  suitableForChildren_not?: Boolean
  suitableForInfants?: Boolean
  suitableForInfants_not?: Boolean
  petsAllowed?: Boolean
  petsAllowed_not?: Boolean
  smokingAllowed?: Boolean
  smokingAllowed_not?: Boolean
  partiesAndEventsAllowed?: Boolean
  partiesAndEventsAllowed_not?: Boolean
  additionalRules?: String
  additionalRules_not?: String
  additionalRules_in?: String[] | String
  additionalRules_not_in?: String[] | String
  additionalRules_lt?: String
  additionalRules_lte?: String
  additionalRules_gt?: String
  additionalRules_gte?: String
  additionalRules_contains?: String
  additionalRules_not_contains?: String
  additionalRules_starts_with?: String
  additionalRules_not_starts_with?: String
  additionalRules_ends_with?: String
  additionalRules_not_ends_with?: String
}

export interface ExperienceCategoryCreateInput {
  mainColor?: String
  name: String
  experience?: ExperienceCreateOneWithoutCategoryInput
}

export interface PoliciesWhereInput {
  AND?: PoliciesWhereInput[] | PoliciesWhereInput
  OR?: PoliciesWhereInput[] | PoliciesWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  updatedAt?: DateTime
  updatedAt_not?: DateTime
  updatedAt_in?: DateTime[] | DateTime
  updatedAt_not_in?: DateTime[] | DateTime
  updatedAt_lt?: DateTime
  updatedAt_lte?: DateTime
  updatedAt_gt?: DateTime
  updatedAt_gte?: DateTime
  checkInStartTime?: Float
  checkInStartTime_not?: Float
  checkInStartTime_in?: Float[] | Float
  checkInStartTime_not_in?: Float[] | Float
  checkInStartTime_lt?: Float
  checkInStartTime_lte?: Float
  checkInStartTime_gt?: Float
  checkInStartTime_gte?: Float
  checkInEndTime?: Float
  checkInEndTime_not?: Float
  checkInEndTime_in?: Float[] | Float
  checkInEndTime_not_in?: Float[] | Float
  checkInEndTime_lt?: Float
  checkInEndTime_lte?: Float
  checkInEndTime_gt?: Float
  checkInEndTime_gte?: Float
  checkoutTime?: Float
  checkoutTime_not?: Float
  checkoutTime_in?: Float[] | Float
  checkoutTime_not_in?: Float[] | Float
  checkoutTime_lt?: Float
  checkoutTime_lte?: Float
  checkoutTime_gt?: Float
  checkoutTime_gte?: Float
  place?: PlaceWhereInput
}

export interface ExperienceCreateOneWithoutCategoryInput {
  create?: ExperienceCreateWithoutCategoryInput
  connect?: ExperienceWhereUniqueInput
}

export interface ExperienceCategorySubscriptionWhereInput {
  AND?: ExperienceCategorySubscriptionWhereInput[] | ExperienceCategorySubscriptionWhereInput
  OR?: ExperienceCategorySubscriptionWhereInput[] | ExperienceCategorySubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ExperienceCategoryWhereInput
}

export interface ExperienceCreateWithoutCategoryInput {
  title: String
  pricePerPerson: Int
  popularity: Int
  host: UserCreateOneWithoutHostingExperiencesInput
  location: LocationCreateOneWithoutExperienceInput
  reviews?: ReviewCreateManyWithoutExperienceInput
  preview: PictureCreateOneInput
}

export interface PictureSubscriptionWhereInput {
  AND?: PictureSubscriptionWhereInput[] | PictureSubscriptionWhereInput
  OR?: PictureSubscriptionWhereInput[] | PictureSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PictureWhereInput
}

export interface AmenitiesCreateInput {
  elevator?: Boolean
  petsAllowed?: Boolean
  internet?: Boolean
  kitchen?: Boolean
  wirelessInternet?: Boolean
  familyKidFriendly?: Boolean
  freeParkingOnPremises?: Boolean
  hotTub?: Boolean
  pool?: Boolean
  smokingAllowed?: Boolean
  wheelchairAccessible?: Boolean
  breakfast?: Boolean
  cableTv?: Boolean
  suitableForEvents?: Boolean
  dryer?: Boolean
  washer?: Boolean
  indoorFireplace?: Boolean
  tv?: Boolean
  heating?: Boolean
  hangers?: Boolean
  iron?: Boolean
  hairDryer?: Boolean
  doorman?: Boolean
  paidParkingOffPremises?: Boolean
  freeParkingOnStreet?: Boolean
  gym?: Boolean
  airConditioning?: Boolean
  shampoo?: Boolean
  essentials?: Boolean
  laptopFriendlyWorkspace?: Boolean
  privateEntrance?: Boolean
  buzzerWirelessIntercom?: Boolean
  babyBath?: Boolean
  babyMonitor?: Boolean
  babysitterRecommendations?: Boolean
  bathtub?: Boolean
  changingTable?: Boolean
  childrensBooksAndToys?: Boolean
  childrensDinnerware?: Boolean
  crib?: Boolean
  place: PlaceCreateOneWithoutAmenitiesInput
}

export interface NeighbourhoodSubscriptionWhereInput {
  AND?: NeighbourhoodSubscriptionWhereInput[] | NeighbourhoodSubscriptionWhereInput
  OR?: NeighbourhoodSubscriptionWhereInput[] | NeighbourhoodSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: NeighbourhoodWhereInput
}

export interface PlaceCreateOneWithoutAmenitiesInput {
  create?: PlaceCreateWithoutAmenitiesInput
  connect?: PlaceWhereUniqueInput
}

export interface LocationSubscriptionWhereInput {
  AND?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  OR?: LocationSubscriptionWhereInput[] | LocationSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: LocationWhereInput
}

export interface PlaceCreateWithoutAmenitiesInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews?: ReviewCreateManyWithoutPlaceInput
  host: UserCreateOneWithoutOwnedPlacesInput
  pricing: PricingCreateOneWithoutPlaceInput
  location: LocationCreateOneWithoutPlaceInput
  views: ViewsCreateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsCreateOneWithoutPlaceInput
  policies?: PoliciesCreateOneWithoutPlaceInput
  houseRules?: HouseRulesCreateOneInput
  bookings?: BookingCreateManyWithoutPlaceInput
  pictures?: PictureCreateManyInput
}

export interface HouseRulesSubscriptionWhereInput {
  AND?: HouseRulesSubscriptionWhereInput[] | HouseRulesSubscriptionWhereInput
  OR?: HouseRulesSubscriptionWhereInput[] | HouseRulesSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: HouseRulesWhereInput
}

export interface ReviewCreateInput {
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  cleanliness: Int
  communication: Int
  place: PlaceCreateOneWithoutReviewsInput
  experience?: ExperienceCreateOneWithoutReviewsInput
}

export interface PoliciesSubscriptionWhereInput {
  AND?: PoliciesSubscriptionWhereInput[] | PoliciesSubscriptionWhereInput
  OR?: PoliciesSubscriptionWhereInput[] | PoliciesSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PoliciesWhereInput
}

export interface BookingCreateInput {
  startDate: DateTime
  endDate: DateTime
  bookee: UserCreateOneWithoutBookingsInput
  place: PlaceCreateOneWithoutBookingsInput
  payment: PaymentCreateOneWithoutBookingInput
}

export interface PricingWhereInput {
  AND?: PricingWhereInput[] | PricingWhereInput
  OR?: PricingWhereInput[] | PricingWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  monthlyDiscount?: Int
  monthlyDiscount_not?: Int
  monthlyDiscount_in?: Int[] | Int
  monthlyDiscount_not_in?: Int[] | Int
  monthlyDiscount_lt?: Int
  monthlyDiscount_lte?: Int
  monthlyDiscount_gt?: Int
  monthlyDiscount_gte?: Int
  weeklyDiscount?: Int
  weeklyDiscount_not?: Int
  weeklyDiscount_in?: Int[] | Int
  weeklyDiscount_not_in?: Int[] | Int
  weeklyDiscount_lt?: Int
  weeklyDiscount_lte?: Int
  weeklyDiscount_gt?: Int
  weeklyDiscount_gte?: Int
  perNight?: Int
  perNight_not?: Int
  perNight_in?: Int[] | Int
  perNight_not_in?: Int[] | Int
  perNight_lt?: Int
  perNight_lte?: Int
  perNight_gt?: Int
  perNight_gte?: Int
  smartPricing?: Boolean
  smartPricing_not?: Boolean
  basePrice?: Int
  basePrice_not?: Int
  basePrice_in?: Int[] | Int
  basePrice_not_in?: Int[] | Int
  basePrice_lt?: Int
  basePrice_lte?: Int
  basePrice_gt?: Int
  basePrice_gte?: Int
  averageWeekly?: Int
  averageWeekly_not?: Int
  averageWeekly_in?: Int[] | Int
  averageWeekly_not_in?: Int[] | Int
  averageWeekly_lt?: Int
  averageWeekly_lte?: Int
  averageWeekly_gt?: Int
  averageWeekly_gte?: Int
  averageMonthly?: Int
  averageMonthly_not?: Int
  averageMonthly_in?: Int[] | Int
  averageMonthly_not_in?: Int[] | Int
  averageMonthly_lt?: Int
  averageMonthly_lte?: Int
  averageMonthly_gt?: Int
  averageMonthly_gte?: Int
  cleaningFee?: Int
  cleaningFee_not?: Int
  cleaningFee_in?: Int[] | Int
  cleaningFee_not_in?: Int[] | Int
  cleaningFee_lt?: Int
  cleaningFee_lte?: Int
  cleaningFee_gt?: Int
  cleaningFee_gte?: Int
  securityDeposit?: Int
  securityDeposit_not?: Int
  securityDeposit_in?: Int[] | Int
  securityDeposit_not_in?: Int[] | Int
  securityDeposit_lt?: Int
  securityDeposit_lte?: Int
  securityDeposit_gt?: Int
  securityDeposit_gte?: Int
  extraGuests?: Int
  extraGuests_not?: Int
  extraGuests_in?: Int[] | Int
  extraGuests_not_in?: Int[] | Int
  extraGuests_lt?: Int
  extraGuests_lte?: Int
  extraGuests_gt?: Int
  extraGuests_gte?: Int
  weekendPricing?: Int
  weekendPricing_not?: Int
  weekendPricing_in?: Int[] | Int
  weekendPricing_not_in?: Int[] | Int
  weekendPricing_lt?: Int
  weekendPricing_lte?: Int
  weekendPricing_gt?: Int
  weekendPricing_gte?: Int
  currency?: CURRENCY
  currency_not?: CURRENCY
  currency_in?: CURRENCY[] | CURRENCY
  currency_not_in?: CURRENCY[] | CURRENCY
  place?: PlaceWhereInput
}

export interface PaymentCreateInput {
  serviceFee: Float
  placePrice: Float
  totalPrice: Float
  booking: BookingCreateOneWithoutPaymentInput
  paymentMethod: PaymentAccountCreateOneWithoutPaymentsInput
}

export interface PricingSubscriptionWhereInput {
  AND?: PricingSubscriptionWhereInput[] | PricingSubscriptionWhereInput
  OR?: PricingSubscriptionWhereInput[] | PricingSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PricingWhereInput
}

export interface PaymentAccountCreateInput {
  type?: PAYMENT_PROVIDER
  user: UserCreateOneWithoutPaymentAccountInput
  payments?: PaymentCreateManyWithoutPaymentMethodInput
  paypal?: PaypalInformationCreateOneWithoutPaymentAccountInput
  creditcard?: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

export interface PlaceSubscriptionWhereInput {
  AND?: PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput
  OR?: PlaceSubscriptionWhereInput[] | PlaceSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PlaceWhereInput
}

export interface PaypalInformationCreateInput {
  email: String
  paymentAccount: PaymentAccountCreateOneWithoutPaypalInput
}

export interface PictureWhereInput {
  AND?: PictureWhereInput[] | PictureWhereInput
  OR?: PictureWhereInput[] | PictureWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  size?: Int
  size_not?: Int
  size_in?: Int[] | Int
  size_not_in?: Int[] | Int
  size_lt?: Int
  size_lte?: Int
  size_gt?: Int
  size_gte?: Int
  secret?: String
  secret_not?: String
  secret_in?: String[] | String
  secret_not_in?: String[] | String
  secret_lt?: String
  secret_lte?: String
  secret_gt?: String
  secret_gte?: String
  secret_contains?: String
  secret_not_contains?: String
  secret_starts_with?: String
  secret_not_starts_with?: String
  secret_ends_with?: String
  secret_not_ends_with?: String
  contentType?: String
  contentType_not?: String
  contentType_in?: String[] | String
  contentType_not_in?: String[] | String
  contentType_lt?: String
  contentType_lte?: String
  contentType_gt?: String
  contentType_gte?: String
  contentType_contains?: String
  contentType_not_contains?: String
  contentType_starts_with?: String
  contentType_not_starts_with?: String
  contentType_ends_with?: String
  contentType_not_ends_with?: String
}

export interface PaymentAccountCreateOneWithoutPaypalInput {
  create?: PaymentAccountCreateWithoutPaypalInput
  connect?: PaymentAccountWhereUniqueInput
}

export interface LocationWhereInput {
  AND?: LocationWhereInput[] | LocationWhereInput
  OR?: LocationWhereInput[] | LocationWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  lat?: Float
  lat_not?: Float
  lat_in?: Float[] | Float
  lat_not_in?: Float[] | Float
  lat_lt?: Float
  lat_lte?: Float
  lat_gt?: Float
  lat_gte?: Float
  lng?: Float
  lng_not?: Float
  lng_in?: Float[] | Float
  lng_not_in?: Float[] | Float
  lng_lt?: Float
  lng_lte?: Float
  lng_gt?: Float
  lng_gte?: Float
  address?: String
  address_not?: String
  address_in?: String[] | String
  address_not_in?: String[] | String
  address_lt?: String
  address_lte?: String
  address_gt?: String
  address_gte?: String
  address_contains?: String
  address_not_contains?: String
  address_starts_with?: String
  address_not_starts_with?: String
  address_ends_with?: String
  address_not_ends_with?: String
  directions?: String
  directions_not?: String
  directions_in?: String[] | String
  directions_not_in?: String[] | String
  directions_lt?: String
  directions_lte?: String
  directions_gt?: String
  directions_gte?: String
  directions_contains?: String
  directions_not_contains?: String
  directions_starts_with?: String
  directions_not_starts_with?: String
  directions_ends_with?: String
  directions_not_ends_with?: String
  neighbourHood?: NeighbourhoodWhereInput
  user?: UserWhereInput
  place?: PlaceWhereInput
  experience?: ExperienceWhereInput
  restaurant?: RestaurantWhereInput
}

export interface PaymentAccountCreateWithoutPaypalInput {
  type?: PAYMENT_PROVIDER
  user: UserCreateOneWithoutPaymentAccountInput
  payments?: PaymentCreateManyWithoutPaymentMethodInput
  creditcard?: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

export interface ExperienceWhereInput {
  AND?: ExperienceWhereInput[] | ExperienceWhereInput
  OR?: ExperienceWhereInput[] | ExperienceWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  pricePerPerson?: Int
  pricePerPerson_not?: Int
  pricePerPerson_in?: Int[] | Int
  pricePerPerson_not_in?: Int[] | Int
  pricePerPerson_lt?: Int
  pricePerPerson_lte?: Int
  pricePerPerson_gt?: Int
  pricePerPerson_gte?: Int
  popularity?: Int
  popularity_not?: Int
  popularity_in?: Int[] | Int
  popularity_not_in?: Int[] | Int
  popularity_lt?: Int
  popularity_lte?: Int
  popularity_gt?: Int
  popularity_gte?: Int
  category?: ExperienceCategoryWhereInput
  host?: UserWhereInput
  location?: LocationWhereInput
  reviews_every?: ReviewWhereInput
  reviews_some?: ReviewWhereInput
  reviews_none?: ReviewWhereInput
  preview?: PictureWhereInput
}

export interface CreditCardInformationCreateInput {
  cardNumber: String
  expiresOnMonth: Int
  expiresOnYear: Int
  securityCode: String
  firstName: String
  lastName: String
  postalCode: String
  country: String
  paymentAccount?: PaymentAccountCreateOneWithoutCreditcardInput
}

export interface PlaceWhereInput {
  AND?: PlaceWhereInput[] | PlaceWhereInput
  OR?: PlaceWhereInput[] | PlaceWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  size?: PLACE_SIZES
  size_not?: PLACE_SIZES
  size_in?: PLACE_SIZES[] | PLACE_SIZES
  size_not_in?: PLACE_SIZES[] | PLACE_SIZES
  shortDescription?: String
  shortDescription_not?: String
  shortDescription_in?: String[] | String
  shortDescription_not_in?: String[] | String
  shortDescription_lt?: String
  shortDescription_lte?: String
  shortDescription_gt?: String
  shortDescription_gte?: String
  shortDescription_contains?: String
  shortDescription_not_contains?: String
  shortDescription_starts_with?: String
  shortDescription_not_starts_with?: String
  shortDescription_ends_with?: String
  shortDescription_not_ends_with?: String
  description?: String
  description_not?: String
  description_in?: String[] | String
  description_not_in?: String[] | String
  description_lt?: String
  description_lte?: String
  description_gt?: String
  description_gte?: String
  description_contains?: String
  description_not_contains?: String
  description_starts_with?: String
  description_not_starts_with?: String
  description_ends_with?: String
  description_not_ends_with?: String
  slug?: String
  slug_not?: String
  slug_in?: String[] | String
  slug_not_in?: String[] | String
  slug_lt?: String
  slug_lte?: String
  slug_gt?: String
  slug_gte?: String
  slug_contains?: String
  slug_not_contains?: String
  slug_starts_with?: String
  slug_not_starts_with?: String
  slug_ends_with?: String
  slug_not_ends_with?: String
  maxGuests?: Int
  maxGuests_not?: Int
  maxGuests_in?: Int[] | Int
  maxGuests_not_in?: Int[] | Int
  maxGuests_lt?: Int
  maxGuests_lte?: Int
  maxGuests_gt?: Int
  maxGuests_gte?: Int
  numBedrooms?: Int
  numBedrooms_not?: Int
  numBedrooms_in?: Int[] | Int
  numBedrooms_not_in?: Int[] | Int
  numBedrooms_lt?: Int
  numBedrooms_lte?: Int
  numBedrooms_gt?: Int
  numBedrooms_gte?: Int
  numBeds?: Int
  numBeds_not?: Int
  numBeds_in?: Int[] | Int
  numBeds_not_in?: Int[] | Int
  numBeds_lt?: Int
  numBeds_lte?: Int
  numBeds_gt?: Int
  numBeds_gte?: Int
  numBaths?: Int
  numBaths_not?: Int
  numBaths_in?: Int[] | Int
  numBaths_not_in?: Int[] | Int
  numBaths_lt?: Int
  numBaths_lte?: Int
  numBaths_gt?: Int
  numBaths_gte?: Int
  popularity?: Int
  popularity_not?: Int
  popularity_in?: Int[] | Int
  popularity_not_in?: Int[] | Int
  popularity_lt?: Int
  popularity_lte?: Int
  popularity_gt?: Int
  popularity_gte?: Int
  reviews_every?: ReviewWhereInput
  reviews_some?: ReviewWhereInput
  reviews_none?: ReviewWhereInput
  amenities?: AmenitiesWhereInput
  host?: UserWhereInput
  pricing?: PricingWhereInput
  location?: LocationWhereInput
  views?: ViewsWhereInput
  guestRequirements?: GuestRequirementsWhereInput
  policies?: PoliciesWhereInput
  houseRules?: HouseRulesWhereInput
  bookings_every?: BookingWhereInput
  bookings_some?: BookingWhereInput
  bookings_none?: BookingWhereInput
  pictures_every?: PictureWhereInput
  pictures_some?: PictureWhereInput
  pictures_none?: PictureWhereInput
}

export interface PaymentAccountCreateOneWithoutCreditcardInput {
  create?: PaymentAccountCreateWithoutCreditcardInput
  connect?: PaymentAccountWhereUniqueInput
}

export interface LocationUpsertWithoutRestaurantInput {
  where: LocationWhereUniqueInput
  update: LocationUpdateWithoutRestaurantDataInput
  create: LocationCreateWithoutRestaurantInput
}

export interface PaymentAccountCreateWithoutCreditcardInput {
  type?: PAYMENT_PROVIDER
  user: UserCreateOneWithoutPaymentAccountInput
  payments?: PaymentCreateManyWithoutPaymentMethodInput
  paypal?: PaypalInformationCreateOneWithoutPaymentAccountInput
}

export interface LocationUpdateWithoutRestaurantInput {
  where: LocationWhereUniqueInput
  data: LocationUpdateWithoutRestaurantDataInput
}

export interface MessageCreateInput {
  deliveredAt: DateTime
  readAt: DateTime
  from: UserCreateOneWithoutSentMessagesInput
  to: UserCreateOneWithoutReceivedMessagesInput
}

export interface PlaceWhereUniqueInput {
  id?: ID_Input
}

export interface NotificationCreateInput {
  type?: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
  user: UserCreateOneWithoutNotificationsInput
}

export interface GuestRequirementsWhereUniqueInput {
  id?: ID_Input
}

export interface UserCreateOneWithoutNotificationsInput {
  create?: UserCreateWithoutNotificationsInput
  connect?: UserWhereUniqueInput
}

export interface HouseRulesWhereUniqueInput {
  id?: ID_Input
}

export interface UserCreateWithoutNotificationsInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceCreateManyWithoutHostInput
  location?: LocationCreateOneWithoutUserInput
  bookings?: BookingCreateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountCreateManyWithoutUserInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  profilePicture?: PictureCreateOneInput
  hostingExperiences?: ExperienceCreateManyWithoutHostInput
}

export interface LocationWhereUniqueInput {
  id?: ID_Input
}

export interface RestaurantCreateInput {
  title: String
  avgPricePerPerson: Int
  isCurated?: Boolean
  slug: String
  popularity: Int
  pictures?: PictureCreateManyInput
  location: LocationCreateOneWithoutRestaurantInput
}

export interface CityWhereUniqueInput {
  id?: ID_Input
}

export interface LocationCreateOneWithoutRestaurantInput {
  create?: LocationCreateWithoutRestaurantInput
  connect?: LocationWhereUniqueInput
}

export interface ExperienceWhereUniqueInput {
  id?: ID_Input
}

export interface LocationCreateWithoutRestaurantInput {
  lat: Float
  lng: Float
  address?: String
  directions?: String
  neighbourHood?: NeighbourhoodCreateOneWithoutLocationsInput
  user?: UserCreateOneWithoutLocationInput
  place?: PlaceCreateOneWithoutLocationInput
  experience?: ExperienceCreateOneWithoutLocationInput
}

export interface AmenitiesWhereUniqueInput {
  id?: ID_Input
}

export interface UserUpdateInput {
  firstName?: String
  lastName?: String
  email?: String
  password?: String
  phone?: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceUpdateManyWithoutHostInput
  location?: LocationUpdateOneWithoutUserInput
  bookings?: BookingUpdateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountUpdateManyWithoutUserInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  notifications?: NotificationUpdateManyWithoutUserInput
  profilePicture?: PictureUpdateOneInput
  hostingExperiences?: ExperienceUpdateManyWithoutHostInput
}

export interface BookingWhereUniqueInput {
  id?: ID_Input
}

export interface PlaceUpdateManyWithoutHostInput {
  create?: PlaceCreateWithoutHostInput[] | PlaceCreateWithoutHostInput
  connect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutHostInput[] | PlaceUpdateWithoutHostInput
  upsert?: PlaceUpsertWithoutHostInput[] | PlaceUpsertWithoutHostInput
}

export interface PaymentAccountWhereUniqueInput {
  id?: ID_Input
}

export interface PlaceUpdateWithoutHostInput {
  where: PlaceWhereUniqueInput
  data: PlaceUpdateWithoutHostDataInput
}

export interface CreditCardInformationWhereUniqueInput {
  id?: ID_Input
}

export interface PlaceUpdateWithoutHostDataInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription?: String
  description?: String
  slug?: String
  maxGuests?: Int
  numBedrooms?: Int
  numBeds?: Int
  numBaths?: Int
  popularity?: Int
  reviews?: ReviewUpdateManyWithoutPlaceInput
  amenities?: AmenitiesUpdateOneWithoutPlaceInput
  pricing?: PricingUpdateOneWithoutPlaceInput
  location?: LocationUpdateOneWithoutPlaceInput
  views?: ViewsUpdateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsUpdateOneWithoutPlaceInput
  policies?: PoliciesUpdateOneWithoutPlaceInput
  houseRules?: HouseRulesUpdateOneInput
  bookings?: BookingUpdateManyWithoutPlaceInput
  pictures?: PictureUpdateManyInput
}

export interface NotificationWhereUniqueInput {
  id?: ID_Input
}

export interface ReviewUpdateManyWithoutPlaceInput {
  create?: ReviewCreateWithoutPlaceInput[] | ReviewCreateWithoutPlaceInput
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput
  disconnect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput
  delete?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput
  update?: ReviewUpdateWithoutPlaceInput[] | ReviewUpdateWithoutPlaceInput
  upsert?: ReviewUpsertWithoutPlaceInput[] | ReviewUpsertWithoutPlaceInput
}

export interface LocationUpdateOneWithoutRestaurantInput {
  create?: LocationCreateWithoutRestaurantInput
  connect?: LocationWhereUniqueInput
  disconnect?: LocationWhereUniqueInput
  delete?: LocationWhereUniqueInput
  update?: LocationUpdateWithoutRestaurantInput
  upsert?: LocationUpsertWithoutRestaurantInput
}

export interface ReviewUpdateWithoutPlaceInput {
  where: ReviewWhereUniqueInput
  data: ReviewUpdateWithoutPlaceDataInput
}

export interface UserUpsertWithoutNotificationsInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutNotificationsDataInput
  create: UserCreateWithoutNotificationsInput
}

export interface ReviewUpdateWithoutPlaceDataInput {
  text?: String
  stars?: Int
  accuracy?: Int
  location?: Int
  checkIn?: Int
  value?: Int
  cleanliness?: Int
  communication?: Int
  experience?: ExperienceUpdateOneWithoutReviewsInput
}

export interface UserUpdateWithoutNotificationsInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutNotificationsDataInput
}

export interface ExperienceUpdateOneWithoutReviewsInput {
  create?: ExperienceCreateWithoutReviewsInput
  connect?: ExperienceWhereUniqueInput
  disconnect?: ExperienceWhereUniqueInput
  delete?: ExperienceWhereUniqueInput
  update?: ExperienceUpdateWithoutReviewsInput
  upsert?: ExperienceUpsertWithoutReviewsInput
}

export interface NotificationUpdateInput {
  type?: NOTIFICATION_TYPE
  link?: String
  readDate?: DateTime
  user?: UserUpdateOneWithoutNotificationsInput
}

export interface ExperienceUpdateWithoutReviewsInput {
  where: ExperienceWhereUniqueInput
  data: ExperienceUpdateWithoutReviewsDataInput
}

export interface PaymentAccountUpsertWithoutCreditcardInput {
  where: PaymentAccountWhereUniqueInput
  update: PaymentAccountUpdateWithoutCreditcardDataInput
  create: PaymentAccountCreateWithoutCreditcardInput
}

export interface ExperienceUpdateWithoutReviewsDataInput {
  title?: String
  pricePerPerson?: Int
  popularity?: Int
  category?: ExperienceCategoryUpdateOneWithoutExperienceInput
  host?: UserUpdateOneWithoutHostingExperiencesInput
  location?: LocationUpdateOneWithoutExperienceInput
  preview?: PictureUpdateOneInput
}

export interface PaymentAccountUpdateWithoutCreditcardInput {
  where: PaymentAccountWhereUniqueInput
  data: PaymentAccountUpdateWithoutCreditcardDataInput
}

export interface ExperienceCategoryUpdateOneWithoutExperienceInput {
  create?: ExperienceCategoryCreateWithoutExperienceInput
  connect?: ExperienceCategoryWhereUniqueInput
  disconnect?: ExperienceCategoryWhereUniqueInput
  delete?: ExperienceCategoryWhereUniqueInput
  update?: ExperienceCategoryUpdateWithoutExperienceInput
  upsert?: ExperienceCategoryUpsertWithoutExperienceInput
}

export interface CreditCardInformationUpdateInput {
  cardNumber?: String
  expiresOnMonth?: Int
  expiresOnYear?: Int
  securityCode?: String
  firstName?: String
  lastName?: String
  postalCode?: String
  country?: String
  paymentAccount?: PaymentAccountUpdateOneWithoutCreditcardInput
}

export interface ExperienceCategoryUpdateWithoutExperienceInput {
  where: ExperienceCategoryWhereUniqueInput
  data: ExperienceCategoryUpdateWithoutExperienceDataInput
}

export interface PaymentAccountUpdateWithoutPaypalDataInput {
  type?: PAYMENT_PROVIDER
  user?: UserUpdateOneWithoutPaymentAccountInput
  payments?: PaymentUpdateManyWithoutPaymentMethodInput
  creditcard?: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

export interface ExperienceCategoryUpdateWithoutExperienceDataInput {
  mainColor?: String
  name?: String
}

export interface PaymentAccountUpdateOneWithoutPaypalInput {
  create?: PaymentAccountCreateWithoutPaypalInput
  connect?: PaymentAccountWhereUniqueInput
  disconnect?: PaymentAccountWhereUniqueInput
  delete?: PaymentAccountWhereUniqueInput
  update?: PaymentAccountUpdateWithoutPaypalInput
  upsert?: PaymentAccountUpsertWithoutPaypalInput
}

export interface PlaceUpdateWithoutViewsInput {
  where: PlaceWhereUniqueInput
  data: PlaceUpdateWithoutViewsDataInput
}

export interface PaymentAccountUpdateInput {
  type?: PAYMENT_PROVIDER
  user?: UserUpdateOneWithoutPaymentAccountInput
  payments?: PaymentUpdateManyWithoutPaymentMethodInput
  paypal?: PaypalInformationUpdateOneWithoutPaymentAccountInput
  creditcard?: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

export interface UserUpdateOneWithoutHostingExperiencesInput {
  create?: UserCreateWithoutHostingExperiencesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutHostingExperiencesInput
  upsert?: UserUpsertWithoutHostingExperiencesInput
}

export interface BookingUpdateInput {
  startDate?: DateTime
  endDate?: DateTime
  bookee?: UserUpdateOneWithoutBookingsInput
  place?: PlaceUpdateOneWithoutBookingsInput
  payment?: PaymentUpdateOneWithoutBookingInput
}

export interface UserUpdateWithoutHostingExperiencesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutHostingExperiencesDataInput
}

export interface PlaceUpsertWithoutAmenitiesInput {
  where: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutAmenitiesDataInput
  create: PlaceCreateWithoutAmenitiesInput
}

export interface UserUpdateWithoutHostingExperiencesDataInput {
  firstName?: String
  lastName?: String
  email?: String
  password?: String
  phone?: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceUpdateManyWithoutHostInput
  location?: LocationUpdateOneWithoutUserInput
  bookings?: BookingUpdateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountUpdateManyWithoutUserInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  notifications?: NotificationUpdateManyWithoutUserInput
  profilePicture?: PictureUpdateOneInput
}

export interface PlaceUpdateWithoutAmenitiesInput {
  where: PlaceWhereUniqueInput
  data: PlaceUpdateWithoutAmenitiesDataInput
}

export interface LocationUpdateOneWithoutUserInput {
  create?: LocationCreateWithoutUserInput
  connect?: LocationWhereUniqueInput
  disconnect?: LocationWhereUniqueInput
  delete?: LocationWhereUniqueInput
  update?: LocationUpdateWithoutUserInput
  upsert?: LocationUpsertWithoutUserInput
}

export interface AmenitiesUpdateInput {
  elevator?: Boolean
  petsAllowed?: Boolean
  internet?: Boolean
  kitchen?: Boolean
  wirelessInternet?: Boolean
  familyKidFriendly?: Boolean
  freeParkingOnPremises?: Boolean
  hotTub?: Boolean
  pool?: Boolean
  smokingAllowed?: Boolean
  wheelchairAccessible?: Boolean
  breakfast?: Boolean
  cableTv?: Boolean
  suitableForEvents?: Boolean
  dryer?: Boolean
  washer?: Boolean
  indoorFireplace?: Boolean
  tv?: Boolean
  heating?: Boolean
  hangers?: Boolean
  iron?: Boolean
  hairDryer?: Boolean
  doorman?: Boolean
  paidParkingOffPremises?: Boolean
  freeParkingOnStreet?: Boolean
  gym?: Boolean
  airConditioning?: Boolean
  shampoo?: Boolean
  essentials?: Boolean
  laptopFriendlyWorkspace?: Boolean
  privateEntrance?: Boolean
  buzzerWirelessIntercom?: Boolean
  babyBath?: Boolean
  babyMonitor?: Boolean
  babysitterRecommendations?: Boolean
  bathtub?: Boolean
  changingTable?: Boolean
  childrensBooksAndToys?: Boolean
  childrensDinnerware?: Boolean
  crib?: Boolean
  place?: PlaceUpdateOneWithoutAmenitiesInput
}

export interface LocationUpdateWithoutUserInput {
  where: LocationWhereUniqueInput
  data: LocationUpdateWithoutUserDataInput
}

export interface ExperienceUpdateWithoutCategoryDataInput {
  title?: String
  pricePerPerson?: Int
  popularity?: Int
  host?: UserUpdateOneWithoutHostingExperiencesInput
  location?: LocationUpdateOneWithoutExperienceInput
  reviews?: ReviewUpdateManyWithoutExperienceInput
  preview?: PictureUpdateOneInput
}

export interface LocationUpdateWithoutUserDataInput {
  lat?: Float
  lng?: Float
  address?: String
  directions?: String
  neighbourHood?: NeighbourhoodUpdateOneWithoutLocationsInput
  place?: PlaceUpdateOneWithoutLocationInput
  experience?: ExperienceUpdateOneWithoutLocationInput
  restaurant?: RestaurantUpdateOneWithoutLocationInput
}

export interface ExperienceUpdateOneWithoutCategoryInput {
  create?: ExperienceCreateWithoutCategoryInput
  connect?: ExperienceWhereUniqueInput
  disconnect?: ExperienceWhereUniqueInput
  delete?: ExperienceWhereUniqueInput
  update?: ExperienceUpdateWithoutCategoryInput
  upsert?: ExperienceUpsertWithoutCategoryInput
}

export interface NeighbourhoodUpdateOneWithoutLocationsInput {
  create?: NeighbourhoodCreateWithoutLocationsInput
  connect?: NeighbourhoodWhereUniqueInput
  disconnect?: NeighbourhoodWhereUniqueInput
  delete?: NeighbourhoodWhereUniqueInput
  update?: NeighbourhoodUpdateWithoutLocationsInput
  upsert?: NeighbourhoodUpsertWithoutLocationsInput
}

export interface ExperienceUpdateInput {
  title?: String
  pricePerPerson?: Int
  popularity?: Int
  category?: ExperienceCategoryUpdateOneWithoutExperienceInput
  host?: UserUpdateOneWithoutHostingExperiencesInput
  location?: LocationUpdateOneWithoutExperienceInput
  reviews?: ReviewUpdateManyWithoutExperienceInput
  preview?: PictureUpdateOneInput
}

export interface NeighbourhoodUpdateWithoutLocationsInput {
  where: NeighbourhoodWhereUniqueInput
  data: NeighbourhoodUpdateWithoutLocationsDataInput
}

export interface NeighbourhoodUpsertWithoutCityInput {
  where: NeighbourhoodWhereUniqueInput
  update: NeighbourhoodUpdateWithoutCityDataInput
  create: NeighbourhoodCreateWithoutCityInput
}

export interface NeighbourhoodUpdateWithoutLocationsDataInput {
  name?: String
  slug?: String
  featured?: Boolean
  popularity?: Int
  homePreview?: PictureUpdateOneInput
  city?: CityUpdateOneWithoutNeighbourhoodsInput
}

export interface NeighbourhoodUpdateWithoutCityInput {
  where: NeighbourhoodWhereUniqueInput
  data: NeighbourhoodUpdateWithoutCityDataInput
}

export interface PictureUpdateOneInput {
  create?: PictureCreateInput
  connect?: PictureWhereUniqueInput
  disconnect?: PictureWhereUniqueInput
  delete?: PictureWhereUniqueInput
}

export interface CityUpdateInput {
  name?: String
  neighbourhoods?: NeighbourhoodUpdateManyWithoutCityInput
}

export interface CityUpdateOneWithoutNeighbourhoodsInput {
  create?: CityCreateWithoutNeighbourhoodsInput
  connect?: CityWhereUniqueInput
  disconnect?: CityWhereUniqueInput
  delete?: CityWhereUniqueInput
  update?: CityUpdateWithoutNeighbourhoodsInput
  upsert?: CityUpsertWithoutNeighbourhoodsInput
}

export interface LocationUpdateWithoutNeighbourHoodDataInput {
  lat?: Float
  lng?: Float
  address?: String
  directions?: String
  user?: UserUpdateOneWithoutLocationInput
  place?: PlaceUpdateOneWithoutLocationInput
  experience?: ExperienceUpdateOneWithoutLocationInput
  restaurant?: RestaurantUpdateOneWithoutLocationInput
}

export interface CityUpdateWithoutNeighbourhoodsInput {
  where: CityWhereUniqueInput
  data: CityUpdateWithoutNeighbourhoodsDataInput
}

export interface LocationUpdateManyWithoutNeighbourHoodInput {
  create?: LocationCreateWithoutNeighbourHoodInput[] | LocationCreateWithoutNeighbourHoodInput
  connect?: LocationWhereUniqueInput[] | LocationWhereUniqueInput
  disconnect?: LocationWhereUniqueInput[] | LocationWhereUniqueInput
  delete?: LocationWhereUniqueInput[] | LocationWhereUniqueInput
  update?: LocationUpdateWithoutNeighbourHoodInput[] | LocationUpdateWithoutNeighbourHoodInput
  upsert?: LocationUpsertWithoutNeighbourHoodInput[] | LocationUpsertWithoutNeighbourHoodInput
}

export interface CityUpdateWithoutNeighbourhoodsDataInput {
  name?: String
}

export interface LocationUpdateInput {
  lat?: Float
  lng?: Float
  address?: String
  directions?: String
  neighbourHood?: NeighbourhoodUpdateOneWithoutLocationsInput
  user?: UserUpdateOneWithoutLocationInput
  place?: PlaceUpdateOneWithoutLocationInput
  experience?: ExperienceUpdateOneWithoutLocationInput
  restaurant?: RestaurantUpdateOneWithoutLocationInput
}

export interface CityUpsertWithoutNeighbourhoodsInput {
  where: CityWhereUniqueInput
  update: CityUpdateWithoutNeighbourhoodsDataInput
  create: CityCreateWithoutNeighbourhoodsInput
}

export interface PlaceUpdateWithoutViewsDataInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription?: String
  description?: String
  slug?: String
  maxGuests?: Int
  numBedrooms?: Int
  numBeds?: Int
  numBaths?: Int
  popularity?: Int
  reviews?: ReviewUpdateManyWithoutPlaceInput
  amenities?: AmenitiesUpdateOneWithoutPlaceInput
  host?: UserUpdateOneWithoutOwnedPlacesInput
  pricing?: PricingUpdateOneWithoutPlaceInput
  location?: LocationUpdateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsUpdateOneWithoutPlaceInput
  policies?: PoliciesUpdateOneWithoutPlaceInput
  houseRules?: HouseRulesUpdateOneInput
  bookings?: BookingUpdateManyWithoutPlaceInput
  pictures?: PictureUpdateManyInput
}

export interface NotificationWhereInput {
  AND?: NotificationWhereInput[] | NotificationWhereInput
  OR?: NotificationWhereInput[] | NotificationWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  type?: NOTIFICATION_TYPE
  type_not?: NOTIFICATION_TYPE
  type_in?: NOTIFICATION_TYPE[] | NOTIFICATION_TYPE
  type_not_in?: NOTIFICATION_TYPE[] | NOTIFICATION_TYPE
  link?: String
  link_not?: String
  link_in?: String[] | String
  link_not_in?: String[] | String
  link_lt?: String
  link_lte?: String
  link_gt?: String
  link_gte?: String
  link_contains?: String
  link_not_contains?: String
  link_starts_with?: String
  link_not_starts_with?: String
  link_ends_with?: String
  link_not_ends_with?: String
  readDate?: DateTime
  readDate_not?: DateTime
  readDate_in?: DateTime[] | DateTime
  readDate_not_in?: DateTime[] | DateTime
  readDate_lt?: DateTime
  readDate_lte?: DateTime
  readDate_gt?: DateTime
  readDate_gte?: DateTime
  user?: UserWhereInput
}

export interface PlaceCreateManyWithoutHostInput {
  create?: PlaceCreateWithoutHostInput[] | PlaceCreateWithoutHostInput
  connect?: PlaceWhereUniqueInput[] | PlaceWhereUniqueInput
}

export interface PaypalInformationWhereInput {
  AND?: PaypalInformationWhereInput[] | PaypalInformationWhereInput
  OR?: PaypalInformationWhereInput[] | PaypalInformationWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  email?: String
  email_not?: String
  email_in?: String[] | String
  email_not_in?: String[] | String
  email_lt?: String
  email_lte?: String
  email_gt?: String
  email_gte?: String
  email_contains?: String
  email_not_contains?: String
  email_starts_with?: String
  email_not_starts_with?: String
  email_ends_with?: String
  email_not_ends_with?: String
  paymentAccount?: PaymentAccountWhereInput
}

export interface ReviewCreateManyWithoutPlaceInput {
  create?: ReviewCreateWithoutPlaceInput[] | ReviewCreateWithoutPlaceInput
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput
}

export interface ExperienceCreateOneWithoutReviewsInput {
  create?: ExperienceCreateWithoutReviewsInput
  connect?: ExperienceWhereUniqueInput
}

export interface ExperienceCategoryCreateOneWithoutExperienceInput {
  create?: ExperienceCategoryCreateWithoutExperienceInput
  connect?: ExperienceCategoryWhereUniqueInput
}

export interface PlaceUpdateWithoutLocationDataInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription?: String
  description?: String
  slug?: String
  maxGuests?: Int
  numBedrooms?: Int
  numBeds?: Int
  numBaths?: Int
  popularity?: Int
  reviews?: ReviewUpdateManyWithoutPlaceInput
  amenities?: AmenitiesUpdateOneWithoutPlaceInput
  host?: UserUpdateOneWithoutOwnedPlacesInput
  pricing?: PricingUpdateOneWithoutPlaceInput
  views?: ViewsUpdateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsUpdateOneWithoutPlaceInput
  policies?: PoliciesUpdateOneWithoutPlaceInput
  houseRules?: HouseRulesUpdateOneInput
  bookings?: BookingUpdateManyWithoutPlaceInput
  pictures?: PictureUpdateManyInput
}

export interface UserCreateOneWithoutHostingExperiencesInput {
  create?: UserCreateWithoutHostingExperiencesInput
  connect?: UserWhereUniqueInput
}

export interface AmenitiesUpdateOneWithoutPlaceInput {
  create?: AmenitiesCreateWithoutPlaceInput
  connect?: AmenitiesWhereUniqueInput
  disconnect?: AmenitiesWhereUniqueInput
  delete?: AmenitiesWhereUniqueInput
  update?: AmenitiesUpdateWithoutPlaceInput
  upsert?: AmenitiesUpsertWithoutPlaceInput
}

export interface LocationCreateOneWithoutUserInput {
  create?: LocationCreateWithoutUserInput
  connect?: LocationWhereUniqueInput
}

export interface AmenitiesUpdateWithoutPlaceInput {
  where: AmenitiesWhereUniqueInput
  data: AmenitiesUpdateWithoutPlaceDataInput
}

export interface NeighbourhoodCreateOneWithoutLocationsInput {
  create?: NeighbourhoodCreateWithoutLocationsInput
  connect?: NeighbourhoodWhereUniqueInput
}

export interface AmenitiesUpdateWithoutPlaceDataInput {
  elevator?: Boolean
  petsAllowed?: Boolean
  internet?: Boolean
  kitchen?: Boolean
  wirelessInternet?: Boolean
  familyKidFriendly?: Boolean
  freeParkingOnPremises?: Boolean
  hotTub?: Boolean
  pool?: Boolean
  smokingAllowed?: Boolean
  wheelchairAccessible?: Boolean
  breakfast?: Boolean
  cableTv?: Boolean
  suitableForEvents?: Boolean
  dryer?: Boolean
  washer?: Boolean
  indoorFireplace?: Boolean
  tv?: Boolean
  heating?: Boolean
  hangers?: Boolean
  iron?: Boolean
  hairDryer?: Boolean
  doorman?: Boolean
  paidParkingOffPremises?: Boolean
  freeParkingOnStreet?: Boolean
  gym?: Boolean
  airConditioning?: Boolean
  shampoo?: Boolean
  essentials?: Boolean
  laptopFriendlyWorkspace?: Boolean
  privateEntrance?: Boolean
  buzzerWirelessIntercom?: Boolean
  babyBath?: Boolean
  babyMonitor?: Boolean
  babysitterRecommendations?: Boolean
  bathtub?: Boolean
  changingTable?: Boolean
  childrensBooksAndToys?: Boolean
  childrensDinnerware?: Boolean
  crib?: Boolean
}

export interface PictureCreateOneInput {
  create?: PictureCreateInput
  connect?: PictureWhereUniqueInput
}

export interface AmenitiesUpsertWithoutPlaceInput {
  where: AmenitiesWhereUniqueInput
  update: AmenitiesUpdateWithoutPlaceDataInput
  create: AmenitiesCreateWithoutPlaceInput
}

export interface CityCreateOneWithoutNeighbourhoodsInput {
  create?: CityCreateWithoutNeighbourhoodsInput
  connect?: CityWhereUniqueInput
}

export interface UserUpdateOneWithoutOwnedPlacesInput {
  create?: UserCreateWithoutOwnedPlacesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutOwnedPlacesInput
  upsert?: UserUpsertWithoutOwnedPlacesInput
}

export interface PlaceCreateOneWithoutLocationInput {
  create?: PlaceCreateWithoutLocationInput
  connect?: PlaceWhereUniqueInput
}

export interface UserUpdateWithoutOwnedPlacesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutOwnedPlacesDataInput
}

export interface AmenitiesCreateOneWithoutPlaceInput {
  create?: AmenitiesCreateWithoutPlaceInput
  connect?: AmenitiesWhereUniqueInput
}

export interface UserUpdateWithoutOwnedPlacesDataInput {
  firstName?: String
  lastName?: String
  email?: String
  password?: String
  phone?: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  location?: LocationUpdateOneWithoutUserInput
  bookings?: BookingUpdateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountUpdateManyWithoutUserInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  notifications?: NotificationUpdateManyWithoutUserInput
  profilePicture?: PictureUpdateOneInput
  hostingExperiences?: ExperienceUpdateManyWithoutHostInput
}

export interface UserCreateOneWithoutOwnedPlacesInput {
  create?: UserCreateWithoutOwnedPlacesInput
  connect?: UserWhereUniqueInput
}

export interface BookingUpdateManyWithoutBookeeInput {
  create?: BookingCreateWithoutBookeeInput[] | BookingCreateWithoutBookeeInput
  connect?: BookingWhereUniqueInput[] | BookingWhereUniqueInput
  disconnect?: BookingWhereUniqueInput[] | BookingWhereUniqueInput
  delete?: BookingWhereUniqueInput[] | BookingWhereUniqueInput
  update?: BookingUpdateWithoutBookeeInput[] | BookingUpdateWithoutBookeeInput
  upsert?: BookingUpsertWithoutBookeeInput[] | BookingUpsertWithoutBookeeInput
}

export interface BookingCreateManyWithoutBookeeInput {
  create?: BookingCreateWithoutBookeeInput[] | BookingCreateWithoutBookeeInput
  connect?: BookingWhereUniqueInput[] | BookingWhereUniqueInput
}

export interface BookingUpdateWithoutBookeeInput {
  where: BookingWhereUniqueInput
  data: BookingUpdateWithoutBookeeDataInput
}

export interface PlaceCreateOneWithoutBookingsInput {
  create?: PlaceCreateWithoutBookingsInput
  connect?: PlaceWhereUniqueInput
}

export interface BookingUpdateWithoutBookeeDataInput {
  startDate?: DateTime
  endDate?: DateTime
  place?: PlaceUpdateOneWithoutBookingsInput
  payment?: PaymentUpdateOneWithoutBookingInput
}

export interface PricingCreateOneWithoutPlaceInput {
  create?: PricingCreateWithoutPlaceInput
  connect?: PricingWhereUniqueInput
}

export interface PlaceUpdateOneWithoutBookingsInput {
  create?: PlaceCreateWithoutBookingsInput
  connect?: PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutBookingsInput
  upsert?: PlaceUpsertWithoutBookingsInput
}

export interface LocationCreateOneWithoutPlaceInput {
  create?: LocationCreateWithoutPlaceInput
  connect?: LocationWhereUniqueInput
}

export interface PlaceUpdateWithoutBookingsInput {
  where: PlaceWhereUniqueInput
  data: PlaceUpdateWithoutBookingsDataInput
}

export interface UserCreateOneWithoutLocationInput {
  create?: UserCreateWithoutLocationInput
  connect?: UserWhereUniqueInput
}

export interface PlaceUpdateWithoutBookingsDataInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription?: String
  description?: String
  slug?: String
  maxGuests?: Int
  numBedrooms?: Int
  numBeds?: Int
  numBaths?: Int
  popularity?: Int
  reviews?: ReviewUpdateManyWithoutPlaceInput
  amenities?: AmenitiesUpdateOneWithoutPlaceInput
  host?: UserUpdateOneWithoutOwnedPlacesInput
  pricing?: PricingUpdateOneWithoutPlaceInput
  location?: LocationUpdateOneWithoutPlaceInput
  views?: ViewsUpdateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsUpdateOneWithoutPlaceInput
  policies?: PoliciesUpdateOneWithoutPlaceInput
  houseRules?: HouseRulesUpdateOneInput
  pictures?: PictureUpdateManyInput
}

export interface PaymentAccountCreateManyWithoutUserInput {
  create?: PaymentAccountCreateWithoutUserInput[] | PaymentAccountCreateWithoutUserInput
  connect?: PaymentAccountWhereUniqueInput[] | PaymentAccountWhereUniqueInput
}

export interface PricingUpdateOneWithoutPlaceInput {
  create?: PricingCreateWithoutPlaceInput
  connect?: PricingWhereUniqueInput
  disconnect?: PricingWhereUniqueInput
  delete?: PricingWhereUniqueInput
  update?: PricingUpdateWithoutPlaceInput
  upsert?: PricingUpsertWithoutPlaceInput
}

export interface PaymentCreateManyWithoutPaymentMethodInput {
  create?: PaymentCreateWithoutPaymentMethodInput[] | PaymentCreateWithoutPaymentMethodInput
  connect?: PaymentWhereUniqueInput[] | PaymentWhereUniqueInput
}

export interface PricingUpdateWithoutPlaceInput {
  where: PricingWhereUniqueInput
  data: PricingUpdateWithoutPlaceDataInput
}

export interface BookingCreateOneWithoutPaymentInput {
  create?: BookingCreateWithoutPaymentInput
  connect?: BookingWhereUniqueInput
}

export interface PricingUpdateWithoutPlaceDataInput {
  monthlyDiscount?: Int
  weeklyDiscount?: Int
  perNight?: Int
  smartPricing?: Boolean
  basePrice?: Int
  averageWeekly?: Int
  averageMonthly?: Int
  cleaningFee?: Int
  securityDeposit?: Int
  extraGuests?: Int
  weekendPricing?: Int
  currency?: CURRENCY
}

export interface UserCreateOneWithoutBookingsInput {
  create?: UserCreateWithoutBookingsInput
  connect?: UserWhereUniqueInput
}

export interface PricingUpsertWithoutPlaceInput {
  where: PricingWhereUniqueInput
  update: PricingUpdateWithoutPlaceDataInput
  create: PricingCreateWithoutPlaceInput
}

export interface MessageCreateManyWithoutFromInput {
  create?: MessageCreateWithoutFromInput[] | MessageCreateWithoutFromInput
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
}

export interface LocationUpdateOneWithoutPlaceInput {
  create?: LocationCreateWithoutPlaceInput
  connect?: LocationWhereUniqueInput
  disconnect?: LocationWhereUniqueInput
  delete?: LocationWhereUniqueInput
  update?: LocationUpdateWithoutPlaceInput
  upsert?: LocationUpsertWithoutPlaceInput
}

export interface UserCreateOneWithoutReceivedMessagesInput {
  create?: UserCreateWithoutReceivedMessagesInput
  connect?: UserWhereUniqueInput
}

export interface LocationUpdateWithoutPlaceInput {
  where: LocationWhereUniqueInput
  data: LocationUpdateWithoutPlaceDataInput
}

export interface NotificationCreateManyWithoutUserInput {
  create?: NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  connect?: NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
}

export interface LocationUpdateWithoutPlaceDataInput {
  lat?: Float
  lng?: Float
  address?: String
  directions?: String
  neighbourHood?: NeighbourhoodUpdateOneWithoutLocationsInput
  user?: UserUpdateOneWithoutLocationInput
  experience?: ExperienceUpdateOneWithoutLocationInput
  restaurant?: RestaurantUpdateOneWithoutLocationInput
}

export interface ExperienceCreateManyWithoutHostInput {
  create?: ExperienceCreateWithoutHostInput[] | ExperienceCreateWithoutHostInput
  connect?: ExperienceWhereUniqueInput[] | ExperienceWhereUniqueInput
}

export interface UserUpdateOneWithoutLocationInput {
  create?: UserCreateWithoutLocationInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutLocationInput
  upsert?: UserUpsertWithoutLocationInput
}

export interface LocationCreateOneWithoutExperienceInput {
  create?: LocationCreateWithoutExperienceInput
  connect?: LocationWhereUniqueInput
}

export interface UserUpdateWithoutLocationInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutLocationDataInput
}

export interface RestaurantCreateOneWithoutLocationInput {
  create?: RestaurantCreateWithoutLocationInput
  connect?: RestaurantWhereUniqueInput
}

export interface UserUpdateWithoutLocationDataInput {
  firstName?: String
  lastName?: String
  email?: String
  password?: String
  phone?: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceUpdateManyWithoutHostInput
  bookings?: BookingUpdateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountUpdateManyWithoutUserInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  notifications?: NotificationUpdateManyWithoutUserInput
  profilePicture?: PictureUpdateOneInput
  hostingExperiences?: ExperienceUpdateManyWithoutHostInput
}

export interface PictureCreateManyInput {
  create?: PictureCreateInput[] | PictureCreateInput
  connect?: PictureWhereUniqueInput[] | PictureWhereUniqueInput
}

export interface PaymentAccountUpdateManyWithoutUserInput {
  create?: PaymentAccountCreateWithoutUserInput[] | PaymentAccountCreateWithoutUserInput
  connect?: PaymentAccountWhereUniqueInput[] | PaymentAccountWhereUniqueInput
  disconnect?: PaymentAccountWhereUniqueInput[] | PaymentAccountWhereUniqueInput
  delete?: PaymentAccountWhereUniqueInput[] | PaymentAccountWhereUniqueInput
  update?: PaymentAccountUpdateWithoutUserInput[] | PaymentAccountUpdateWithoutUserInput
  upsert?: PaymentAccountUpsertWithoutUserInput[] | PaymentAccountUpsertWithoutUserInput
}

export interface ReviewCreateWithoutExperienceInput {
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  cleanliness: Int
  communication: Int
  place: PlaceCreateOneWithoutReviewsInput
}

export interface PaymentAccountUpdateWithoutUserInput {
  where: PaymentAccountWhereUniqueInput
  data: PaymentAccountUpdateWithoutUserDataInput
}

export interface PlaceCreateWithoutReviewsInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  amenities: AmenitiesCreateOneWithoutPlaceInput
  host: UserCreateOneWithoutOwnedPlacesInput
  pricing: PricingCreateOneWithoutPlaceInput
  location: LocationCreateOneWithoutPlaceInput
  views: ViewsCreateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsCreateOneWithoutPlaceInput
  policies?: PoliciesCreateOneWithoutPlaceInput
  houseRules?: HouseRulesCreateOneInput
  bookings?: BookingCreateManyWithoutPlaceInput
  pictures?: PictureCreateManyInput
}

export interface PaymentAccountUpdateWithoutUserDataInput {
  type?: PAYMENT_PROVIDER
  payments?: PaymentUpdateManyWithoutPaymentMethodInput
  paypal?: PaypalInformationUpdateOneWithoutPaymentAccountInput
  creditcard?: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

export interface ViewsCreateWithoutPlaceInput {
  lastWeek: Int
}

export interface PaymentUpdateManyWithoutPaymentMethodInput {
  create?: PaymentCreateWithoutPaymentMethodInput[] | PaymentCreateWithoutPaymentMethodInput
  connect?: PaymentWhereUniqueInput[] | PaymentWhereUniqueInput
  disconnect?: PaymentWhereUniqueInput[] | PaymentWhereUniqueInput
  delete?: PaymentWhereUniqueInput[] | PaymentWhereUniqueInput
  update?: PaymentUpdateWithoutPaymentMethodInput[] | PaymentUpdateWithoutPaymentMethodInput
  upsert?: PaymentUpsertWithoutPaymentMethodInput[] | PaymentUpsertWithoutPaymentMethodInput
}

export interface GuestRequirementsCreateWithoutPlaceInput {
  govIssuedId?: Boolean
  recommendationsFromOtherHosts?: Boolean
  guestTripInformation?: Boolean
}

export interface PaymentUpdateWithoutPaymentMethodInput {
  where: PaymentWhereUniqueInput
  data: PaymentUpdateWithoutPaymentMethodDataInput
}

export interface PoliciesCreateWithoutPlaceInput {
  checkInStartTime: Float
  checkInEndTime: Float
  checkoutTime: Float
}

export interface PaymentUpdateWithoutPaymentMethodDataInput {
  serviceFee?: Float
  placePrice?: Float
  totalPrice?: Float
  booking?: BookingUpdateOneWithoutPaymentInput
}

export interface HouseRulesCreateInput {
  suitableForChildren?: Boolean
  suitableForInfants?: Boolean
  petsAllowed?: Boolean
  smokingAllowed?: Boolean
  partiesAndEventsAllowed?: Boolean
  additionalRules?: String
}

export interface BookingUpdateOneWithoutPaymentInput {
  create?: BookingCreateWithoutPaymentInput
  connect?: BookingWhereUniqueInput
  disconnect?: BookingWhereUniqueInput
  delete?: BookingWhereUniqueInput
  update?: BookingUpdateWithoutPaymentInput
  upsert?: BookingUpsertWithoutPaymentInput
}

export interface BookingCreateWithoutPlaceInput {
  startDate: DateTime
  endDate: DateTime
  bookee: UserCreateOneWithoutBookingsInput
  payment: PaymentCreateOneWithoutBookingInput
}

export interface BookingUpdateWithoutPaymentInput {
  where: BookingWhereUniqueInput
  data: BookingUpdateWithoutPaymentDataInput
}

export interface PaymentCreateWithoutBookingInput {
  serviceFee: Float
  placePrice: Float
  totalPrice: Float
  paymentMethod: PaymentAccountCreateOneWithoutPaymentsInput
}

export interface BookingUpdateWithoutPaymentDataInput {
  startDate?: DateTime
  endDate?: DateTime
  bookee?: UserUpdateOneWithoutBookingsInput
  place?: PlaceUpdateOneWithoutBookingsInput
}

export interface PaymentAccountCreateWithoutPaymentsInput {
  type?: PAYMENT_PROVIDER
  user: UserCreateOneWithoutPaymentAccountInput
  paypal?: PaypalInformationCreateOneWithoutPaymentAccountInput
  creditcard?: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

export interface UserUpdateOneWithoutBookingsInput {
  create?: UserCreateWithoutBookingsInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutBookingsInput
  upsert?: UserUpsertWithoutBookingsInput
}

export interface UserCreateWithoutPaymentAccountInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceCreateManyWithoutHostInput
  location?: LocationCreateOneWithoutUserInput
  bookings?: BookingCreateManyWithoutBookeeInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  notifications?: NotificationCreateManyWithoutUserInput
  profilePicture?: PictureCreateOneInput
  hostingExperiences?: ExperienceCreateManyWithoutHostInput
}

export interface UserUpdateWithoutBookingsInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutBookingsDataInput
}

export interface MessageCreateWithoutToInput {
  deliveredAt: DateTime
  readAt: DateTime
  from: UserCreateOneWithoutSentMessagesInput
}

export interface UserUpdateWithoutBookingsDataInput {
  firstName?: String
  lastName?: String
  email?: String
  password?: String
  phone?: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceUpdateManyWithoutHostInput
  location?: LocationUpdateOneWithoutUserInput
  paymentAccount?: PaymentAccountUpdateManyWithoutUserInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  notifications?: NotificationUpdateManyWithoutUserInput
  profilePicture?: PictureUpdateOneInput
  hostingExperiences?: ExperienceUpdateManyWithoutHostInput
}

export interface UserCreateWithoutSentMessagesInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceCreateManyWithoutHostInput
  location?: LocationCreateOneWithoutUserInput
  bookings?: BookingCreateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountCreateManyWithoutUserInput
  receivedMessages?: MessageCreateManyWithoutToInput
  notifications?: NotificationCreateManyWithoutUserInput
  profilePicture?: PictureCreateOneInput
  hostingExperiences?: ExperienceCreateManyWithoutHostInput
}

export interface MessageUpdateManyWithoutFromInput {
  create?: MessageCreateWithoutFromInput[] | MessageCreateWithoutFromInput
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  update?: MessageUpdateWithoutFromInput[] | MessageUpdateWithoutFromInput
  upsert?: MessageUpsertWithoutFromInput[] | MessageUpsertWithoutFromInput
}

export interface PaypalInformationCreateWithoutPaymentAccountInput {
  email: String
}

export interface MessageUpdateWithoutFromInput {
  where: MessageWhereUniqueInput
  data: MessageUpdateWithoutFromDataInput
}

export interface CreditCardInformationCreateWithoutPaymentAccountInput {
  cardNumber: String
  expiresOnMonth: Int
  expiresOnYear: Int
  securityCode: String
  firstName: String
  lastName: String
  postalCode: String
  country: String
}

export interface MessageUpdateWithoutFromDataInput {
  deliveredAt?: DateTime
  readAt?: DateTime
  to?: UserUpdateOneWithoutReceivedMessagesInput
}

export interface ExperienceCreateWithoutLocationInput {
  title: String
  pricePerPerson: Int
  popularity: Int
  category?: ExperienceCategoryCreateOneWithoutExperienceInput
  host: UserCreateOneWithoutHostingExperiencesInput
  reviews?: ReviewCreateManyWithoutExperienceInput
  preview: PictureCreateOneInput
}

export interface UserUpdateOneWithoutReceivedMessagesInput {
  create?: UserCreateWithoutReceivedMessagesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutReceivedMessagesInput
  upsert?: UserUpsertWithoutReceivedMessagesInput
}

export interface PricingCreateInput {
  monthlyDiscount?: Int
  weeklyDiscount?: Int
  perNight: Int
  smartPricing?: Boolean
  basePrice: Int
  averageWeekly: Int
  averageMonthly: Int
  cleaningFee?: Int
  securityDeposit?: Int
  extraGuests?: Int
  weekendPricing?: Int
  currency?: CURRENCY
  place: PlaceCreateOneWithoutPricingInput
}

export interface UserUpdateWithoutReceivedMessagesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutReceivedMessagesDataInput
}

export interface PlaceCreateWithoutPricingInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews?: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput
  host: UserCreateOneWithoutOwnedPlacesInput
  location: LocationCreateOneWithoutPlaceInput
  views: ViewsCreateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsCreateOneWithoutPlaceInput
  policies?: PoliciesCreateOneWithoutPlaceInput
  houseRules?: HouseRulesCreateOneInput
  bookings?: BookingCreateManyWithoutPlaceInput
  pictures?: PictureCreateManyInput
}

export interface UserUpdateWithoutReceivedMessagesDataInput {
  firstName?: String
  lastName?: String
  email?: String
  password?: String
  phone?: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceUpdateManyWithoutHostInput
  location?: LocationUpdateOneWithoutUserInput
  bookings?: BookingUpdateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountUpdateManyWithoutUserInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  notifications?: NotificationUpdateManyWithoutUserInput
  profilePicture?: PictureUpdateOneInput
  hostingExperiences?: ExperienceUpdateManyWithoutHostInput
}

export interface PlaceCreateOneWithoutGuestRequirementsInput {
  create?: PlaceCreateWithoutGuestRequirementsInput
  connect?: PlaceWhereUniqueInput
}

export interface NotificationUpdateManyWithoutUserInput {
  create?: NotificationCreateWithoutUserInput[] | NotificationCreateWithoutUserInput
  connect?: NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  disconnect?: NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  delete?: NotificationWhereUniqueInput[] | NotificationWhereUniqueInput
  update?: NotificationUpdateWithoutUserInput[] | NotificationUpdateWithoutUserInput
  upsert?: NotificationUpsertWithoutUserInput[] | NotificationUpsertWithoutUserInput
}

export interface PoliciesCreateInput {
  checkInStartTime: Float
  checkInEndTime: Float
  checkoutTime: Float
  place: PlaceCreateOneWithoutPoliciesInput
}

export interface NotificationUpdateWithoutUserInput {
  where: NotificationWhereUniqueInput
  data: NotificationUpdateWithoutUserDataInput
}

export interface PlaceCreateWithoutPoliciesInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews?: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput
  host: UserCreateOneWithoutOwnedPlacesInput
  pricing: PricingCreateOneWithoutPlaceInput
  location: LocationCreateOneWithoutPlaceInput
  views: ViewsCreateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsCreateOneWithoutPlaceInput
  houseRules?: HouseRulesCreateOneInput
  bookings?: BookingCreateManyWithoutPlaceInput
  pictures?: PictureCreateManyInput
}

export interface NotificationUpdateWithoutUserDataInput {
  type?: NOTIFICATION_TYPE
  link?: String
  readDate?: DateTime
}

export interface PlaceCreateOneWithoutViewsInput {
  create?: PlaceCreateWithoutViewsInput
  connect?: PlaceWhereUniqueInput
}

export interface NotificationUpsertWithoutUserInput {
  where: NotificationWhereUniqueInput
  update: NotificationUpdateWithoutUserDataInput
  create: NotificationCreateWithoutUserInput
}

export interface PaymentAccountWhereInput {
  AND?: PaymentAccountWhereInput[] | PaymentAccountWhereInput
  OR?: PaymentAccountWhereInput[] | PaymentAccountWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  type?: PAYMENT_PROVIDER
  type_not?: PAYMENT_PROVIDER
  type_in?: PAYMENT_PROVIDER[] | PAYMENT_PROVIDER
  type_not_in?: PAYMENT_PROVIDER[] | PAYMENT_PROVIDER
  user?: UserWhereInput
  payments_every?: PaymentWhereInput
  payments_some?: PaymentWhereInput
  payments_none?: PaymentWhereInput
  paypal?: PaypalInformationWhereInput
  creditcard?: CreditCardInformationWhereInput
}

export interface ExperienceUpdateManyWithoutHostInput {
  create?: ExperienceCreateWithoutHostInput[] | ExperienceCreateWithoutHostInput
  connect?: ExperienceWhereUniqueInput[] | ExperienceWhereUniqueInput
  disconnect?: ExperienceWhereUniqueInput[] | ExperienceWhereUniqueInput
  delete?: ExperienceWhereUniqueInput[] | ExperienceWhereUniqueInput
  update?: ExperienceUpdateWithoutHostInput[] | ExperienceUpdateWithoutHostInput
  upsert?: ExperienceUpsertWithoutHostInput[] | ExperienceUpsertWithoutHostInput
}

export interface MessageSubscriptionWhereInput {
  AND?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput
  OR?: MessageSubscriptionWhereInput[] | MessageSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: MessageWhereInput
}

export interface ExperienceUpdateWithoutHostInput {
  where: ExperienceWhereUniqueInput
  data: ExperienceUpdateWithoutHostDataInput
}

export interface BookingWhereInput {
  AND?: BookingWhereInput[] | BookingWhereInput
  OR?: BookingWhereInput[] | BookingWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  startDate?: DateTime
  startDate_not?: DateTime
  startDate_in?: DateTime[] | DateTime
  startDate_not_in?: DateTime[] | DateTime
  startDate_lt?: DateTime
  startDate_lte?: DateTime
  startDate_gt?: DateTime
  startDate_gte?: DateTime
  endDate?: DateTime
  endDate_not?: DateTime
  endDate_in?: DateTime[] | DateTime
  endDate_not_in?: DateTime[] | DateTime
  endDate_lt?: DateTime
  endDate_lte?: DateTime
  endDate_gt?: DateTime
  endDate_gte?: DateTime
  bookee?: UserWhereInput
  place?: PlaceWhereInput
  payment?: PaymentWhereInput
}

export interface ExperienceUpdateWithoutHostDataInput {
  title?: String
  pricePerPerson?: Int
  popularity?: Int
  category?: ExperienceCategoryUpdateOneWithoutExperienceInput
  location?: LocationUpdateOneWithoutExperienceInput
  reviews?: ReviewUpdateManyWithoutExperienceInput
  preview?: PictureUpdateOneInput
}

export interface ReviewSubscriptionWhereInput {
  AND?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput
  OR?: ReviewSubscriptionWhereInput[] | ReviewSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ReviewWhereInput
}

export interface LocationUpdateOneWithoutExperienceInput {
  create?: LocationCreateWithoutExperienceInput
  connect?: LocationWhereUniqueInput
  disconnect?: LocationWhereUniqueInput
  delete?: LocationWhereUniqueInput
  update?: LocationUpdateWithoutExperienceInput
  upsert?: LocationUpsertWithoutExperienceInput
}

export interface ExperienceSubscriptionWhereInput {
  AND?: ExperienceSubscriptionWhereInput[] | ExperienceSubscriptionWhereInput
  OR?: ExperienceSubscriptionWhereInput[] | ExperienceSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ExperienceWhereInput
}

export interface LocationUpdateWithoutExperienceInput {
  where: LocationWhereUniqueInput
  data: LocationUpdateWithoutExperienceDataInput
}

export interface GuestRequirementsWhereInput {
  AND?: GuestRequirementsWhereInput[] | GuestRequirementsWhereInput
  OR?: GuestRequirementsWhereInput[] | GuestRequirementsWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  govIssuedId?: Boolean
  govIssuedId_not?: Boolean
  recommendationsFromOtherHosts?: Boolean
  recommendationsFromOtherHosts_not?: Boolean
  guestTripInformation?: Boolean
  guestTripInformation_not?: Boolean
  place?: PlaceWhereInput
}

export interface LocationUpdateWithoutExperienceDataInput {
  lat?: Float
  lng?: Float
  address?: String
  directions?: String
  neighbourHood?: NeighbourhoodUpdateOneWithoutLocationsInput
  user?: UserUpdateOneWithoutLocationInput
  place?: PlaceUpdateOneWithoutLocationInput
  restaurant?: RestaurantUpdateOneWithoutLocationInput
}

export interface ViewsWhereInput {
  AND?: ViewsWhereInput[] | ViewsWhereInput
  OR?: ViewsWhereInput[] | ViewsWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  lastWeek?: Int
  lastWeek_not?: Int
  lastWeek_in?: Int[] | Int
  lastWeek_not_in?: Int[] | Int
  lastWeek_lt?: Int
  lastWeek_lte?: Int
  lastWeek_gt?: Int
  lastWeek_gte?: Int
  place?: PlaceWhereInput
}

export interface RestaurantUpdateOneWithoutLocationInput {
  create?: RestaurantCreateWithoutLocationInput
  connect?: RestaurantWhereUniqueInput
  disconnect?: RestaurantWhereUniqueInput
  delete?: RestaurantWhereUniqueInput
  update?: RestaurantUpdateWithoutLocationInput
  upsert?: RestaurantUpsertWithoutLocationInput
}

export interface AmenitiesWhereInput {
  AND?: AmenitiesWhereInput[] | AmenitiesWhereInput
  OR?: AmenitiesWhereInput[] | AmenitiesWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  elevator?: Boolean
  elevator_not?: Boolean
  petsAllowed?: Boolean
  petsAllowed_not?: Boolean
  internet?: Boolean
  internet_not?: Boolean
  kitchen?: Boolean
  kitchen_not?: Boolean
  wirelessInternet?: Boolean
  wirelessInternet_not?: Boolean
  familyKidFriendly?: Boolean
  familyKidFriendly_not?: Boolean
  freeParkingOnPremises?: Boolean
  freeParkingOnPremises_not?: Boolean
  hotTub?: Boolean
  hotTub_not?: Boolean
  pool?: Boolean
  pool_not?: Boolean
  smokingAllowed?: Boolean
  smokingAllowed_not?: Boolean
  wheelchairAccessible?: Boolean
  wheelchairAccessible_not?: Boolean
  breakfast?: Boolean
  breakfast_not?: Boolean
  cableTv?: Boolean
  cableTv_not?: Boolean
  suitableForEvents?: Boolean
  suitableForEvents_not?: Boolean
  dryer?: Boolean
  dryer_not?: Boolean
  washer?: Boolean
  washer_not?: Boolean
  indoorFireplace?: Boolean
  indoorFireplace_not?: Boolean
  tv?: Boolean
  tv_not?: Boolean
  heating?: Boolean
  heating_not?: Boolean
  hangers?: Boolean
  hangers_not?: Boolean
  iron?: Boolean
  iron_not?: Boolean
  hairDryer?: Boolean
  hairDryer_not?: Boolean
  doorman?: Boolean
  doorman_not?: Boolean
  paidParkingOffPremises?: Boolean
  paidParkingOffPremises_not?: Boolean
  freeParkingOnStreet?: Boolean
  freeParkingOnStreet_not?: Boolean
  gym?: Boolean
  gym_not?: Boolean
  airConditioning?: Boolean
  airConditioning_not?: Boolean
  shampoo?: Boolean
  shampoo_not?: Boolean
  essentials?: Boolean
  essentials_not?: Boolean
  laptopFriendlyWorkspace?: Boolean
  laptopFriendlyWorkspace_not?: Boolean
  privateEntrance?: Boolean
  privateEntrance_not?: Boolean
  buzzerWirelessIntercom?: Boolean
  buzzerWirelessIntercom_not?: Boolean
  babyBath?: Boolean
  babyBath_not?: Boolean
  babyMonitor?: Boolean
  babyMonitor_not?: Boolean
  babysitterRecommendations?: Boolean
  babysitterRecommendations_not?: Boolean
  bathtub?: Boolean
  bathtub_not?: Boolean
  changingTable?: Boolean
  changingTable_not?: Boolean
  childrensBooksAndToys?: Boolean
  childrensBooksAndToys_not?: Boolean
  childrensDinnerware?: Boolean
  childrensDinnerware_not?: Boolean
  crib?: Boolean
  crib_not?: Boolean
  place?: PlaceWhereInput
}

export interface RestaurantUpdateWithoutLocationInput {
  where: RestaurantWhereUniqueInput
  data: RestaurantUpdateWithoutLocationDataInput
}

export interface CityWhereInput {
  AND?: CityWhereInput[] | CityWhereInput
  OR?: CityWhereInput[] | CityWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  neighbourhoods_every?: NeighbourhoodWhereInput
  neighbourhoods_some?: NeighbourhoodWhereInput
  neighbourhoods_none?: NeighbourhoodWhereInput
}

export interface RestaurantUpdateWithoutLocationDataInput {
  title?: String
  avgPricePerPerson?: Int
  isCurated?: Boolean
  slug?: String
  popularity?: Int
  pictures?: PictureUpdateManyInput
}

export interface ExperienceCategoryWhereInput {
  AND?: ExperienceCategoryWhereInput[] | ExperienceCategoryWhereInput
  OR?: ExperienceCategoryWhereInput[] | ExperienceCategoryWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  mainColor?: String
  mainColor_not?: String
  mainColor_in?: String[] | String
  mainColor_not_in?: String[] | String
  mainColor_lt?: String
  mainColor_lte?: String
  mainColor_gt?: String
  mainColor_gte?: String
  mainColor_contains?: String
  mainColor_not_contains?: String
  mainColor_starts_with?: String
  mainColor_not_starts_with?: String
  mainColor_ends_with?: String
  mainColor_not_ends_with?: String
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  experience?: ExperienceWhereInput
}

export interface PictureUpdateManyInput {
  create?: PictureCreateInput[] | PictureCreateInput
  connect?: PictureWhereUniqueInput[] | PictureWhereUniqueInput
  disconnect?: PictureWhereUniqueInput[] | PictureWhereUniqueInput
  delete?: PictureWhereUniqueInput[] | PictureWhereUniqueInput
}

export interface UserSubscriptionWhereInput {
  AND?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  OR?: UserSubscriptionWhereInput[] | UserSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: UserWhereInput
}

export interface RestaurantUpsertWithoutLocationInput {
  where: RestaurantWhereUniqueInput
  update: RestaurantUpdateWithoutLocationDataInput
  create: RestaurantCreateWithoutLocationInput
}

export interface UserWhereUniqueInput {
  id?: ID_Input
  email?: String
}

export interface LocationUpsertWithoutExperienceInput {
  where: LocationWhereUniqueInput
  update: LocationUpdateWithoutExperienceDataInput
  create: LocationCreateWithoutExperienceInput
}

export interface PoliciesWhereUniqueInput {
  id?: ID_Input
}

export interface ReviewUpdateManyWithoutExperienceInput {
  create?: ReviewCreateWithoutExperienceInput[] | ReviewCreateWithoutExperienceInput
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput
  disconnect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput
  delete?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput
  update?: ReviewUpdateWithoutExperienceInput[] | ReviewUpdateWithoutExperienceInput
  upsert?: ReviewUpsertWithoutExperienceInput[] | ReviewUpsertWithoutExperienceInput
}

export interface NeighbourhoodWhereUniqueInput {
  id?: ID_Input
}

export interface ReviewUpdateWithoutExperienceInput {
  where: ReviewWhereUniqueInput
  data: ReviewUpdateWithoutExperienceDataInput
}

export interface ExperienceCategoryWhereUniqueInput {
  id?: ID_Input
}

export interface ReviewUpdateWithoutExperienceDataInput {
  text?: String
  stars?: Int
  accuracy?: Int
  location?: Int
  checkIn?: Int
  value?: Int
  cleanliness?: Int
  communication?: Int
  place?: PlaceUpdateOneWithoutReviewsInput
}

export interface PaymentWhereUniqueInput {
  id?: ID_Input
}

export interface PlaceUpdateOneWithoutReviewsInput {
  create?: PlaceCreateWithoutReviewsInput
  connect?: PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutReviewsInput
  upsert?: PlaceUpsertWithoutReviewsInput
}

export interface MessageWhereUniqueInput {
  id?: ID_Input
}

export interface PlaceUpdateWithoutReviewsInput {
  where: PlaceWhereUniqueInput
  data: PlaceUpdateWithoutReviewsDataInput
}

export interface RestaurantUpdateInput {
  title?: String
  avgPricePerPerson?: Int
  isCurated?: Boolean
  slug?: String
  popularity?: Int
  pictures?: PictureUpdateManyInput
  location?: LocationUpdateOneWithoutRestaurantInput
}

export interface PlaceUpdateWithoutReviewsDataInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription?: String
  description?: String
  slug?: String
  maxGuests?: Int
  numBedrooms?: Int
  numBeds?: Int
  numBaths?: Int
  popularity?: Int
  amenities?: AmenitiesUpdateOneWithoutPlaceInput
  host?: UserUpdateOneWithoutOwnedPlacesInput
  pricing?: PricingUpdateOneWithoutPlaceInput
  location?: LocationUpdateOneWithoutPlaceInput
  views?: ViewsUpdateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsUpdateOneWithoutPlaceInput
  policies?: PoliciesUpdateOneWithoutPlaceInput
  houseRules?: HouseRulesUpdateOneInput
  bookings?: BookingUpdateManyWithoutPlaceInput
  pictures?: PictureUpdateManyInput
}

export interface UserUpdateOneWithoutNotificationsInput {
  create?: UserCreateWithoutNotificationsInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutNotificationsInput
  upsert?: UserUpsertWithoutNotificationsInput
}

export interface ViewsUpdateOneWithoutPlaceInput {
  create?: ViewsCreateWithoutPlaceInput
  connect?: ViewsWhereUniqueInput
  disconnect?: ViewsWhereUniqueInput
  delete?: ViewsWhereUniqueInput
  update?: ViewsUpdateWithoutPlaceInput
  upsert?: ViewsUpsertWithoutPlaceInput
}

export interface PaymentAccountUpdateWithoutCreditcardDataInput {
  type?: PAYMENT_PROVIDER
  user?: UserUpdateOneWithoutPaymentAccountInput
  payments?: PaymentUpdateManyWithoutPaymentMethodInput
  paypal?: PaypalInformationUpdateOneWithoutPaymentAccountInput
}

export interface ViewsUpdateWithoutPlaceInput {
  where: ViewsWhereUniqueInput
  data: ViewsUpdateWithoutPlaceDataInput
}

export interface PaymentAccountUpsertWithoutPaypalInput {
  where: PaymentAccountWhereUniqueInput
  update: PaymentAccountUpdateWithoutPaypalDataInput
  create: PaymentAccountCreateWithoutPaypalInput
}

export interface ViewsUpdateWithoutPlaceDataInput {
  lastWeek?: Int
}

export interface PaypalInformationUpdateInput {
  email?: String
  paymentAccount?: PaymentAccountUpdateOneWithoutPaypalInput
}

export interface ViewsUpsertWithoutPlaceInput {
  where: ViewsWhereUniqueInput
  update: ViewsUpdateWithoutPlaceDataInput
  create: ViewsCreateWithoutPlaceInput
}

export interface ReviewUpdateInput {
  text?: String
  stars?: Int
  accuracy?: Int
  location?: Int
  checkIn?: Int
  value?: Int
  cleanliness?: Int
  communication?: Int
  place?: PlaceUpdateOneWithoutReviewsInput
  experience?: ExperienceUpdateOneWithoutReviewsInput
}

export interface GuestRequirementsUpdateOneWithoutPlaceInput {
  create?: GuestRequirementsCreateWithoutPlaceInput
  connect?: GuestRequirementsWhereUniqueInput
  disconnect?: GuestRequirementsWhereUniqueInput
  delete?: GuestRequirementsWhereUniqueInput
  update?: GuestRequirementsUpdateWithoutPlaceInput
  upsert?: GuestRequirementsUpsertWithoutPlaceInput
}

export interface PlaceUpdateOneWithoutAmenitiesInput {
  create?: PlaceCreateWithoutAmenitiesInput
  connect?: PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutAmenitiesInput
  upsert?: PlaceUpsertWithoutAmenitiesInput
}

export interface GuestRequirementsUpdateWithoutPlaceInput {
  where: GuestRequirementsWhereUniqueInput
  data: GuestRequirementsUpdateWithoutPlaceDataInput
}

export interface ExperienceUpdateWithoutCategoryInput {
  where: ExperienceWhereUniqueInput
  data: ExperienceUpdateWithoutCategoryDataInput
}

export interface GuestRequirementsUpdateWithoutPlaceDataInput {
  govIssuedId?: Boolean
  recommendationsFromOtherHosts?: Boolean
  guestTripInformation?: Boolean
}

export interface PictureUpdateInput {
  name?: String
  size?: Int
  secret?: String
  contentType?: String
}

export interface GuestRequirementsUpsertWithoutPlaceInput {
  where: GuestRequirementsWhereUniqueInput
  update: GuestRequirementsUpdateWithoutPlaceDataInput
  create: GuestRequirementsCreateWithoutPlaceInput
}

export interface NeighbourhoodUpdateManyWithoutCityInput {
  create?: NeighbourhoodCreateWithoutCityInput[] | NeighbourhoodCreateWithoutCityInput
  connect?: NeighbourhoodWhereUniqueInput[] | NeighbourhoodWhereUniqueInput
  disconnect?: NeighbourhoodWhereUniqueInput[] | NeighbourhoodWhereUniqueInput
  delete?: NeighbourhoodWhereUniqueInput[] | NeighbourhoodWhereUniqueInput
  update?: NeighbourhoodUpdateWithoutCityInput[] | NeighbourhoodUpdateWithoutCityInput
  upsert?: NeighbourhoodUpsertWithoutCityInput[] | NeighbourhoodUpsertWithoutCityInput
}

export interface PoliciesUpdateOneWithoutPlaceInput {
  create?: PoliciesCreateWithoutPlaceInput
  connect?: PoliciesWhereUniqueInput
  disconnect?: PoliciesWhereUniqueInput
  delete?: PoliciesWhereUniqueInput
  update?: PoliciesUpdateWithoutPlaceInput
  upsert?: PoliciesUpsertWithoutPlaceInput
}

export interface LocationUpdateWithoutNeighbourHoodInput {
  where: LocationWhereUniqueInput
  data: LocationUpdateWithoutNeighbourHoodDataInput
}

export interface PoliciesUpdateWithoutPlaceInput {
  where: PoliciesWhereUniqueInput
  data: PoliciesUpdateWithoutPlaceDataInput
}

export interface PlaceUpsertWithoutViewsInput {
  where: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutViewsDataInput
  create: PlaceCreateWithoutViewsInput
}

export interface PoliciesUpdateWithoutPlaceDataInput {
  checkInStartTime?: Float
  checkInEndTime?: Float
  checkoutTime?: Float
}

export interface PlaceCreateWithoutHostInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews?: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput
  pricing: PricingCreateOneWithoutPlaceInput
  location: LocationCreateOneWithoutPlaceInput
  views: ViewsCreateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsCreateOneWithoutPlaceInput
  policies?: PoliciesCreateOneWithoutPlaceInput
  houseRules?: HouseRulesCreateOneInput
  bookings?: BookingCreateManyWithoutPlaceInput
  pictures?: PictureCreateManyInput
}

export interface PoliciesUpsertWithoutPlaceInput {
  where: PoliciesWhereUniqueInput
  update: PoliciesUpdateWithoutPlaceDataInput
  create: PoliciesCreateWithoutPlaceInput
}

export interface ExperienceCreateWithoutReviewsInput {
  title: String
  pricePerPerson: Int
  popularity: Int
  category?: ExperienceCategoryCreateOneWithoutExperienceInput
  host: UserCreateOneWithoutHostingExperiencesInput
  location: LocationCreateOneWithoutExperienceInput
  preview: PictureCreateOneInput
}

export interface HouseRulesUpdateOneInput {
  create?: HouseRulesCreateInput
  connect?: HouseRulesWhereUniqueInput
  disconnect?: HouseRulesWhereUniqueInput
  delete?: HouseRulesWhereUniqueInput
}

export interface UserCreateWithoutHostingExperiencesInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceCreateManyWithoutHostInput
  location?: LocationCreateOneWithoutUserInput
  bookings?: BookingCreateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountCreateManyWithoutUserInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  notifications?: NotificationCreateManyWithoutUserInput
  profilePicture?: PictureCreateOneInput
}

export interface BookingUpdateManyWithoutPlaceInput {
  create?: BookingCreateWithoutPlaceInput[] | BookingCreateWithoutPlaceInput
  connect?: BookingWhereUniqueInput[] | BookingWhereUniqueInput
  disconnect?: BookingWhereUniqueInput[] | BookingWhereUniqueInput
  delete?: BookingWhereUniqueInput[] | BookingWhereUniqueInput
  update?: BookingUpdateWithoutPlaceInput[] | BookingUpdateWithoutPlaceInput
  upsert?: BookingUpsertWithoutPlaceInput[] | BookingUpsertWithoutPlaceInput
}

export interface NeighbourhoodCreateWithoutLocationsInput {
  name: String
  slug: String
  featured: Boolean
  popularity: Int
  homePreview?: PictureCreateOneInput
  city: CityCreateOneWithoutNeighbourhoodsInput
}

export interface BookingUpdateWithoutPlaceInput {
  where: BookingWhereUniqueInput
  data: BookingUpdateWithoutPlaceDataInput
}

export interface CityCreateWithoutNeighbourhoodsInput {
  name: String
}

export interface BookingUpdateWithoutPlaceDataInput {
  startDate?: DateTime
  endDate?: DateTime
  bookee?: UserUpdateOneWithoutBookingsInput
  payment?: PaymentUpdateOneWithoutBookingInput
}

export interface AmenitiesCreateWithoutPlaceInput {
  elevator?: Boolean
  petsAllowed?: Boolean
  internet?: Boolean
  kitchen?: Boolean
  wirelessInternet?: Boolean
  familyKidFriendly?: Boolean
  freeParkingOnPremises?: Boolean
  hotTub?: Boolean
  pool?: Boolean
  smokingAllowed?: Boolean
  wheelchairAccessible?: Boolean
  breakfast?: Boolean
  cableTv?: Boolean
  suitableForEvents?: Boolean
  dryer?: Boolean
  washer?: Boolean
  indoorFireplace?: Boolean
  tv?: Boolean
  heating?: Boolean
  hangers?: Boolean
  iron?: Boolean
  hairDryer?: Boolean
  doorman?: Boolean
  paidParkingOffPremises?: Boolean
  freeParkingOnStreet?: Boolean
  gym?: Boolean
  airConditioning?: Boolean
  shampoo?: Boolean
  essentials?: Boolean
  laptopFriendlyWorkspace?: Boolean
  privateEntrance?: Boolean
  buzzerWirelessIntercom?: Boolean
  babyBath?: Boolean
  babyMonitor?: Boolean
  babysitterRecommendations?: Boolean
  bathtub?: Boolean
  changingTable?: Boolean
  childrensBooksAndToys?: Boolean
  childrensDinnerware?: Boolean
  crib?: Boolean
}

export interface PaymentUpdateOneWithoutBookingInput {
  create?: PaymentCreateWithoutBookingInput
  connect?: PaymentWhereUniqueInput
  disconnect?: PaymentWhereUniqueInput
  delete?: PaymentWhereUniqueInput
  update?: PaymentUpdateWithoutBookingInput
  upsert?: PaymentUpsertWithoutBookingInput
}

export interface BookingCreateWithoutBookeeInput {
  startDate: DateTime
  endDate: DateTime
  place: PlaceCreateOneWithoutBookingsInput
  payment: PaymentCreateOneWithoutBookingInput
}

export interface PaymentUpdateWithoutBookingInput {
  where: PaymentWhereUniqueInput
  data: PaymentUpdateWithoutBookingDataInput
}

export interface PricingCreateWithoutPlaceInput {
  monthlyDiscount?: Int
  weeklyDiscount?: Int
  perNight: Int
  smartPricing?: Boolean
  basePrice: Int
  averageWeekly: Int
  averageMonthly: Int
  cleaningFee?: Int
  securityDeposit?: Int
  extraGuests?: Int
  weekendPricing?: Int
  currency?: CURRENCY
}

export interface PaymentUpdateWithoutBookingDataInput {
  serviceFee?: Float
  placePrice?: Float
  totalPrice?: Float
  paymentMethod?: PaymentAccountUpdateOneWithoutPaymentsInput
}

export interface UserCreateWithoutLocationInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceCreateManyWithoutHostInput
  bookings?: BookingCreateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountCreateManyWithoutUserInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  notifications?: NotificationCreateManyWithoutUserInput
  profilePicture?: PictureCreateOneInput
  hostingExperiences?: ExperienceCreateManyWithoutHostInput
}

export interface PaymentAccountUpdateOneWithoutPaymentsInput {
  create?: PaymentAccountCreateWithoutPaymentsInput
  connect?: PaymentAccountWhereUniqueInput
  disconnect?: PaymentAccountWhereUniqueInput
  delete?: PaymentAccountWhereUniqueInput
  update?: PaymentAccountUpdateWithoutPaymentsInput
  upsert?: PaymentAccountUpsertWithoutPaymentsInput
}

export interface PaymentCreateWithoutPaymentMethodInput {
  serviceFee: Float
  placePrice: Float
  totalPrice: Float
  booking: BookingCreateOneWithoutPaymentInput
}

export interface PaymentAccountUpdateWithoutPaymentsInput {
  where: PaymentAccountWhereUniqueInput
  data: PaymentAccountUpdateWithoutPaymentsDataInput
}

export interface UserCreateWithoutBookingsInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceCreateManyWithoutHostInput
  location?: LocationCreateOneWithoutUserInput
  paymentAccount?: PaymentAccountCreateManyWithoutUserInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  notifications?: NotificationCreateManyWithoutUserInput
  profilePicture?: PictureCreateOneInput
  hostingExperiences?: ExperienceCreateManyWithoutHostInput
}

export interface PaymentAccountUpdateWithoutPaymentsDataInput {
  type?: PAYMENT_PROVIDER
  user?: UserUpdateOneWithoutPaymentAccountInput
  paypal?: PaypalInformationUpdateOneWithoutPaymentAccountInput
  creditcard?: CreditCardInformationUpdateOneWithoutPaymentAccountInput
}

export interface UserCreateWithoutReceivedMessagesInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceCreateManyWithoutHostInput
  location?: LocationCreateOneWithoutUserInput
  bookings?: BookingCreateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountCreateManyWithoutUserInput
  sentMessages?: MessageCreateManyWithoutFromInput
  notifications?: NotificationCreateManyWithoutUserInput
  profilePicture?: PictureCreateOneInput
  hostingExperiences?: ExperienceCreateManyWithoutHostInput
}

export interface UserUpdateOneWithoutPaymentAccountInput {
  create?: UserCreateWithoutPaymentAccountInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutPaymentAccountInput
  upsert?: UserUpsertWithoutPaymentAccountInput
}

export interface ExperienceCreateWithoutHostInput {
  title: String
  pricePerPerson: Int
  popularity: Int
  category?: ExperienceCategoryCreateOneWithoutExperienceInput
  location: LocationCreateOneWithoutExperienceInput
  reviews?: ReviewCreateManyWithoutExperienceInput
  preview: PictureCreateOneInput
}

export interface UserUpdateWithoutPaymentAccountInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutPaymentAccountDataInput
}

export interface RestaurantCreateWithoutLocationInput {
  title: String
  avgPricePerPerson: Int
  isCurated?: Boolean
  slug: String
  popularity: Int
  pictures?: PictureCreateManyInput
}

export interface UserUpdateWithoutPaymentAccountDataInput {
  firstName?: String
  lastName?: String
  email?: String
  password?: String
  phone?: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceUpdateManyWithoutHostInput
  location?: LocationUpdateOneWithoutUserInput
  bookings?: BookingUpdateManyWithoutBookeeInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  notifications?: NotificationUpdateManyWithoutUserInput
  profilePicture?: PictureUpdateOneInput
  hostingExperiences?: ExperienceUpdateManyWithoutHostInput
}

export interface PlaceCreateOneWithoutReviewsInput {
  create?: PlaceCreateWithoutReviewsInput
  connect?: PlaceWhereUniqueInput
}

export interface MessageUpdateManyWithoutToInput {
  create?: MessageCreateWithoutToInput[] | MessageCreateWithoutToInput
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  disconnect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  delete?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
  update?: MessageUpdateWithoutToInput[] | MessageUpdateWithoutToInput
  upsert?: MessageUpsertWithoutToInput[] | MessageUpsertWithoutToInput
}

export interface GuestRequirementsCreateOneWithoutPlaceInput {
  create?: GuestRequirementsCreateWithoutPlaceInput
  connect?: GuestRequirementsWhereUniqueInput
}

export interface MessageUpdateWithoutToInput {
  where: MessageWhereUniqueInput
  data: MessageUpdateWithoutToDataInput
}

export interface HouseRulesCreateOneInput {
  create?: HouseRulesCreateInput
  connect?: HouseRulesWhereUniqueInput
}

export interface MessageUpdateWithoutToDataInput {
  deliveredAt?: DateTime
  readAt?: DateTime
  from?: UserUpdateOneWithoutSentMessagesInput
}

export interface PaymentCreateOneWithoutBookingInput {
  create?: PaymentCreateWithoutBookingInput
  connect?: PaymentWhereUniqueInput
}

export interface UserUpdateOneWithoutSentMessagesInput {
  create?: UserCreateWithoutSentMessagesInput
  connect?: UserWhereUniqueInput
  disconnect?: UserWhereUniqueInput
  delete?: UserWhereUniqueInput
  update?: UserUpdateWithoutSentMessagesInput
  upsert?: UserUpsertWithoutSentMessagesInput
}

export interface UserCreateOneWithoutPaymentAccountInput {
  create?: UserCreateWithoutPaymentAccountInput
  connect?: UserWhereUniqueInput
}

export interface UserUpdateWithoutSentMessagesInput {
  where: UserWhereUniqueInput
  data: UserUpdateWithoutSentMessagesDataInput
}

export interface UserCreateOneWithoutSentMessagesInput {
  create?: UserCreateWithoutSentMessagesInput
  connect?: UserWhereUniqueInput
}

export interface UserUpdateWithoutSentMessagesDataInput {
  firstName?: String
  lastName?: String
  email?: String
  password?: String
  phone?: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceUpdateManyWithoutHostInput
  location?: LocationUpdateOneWithoutUserInput
  bookings?: BookingUpdateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountUpdateManyWithoutUserInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  notifications?: NotificationUpdateManyWithoutUserInput
  profilePicture?: PictureUpdateOneInput
  hostingExperiences?: ExperienceUpdateManyWithoutHostInput
}

export interface CreditCardInformationCreateOneWithoutPaymentAccountInput {
  create?: CreditCardInformationCreateWithoutPaymentAccountInput
  connect?: CreditCardInformationWhereUniqueInput
}

export interface UserUpsertWithoutSentMessagesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutSentMessagesDataInput
  create: UserCreateWithoutSentMessagesInput
}

export interface PlaceCreateInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews?: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput
  host: UserCreateOneWithoutOwnedPlacesInput
  pricing: PricingCreateOneWithoutPlaceInput
  location: LocationCreateOneWithoutPlaceInput
  views: ViewsCreateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsCreateOneWithoutPlaceInput
  policies?: PoliciesCreateOneWithoutPlaceInput
  houseRules?: HouseRulesCreateOneInput
  bookings?: BookingCreateManyWithoutPlaceInput
  pictures?: PictureCreateManyInput
}

export interface MessageUpsertWithoutToInput {
  where: MessageWhereUniqueInput
  update: MessageUpdateWithoutToDataInput
  create: MessageCreateWithoutToInput
}

export interface GuestRequirementsCreateInput {
  govIssuedId?: Boolean
  recommendationsFromOtherHosts?: Boolean
  guestTripInformation?: Boolean
  place: PlaceCreateOneWithoutGuestRequirementsInput
}

export interface UserUpsertWithoutPaymentAccountInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutPaymentAccountDataInput
  create: UserCreateWithoutPaymentAccountInput
}

export interface PlaceCreateOneWithoutPoliciesInput {
  create?: PlaceCreateWithoutPoliciesInput
  connect?: PlaceWhereUniqueInput
}

export interface PaypalInformationUpdateOneWithoutPaymentAccountInput {
  create?: PaypalInformationCreateWithoutPaymentAccountInput
  connect?: PaypalInformationWhereUniqueInput
  disconnect?: PaypalInformationWhereUniqueInput
  delete?: PaypalInformationWhereUniqueInput
  update?: PaypalInformationUpdateWithoutPaymentAccountInput
  upsert?: PaypalInformationUpsertWithoutPaymentAccountInput
}

export interface PlaceCreateWithoutViewsInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews?: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput
  host: UserCreateOneWithoutOwnedPlacesInput
  pricing: PricingCreateOneWithoutPlaceInput
  location: LocationCreateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsCreateOneWithoutPlaceInput
  policies?: PoliciesCreateOneWithoutPlaceInput
  houseRules?: HouseRulesCreateOneInput
  bookings?: BookingCreateManyWithoutPlaceInput
  pictures?: PictureCreateManyInput
}

export interface PaypalInformationUpdateWithoutPaymentAccountInput {
  where: PaypalInformationWhereUniqueInput
  data: PaypalInformationUpdateWithoutPaymentAccountDataInput
}

export interface PaypalInformationSubscriptionWhereInput {
  AND?: PaypalInformationSubscriptionWhereInput[] | PaypalInformationSubscriptionWhereInput
  OR?: PaypalInformationSubscriptionWhereInput[] | PaypalInformationSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: PaypalInformationWhereInput
}

export interface PaypalInformationUpdateWithoutPaymentAccountDataInput {
  email?: String
}

export interface AmenitiesSubscriptionWhereInput {
  AND?: AmenitiesSubscriptionWhereInput[] | AmenitiesSubscriptionWhereInput
  OR?: AmenitiesSubscriptionWhereInput[] | AmenitiesSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: AmenitiesWhereInput
}

export interface PaypalInformationUpsertWithoutPaymentAccountInput {
  where: PaypalInformationWhereUniqueInput
  update: PaypalInformationUpdateWithoutPaymentAccountDataInput
  create: PaypalInformationCreateWithoutPaymentAccountInput
}

export interface ViewsSubscriptionWhereInput {
  AND?: ViewsSubscriptionWhereInput[] | ViewsSubscriptionWhereInput
  OR?: ViewsSubscriptionWhereInput[] | ViewsSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: ViewsWhereInput
}

export interface CreditCardInformationUpdateOneWithoutPaymentAccountInput {
  create?: CreditCardInformationCreateWithoutPaymentAccountInput
  connect?: CreditCardInformationWhereUniqueInput
  disconnect?: CreditCardInformationWhereUniqueInput
  delete?: CreditCardInformationWhereUniqueInput
  update?: CreditCardInformationUpdateWithoutPaymentAccountInput
  upsert?: CreditCardInformationUpsertWithoutPaymentAccountInput
}

export interface RestaurantWhereInput {
  AND?: RestaurantWhereInput[] | RestaurantWhereInput
  OR?: RestaurantWhereInput[] | RestaurantWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  title?: String
  title_not?: String
  title_in?: String[] | String
  title_not_in?: String[] | String
  title_lt?: String
  title_lte?: String
  title_gt?: String
  title_gte?: String
  title_contains?: String
  title_not_contains?: String
  title_starts_with?: String
  title_not_starts_with?: String
  title_ends_with?: String
  title_not_ends_with?: String
  avgPricePerPerson?: Int
  avgPricePerPerson_not?: Int
  avgPricePerPerson_in?: Int[] | Int
  avgPricePerPerson_not_in?: Int[] | Int
  avgPricePerPerson_lt?: Int
  avgPricePerPerson_lte?: Int
  avgPricePerPerson_gt?: Int
  avgPricePerPerson_gte?: Int
  isCurated?: Boolean
  isCurated_not?: Boolean
  slug?: String
  slug_not?: String
  slug_in?: String[] | String
  slug_not_in?: String[] | String
  slug_lt?: String
  slug_lte?: String
  slug_gt?: String
  slug_gte?: String
  slug_contains?: String
  slug_not_contains?: String
  slug_starts_with?: String
  slug_not_starts_with?: String
  slug_ends_with?: String
  slug_not_ends_with?: String
  popularity?: Int
  popularity_not?: Int
  popularity_in?: Int[] | Int
  popularity_not_in?: Int[] | Int
  popularity_lt?: Int
  popularity_lte?: Int
  popularity_gt?: Int
  popularity_gte?: Int
  pictures_every?: PictureWhereInput
  pictures_some?: PictureWhereInput
  pictures_none?: PictureWhereInput
  location?: LocationWhereInput
}

export interface CreditCardInformationUpdateWithoutPaymentAccountInput {
  where: CreditCardInformationWhereUniqueInput
  data: CreditCardInformationUpdateWithoutPaymentAccountDataInput
}

export interface ReviewWhereInput {
  AND?: ReviewWhereInput[] | ReviewWhereInput
  OR?: ReviewWhereInput[] | ReviewWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  text?: String
  text_not?: String
  text_in?: String[] | String
  text_not_in?: String[] | String
  text_lt?: String
  text_lte?: String
  text_gt?: String
  text_gte?: String
  text_contains?: String
  text_not_contains?: String
  text_starts_with?: String
  text_not_starts_with?: String
  text_ends_with?: String
  text_not_ends_with?: String
  stars?: Int
  stars_not?: Int
  stars_in?: Int[] | Int
  stars_not_in?: Int[] | Int
  stars_lt?: Int
  stars_lte?: Int
  stars_gt?: Int
  stars_gte?: Int
  accuracy?: Int
  accuracy_not?: Int
  accuracy_in?: Int[] | Int
  accuracy_not_in?: Int[] | Int
  accuracy_lt?: Int
  accuracy_lte?: Int
  accuracy_gt?: Int
  accuracy_gte?: Int
  location?: Int
  location_not?: Int
  location_in?: Int[] | Int
  location_not_in?: Int[] | Int
  location_lt?: Int
  location_lte?: Int
  location_gt?: Int
  location_gte?: Int
  checkIn?: Int
  checkIn_not?: Int
  checkIn_in?: Int[] | Int
  checkIn_not_in?: Int[] | Int
  checkIn_lt?: Int
  checkIn_lte?: Int
  checkIn_gt?: Int
  checkIn_gte?: Int
  value?: Int
  value_not?: Int
  value_in?: Int[] | Int
  value_not_in?: Int[] | Int
  value_lt?: Int
  value_lte?: Int
  value_gt?: Int
  value_gte?: Int
  cleanliness?: Int
  cleanliness_not?: Int
  cleanliness_in?: Int[] | Int
  cleanliness_not_in?: Int[] | Int
  cleanliness_lt?: Int
  cleanliness_lte?: Int
  cleanliness_gt?: Int
  cleanliness_gte?: Int
  communication?: Int
  communication_not?: Int
  communication_in?: Int[] | Int
  communication_not_in?: Int[] | Int
  communication_lt?: Int
  communication_lte?: Int
  communication_gt?: Int
  communication_gte?: Int
  place?: PlaceWhereInput
  experience?: ExperienceWhereInput
}

export interface CreditCardInformationUpdateWithoutPaymentAccountDataInput {
  cardNumber?: String
  expiresOnMonth?: Int
  expiresOnYear?: Int
  securityCode?: String
  firstName?: String
  lastName?: String
  postalCode?: String
  country?: String
}

export interface PricingWhereUniqueInput {
  id?: ID_Input
}

export interface CreditCardInformationUpsertWithoutPaymentAccountInput {
  where: CreditCardInformationWhereUniqueInput
  update: CreditCardInformationUpdateWithoutPaymentAccountDataInput
  create: CreditCardInformationCreateWithoutPaymentAccountInput
}

export interface PictureWhereUniqueInput {
  id?: ID_Input
}

export interface PaymentAccountUpsertWithoutPaymentsInput {
  where: PaymentAccountWhereUniqueInput
  update: PaymentAccountUpdateWithoutPaymentsDataInput
  create: PaymentAccountCreateWithoutPaymentsInput
}

export interface PaypalInformationWhereUniqueInput {
  id?: ID_Input
}

export interface PaymentUpsertWithoutBookingInput {
  where: PaymentWhereUniqueInput
  update: PaymentUpdateWithoutBookingDataInput
  create: PaymentCreateWithoutBookingInput
}

export interface UserUpdateWithoutNotificationsDataInput {
  firstName?: String
  lastName?: String
  email?: String
  password?: String
  phone?: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceUpdateManyWithoutHostInput
  location?: LocationUpdateOneWithoutUserInput
  bookings?: BookingUpdateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountUpdateManyWithoutUserInput
  sentMessages?: MessageUpdateManyWithoutFromInput
  receivedMessages?: MessageUpdateManyWithoutToInput
  profilePicture?: PictureUpdateOneInput
  hostingExperiences?: ExperienceUpdateManyWithoutHostInput
}

export interface BookingUpsertWithoutPlaceInput {
  where: BookingWhereUniqueInput
  update: BookingUpdateWithoutPlaceDataInput
  create: BookingCreateWithoutPlaceInput
}

export interface PaymentAccountUpdateOneWithoutCreditcardInput {
  create?: PaymentAccountCreateWithoutCreditcardInput
  connect?: PaymentAccountWhereUniqueInput
  disconnect?: PaymentAccountWhereUniqueInput
  delete?: PaymentAccountWhereUniqueInput
  update?: PaymentAccountUpdateWithoutCreditcardInput
  upsert?: PaymentAccountUpsertWithoutCreditcardInput
}

export interface PlaceUpsertWithoutReviewsInput {
  where: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutReviewsDataInput
  create: PlaceCreateWithoutReviewsInput
}

export interface PaymentUpdateInput {
  serviceFee?: Float
  placePrice?: Float
  totalPrice?: Float
  booking?: BookingUpdateOneWithoutPaymentInput
  paymentMethod?: PaymentAccountUpdateOneWithoutPaymentsInput
}

export interface ReviewUpsertWithoutExperienceInput {
  where: ReviewWhereUniqueInput
  update: ReviewUpdateWithoutExperienceDataInput
  create: ReviewCreateWithoutExperienceInput
}

export interface ExperienceUpsertWithoutCategoryInput {
  where: ExperienceWhereUniqueInput
  update: ExperienceUpdateWithoutCategoryDataInput
  create: ExperienceCreateWithoutCategoryInput
}

export interface ExperienceUpsertWithoutHostInput {
  where: ExperienceWhereUniqueInput
  update: ExperienceUpdateWithoutHostDataInput
  create: ExperienceCreateWithoutHostInput
}

export interface NeighbourhoodUpdateWithoutCityDataInput {
  name?: String
  slug?: String
  featured?: Boolean
  popularity?: Int
  locations?: LocationUpdateManyWithoutNeighbourHoodInput
  homePreview?: PictureUpdateOneInput
}

export interface UserUpsertWithoutReceivedMessagesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutReceivedMessagesDataInput
  create: UserCreateWithoutReceivedMessagesInput
}

export interface NeighbourhoodUpdateInput {
  name?: String
  slug?: String
  featured?: Boolean
  popularity?: Int
  locations?: LocationUpdateManyWithoutNeighbourHoodInput
  homePreview?: PictureUpdateOneInput
  city?: CityUpdateOneWithoutNeighbourhoodsInput
}

export interface MessageUpsertWithoutFromInput {
  where: MessageWhereUniqueInput
  update: MessageUpdateWithoutFromDataInput
  create: MessageCreateWithoutFromInput
}

export interface ReviewCreateWithoutPlaceInput {
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  cleanliness: Int
  communication: Int
  experience?: ExperienceCreateOneWithoutReviewsInput
}

export interface UserUpsertWithoutBookingsInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutBookingsDataInput
  create: UserCreateWithoutBookingsInput
}

export interface LocationCreateWithoutUserInput {
  lat: Float
  lng: Float
  address?: String
  directions?: String
  neighbourHood?: NeighbourhoodCreateOneWithoutLocationsInput
  place?: PlaceCreateOneWithoutLocationInput
  experience?: ExperienceCreateOneWithoutLocationInput
  restaurant?: RestaurantCreateOneWithoutLocationInput
}

export interface BookingUpsertWithoutPaymentInput {
  where: BookingWhereUniqueInput
  update: BookingUpdateWithoutPaymentDataInput
  create: BookingCreateWithoutPaymentInput
}

export interface PlaceCreateWithoutLocationInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews?: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput
  host: UserCreateOneWithoutOwnedPlacesInput
  pricing: PricingCreateOneWithoutPlaceInput
  views: ViewsCreateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsCreateOneWithoutPlaceInput
  policies?: PoliciesCreateOneWithoutPlaceInput
  houseRules?: HouseRulesCreateOneInput
  bookings?: BookingCreateManyWithoutPlaceInput
  pictures?: PictureCreateManyInput
}

export interface PaymentUpsertWithoutPaymentMethodInput {
  where: PaymentWhereUniqueInput
  update: PaymentUpdateWithoutPaymentMethodDataInput
  create: PaymentCreateWithoutPaymentMethodInput
}

export interface PlaceCreateWithoutBookingsInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews?: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput
  host: UserCreateOneWithoutOwnedPlacesInput
  pricing: PricingCreateOneWithoutPlaceInput
  location: LocationCreateOneWithoutPlaceInput
  views: ViewsCreateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsCreateOneWithoutPlaceInput
  policies?: PoliciesCreateOneWithoutPlaceInput
  houseRules?: HouseRulesCreateOneInput
  pictures?: PictureCreateManyInput
}

export interface PaymentAccountUpsertWithoutUserInput {
  where: PaymentAccountWhereUniqueInput
  update: PaymentAccountUpdateWithoutUserDataInput
  create: PaymentAccountCreateWithoutUserInput
}

export interface PaymentAccountCreateWithoutUserInput {
  type?: PAYMENT_PROVIDER
  payments?: PaymentCreateManyWithoutPaymentMethodInput
  paypal?: PaypalInformationCreateOneWithoutPaymentAccountInput
  creditcard?: CreditCardInformationCreateOneWithoutPaymentAccountInput
}

export interface UserUpsertWithoutLocationInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutLocationDataInput
  create: UserCreateWithoutLocationInput
}

export interface MessageCreateWithoutFromInput {
  deliveredAt: DateTime
  readAt: DateTime
  to: UserCreateOneWithoutReceivedMessagesInput
}

export interface ExperienceUpdateOneWithoutLocationInput {
  create?: ExperienceCreateWithoutLocationInput
  connect?: ExperienceWhereUniqueInput
  disconnect?: ExperienceWhereUniqueInput
  delete?: ExperienceWhereUniqueInput
  update?: ExperienceUpdateWithoutLocationInput
  upsert?: ExperienceUpsertWithoutLocationInput
}

export interface LocationCreateWithoutExperienceInput {
  lat: Float
  lng: Float
  address?: String
  directions?: String
  neighbourHood?: NeighbourhoodCreateOneWithoutLocationsInput
  user?: UserCreateOneWithoutLocationInput
  place?: PlaceCreateOneWithoutLocationInput
  restaurant?: RestaurantCreateOneWithoutLocationInput
}

export interface ExperienceUpdateWithoutLocationInput {
  where: ExperienceWhereUniqueInput
  data: ExperienceUpdateWithoutLocationDataInput
}

export interface ViewsCreateOneWithoutPlaceInput {
  create?: ViewsCreateWithoutPlaceInput
  connect?: ViewsWhereUniqueInput
}

export interface ExperienceUpdateWithoutLocationDataInput {
  title?: String
  pricePerPerson?: Int
  popularity?: Int
  category?: ExperienceCategoryUpdateOneWithoutExperienceInput
  host?: UserUpdateOneWithoutHostingExperiencesInput
  reviews?: ReviewUpdateManyWithoutExperienceInput
  preview?: PictureUpdateOneInput
}

export interface BookingCreateManyWithoutPlaceInput {
  create?: BookingCreateWithoutPlaceInput[] | BookingCreateWithoutPlaceInput
  connect?: BookingWhereUniqueInput[] | BookingWhereUniqueInput
}

export interface ExperienceUpsertWithoutLocationInput {
  where: ExperienceWhereUniqueInput
  update: ExperienceUpdateWithoutLocationDataInput
  create: ExperienceCreateWithoutLocationInput
}

export interface MessageCreateManyWithoutToInput {
  create?: MessageCreateWithoutToInput[] | MessageCreateWithoutToInput
  connect?: MessageWhereUniqueInput[] | MessageWhereUniqueInput
}

export interface LocationUpsertWithoutPlaceInput {
  where: LocationWhereUniqueInput
  update: LocationUpdateWithoutPlaceDataInput
  create: LocationCreateWithoutPlaceInput
}

export interface ExperienceCreateOneWithoutLocationInput {
  create?: ExperienceCreateWithoutLocationInput
  connect?: ExperienceWhereUniqueInput
}

export interface PlaceUpsertWithoutBookingsInput {
  where: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutBookingsDataInput
  create: PlaceCreateWithoutBookingsInput
}

export interface PlaceCreateWithoutGuestRequirementsInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
  reviews?: ReviewCreateManyWithoutPlaceInput
  amenities: AmenitiesCreateOneWithoutPlaceInput
  host: UserCreateOneWithoutOwnedPlacesInput
  pricing: PricingCreateOneWithoutPlaceInput
  location: LocationCreateOneWithoutPlaceInput
  views: ViewsCreateOneWithoutPlaceInput
  policies?: PoliciesCreateOneWithoutPlaceInput
  houseRules?: HouseRulesCreateOneInput
  bookings?: BookingCreateManyWithoutPlaceInput
  pictures?: PictureCreateManyInput
}

export interface BookingUpsertWithoutBookeeInput {
  where: BookingWhereUniqueInput
  update: BookingUpdateWithoutBookeeDataInput
  create: BookingCreateWithoutBookeeInput
}

export interface PaymentWhereInput {
  AND?: PaymentWhereInput[] | PaymentWhereInput
  OR?: PaymentWhereInput[] | PaymentWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  createdAt?: DateTime
  createdAt_not?: DateTime
  createdAt_in?: DateTime[] | DateTime
  createdAt_not_in?: DateTime[] | DateTime
  createdAt_lt?: DateTime
  createdAt_lte?: DateTime
  createdAt_gt?: DateTime
  createdAt_gte?: DateTime
  serviceFee?: Float
  serviceFee_not?: Float
  serviceFee_in?: Float[] | Float
  serviceFee_not_in?: Float[] | Float
  serviceFee_lt?: Float
  serviceFee_lte?: Float
  serviceFee_gt?: Float
  serviceFee_gte?: Float
  placePrice?: Float
  placePrice_not?: Float
  placePrice_in?: Float[] | Float
  placePrice_not_in?: Float[] | Float
  placePrice_lt?: Float
  placePrice_lte?: Float
  placePrice_gt?: Float
  placePrice_gte?: Float
  totalPrice?: Float
  totalPrice_not?: Float
  totalPrice_in?: Float[] | Float
  totalPrice_not_in?: Float[] | Float
  totalPrice_lt?: Float
  totalPrice_lte?: Float
  totalPrice_gt?: Float
  totalPrice_gte?: Float
  booking?: BookingWhereInput
  paymentMethod?: PaymentAccountWhereInput
}

export interface UserUpsertWithoutOwnedPlacesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutOwnedPlacesDataInput
  create: UserCreateWithoutOwnedPlacesInput
}

export interface CitySubscriptionWhereInput {
  AND?: CitySubscriptionWhereInput[] | CitySubscriptionWhereInput
  OR?: CitySubscriptionWhereInput[] | CitySubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: CityWhereInput
}

export interface PlaceUpsertWithoutLocationInput {
  where: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutLocationDataInput
  create: PlaceCreateWithoutLocationInput
}

export interface NeighbourhoodWhereInput {
  AND?: NeighbourhoodWhereInput[] | NeighbourhoodWhereInput
  OR?: NeighbourhoodWhereInput[] | NeighbourhoodWhereInput
  id?: ID_Input
  id_not?: ID_Input
  id_in?: ID_Input[] | ID_Input
  id_not_in?: ID_Input[] | ID_Input
  id_lt?: ID_Input
  id_lte?: ID_Input
  id_gt?: ID_Input
  id_gte?: ID_Input
  id_contains?: ID_Input
  id_not_contains?: ID_Input
  id_starts_with?: ID_Input
  id_not_starts_with?: ID_Input
  id_ends_with?: ID_Input
  id_not_ends_with?: ID_Input
  name?: String
  name_not?: String
  name_in?: String[] | String
  name_not_in?: String[] | String
  name_lt?: String
  name_lte?: String
  name_gt?: String
  name_gte?: String
  name_contains?: String
  name_not_contains?: String
  name_starts_with?: String
  name_not_starts_with?: String
  name_ends_with?: String
  name_not_ends_with?: String
  slug?: String
  slug_not?: String
  slug_in?: String[] | String
  slug_not_in?: String[] | String
  slug_lt?: String
  slug_lte?: String
  slug_gt?: String
  slug_gte?: String
  slug_contains?: String
  slug_not_contains?: String
  slug_starts_with?: String
  slug_not_starts_with?: String
  slug_ends_with?: String
  slug_not_ends_with?: String
  featured?: Boolean
  featured_not?: Boolean
  popularity?: Int
  popularity_not?: Int
  popularity_in?: Int[] | Int
  popularity_not_in?: Int[] | Int
  popularity_lt?: Int
  popularity_lte?: Int
  popularity_gt?: Int
  popularity_gte?: Int
  locations_every?: LocationWhereInput
  locations_some?: LocationWhereInput
  locations_none?: LocationWhereInput
  homePreview?: PictureWhereInput
  city?: CityWhereInput
}

export interface LocationUpsertWithoutUserInput {
  where: LocationWhereUniqueInput
  update: LocationUpdateWithoutUserDataInput
  create: LocationCreateWithoutUserInput
}

export interface ViewsWhereUniqueInput {
  id?: ID_Input
}

export interface UserUpsertWithoutHostingExperiencesInput {
  where: UserWhereUniqueInput
  update: UserUpdateWithoutHostingExperiencesDataInput
  create: UserCreateWithoutHostingExperiencesInput
}

export interface RestaurantWhereUniqueInput {
  id?: ID_Input
}

export interface ExperienceUpsertWithoutReviewsInput {
  where: ExperienceWhereUniqueInput
  update: ExperienceUpdateWithoutReviewsDataInput
  create: ExperienceCreateWithoutReviewsInput
}

export interface PaymentAccountUpdateWithoutPaypalInput {
  where: PaymentAccountWhereUniqueInput
  data: PaymentAccountUpdateWithoutPaypalDataInput
}

export interface ReviewUpsertWithoutPlaceInput {
  where: ReviewWhereUniqueInput
  update: ReviewUpdateWithoutPlaceDataInput
  create: ReviewCreateWithoutPlaceInput
}

export interface ExperienceCategoryUpdateInput {
  mainColor?: String
  name?: String
  experience?: ExperienceUpdateOneWithoutCategoryInput
}

export interface PlaceUpsertWithoutHostInput {
  where: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutHostDataInput
  create: PlaceCreateWithoutHostInput
}

export interface UserCreateInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  ownedPlaces?: PlaceCreateManyWithoutHostInput
  location?: LocationCreateOneWithoutUserInput
  bookings?: BookingCreateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountCreateManyWithoutUserInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  notifications?: NotificationCreateManyWithoutUserInput
  profilePicture?: PictureCreateOneInput
  hostingExperiences?: ExperienceCreateManyWithoutHostInput
}

export interface PlaceUpdateInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription?: String
  description?: String
  slug?: String
  maxGuests?: Int
  numBedrooms?: Int
  numBeds?: Int
  numBaths?: Int
  popularity?: Int
  reviews?: ReviewUpdateManyWithoutPlaceInput
  amenities?: AmenitiesUpdateOneWithoutPlaceInput
  host?: UserUpdateOneWithoutOwnedPlacesInput
  pricing?: PricingUpdateOneWithoutPlaceInput
  location?: LocationUpdateOneWithoutPlaceInput
  views?: ViewsUpdateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsUpdateOneWithoutPlaceInput
  policies?: PoliciesUpdateOneWithoutPlaceInput
  houseRules?: HouseRulesUpdateOneInput
  bookings?: BookingUpdateManyWithoutPlaceInput
  pictures?: PictureUpdateManyInput
}

export interface PictureCreateInput {
  name: String
  size?: Int
  secret: String
  contentType: String
}

export interface PricingUpdateInput {
  monthlyDiscount?: Int
  weeklyDiscount?: Int
  perNight?: Int
  smartPricing?: Boolean
  basePrice?: Int
  averageWeekly?: Int
  averageMonthly?: Int
  cleaningFee?: Int
  securityDeposit?: Int
  extraGuests?: Int
  weekendPricing?: Int
  currency?: CURRENCY
  place?: PlaceUpdateOneWithoutPricingInput
}

export interface LocationCreateWithoutPlaceInput {
  lat: Float
  lng: Float
  address?: String
  directions?: String
  neighbourHood?: NeighbourhoodCreateOneWithoutLocationsInput
  user?: UserCreateOneWithoutLocationInput
  experience?: ExperienceCreateOneWithoutLocationInput
  restaurant?: RestaurantCreateOneWithoutLocationInput
}

export interface PlaceUpdateOneWithoutPricingInput {
  create?: PlaceCreateWithoutPricingInput
  connect?: PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutPricingInput
  upsert?: PlaceUpsertWithoutPricingInput
}

export interface NotificationCreateWithoutUserInput {
  type?: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

export interface PlaceUpdateWithoutPricingInput {
  where: PlaceWhereUniqueInput
  data: PlaceUpdateWithoutPricingDataInput
}

export interface PoliciesCreateOneWithoutPlaceInput {
  create?: PoliciesCreateWithoutPlaceInput
  connect?: PoliciesWhereUniqueInput
}

export interface PlaceUpdateWithoutPricingDataInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription?: String
  description?: String
  slug?: String
  maxGuests?: Int
  numBedrooms?: Int
  numBeds?: Int
  numBaths?: Int
  popularity?: Int
  reviews?: ReviewUpdateManyWithoutPlaceInput
  amenities?: AmenitiesUpdateOneWithoutPlaceInput
  host?: UserUpdateOneWithoutOwnedPlacesInput
  location?: LocationUpdateOneWithoutPlaceInput
  views?: ViewsUpdateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsUpdateOneWithoutPlaceInput
  policies?: PoliciesUpdateOneWithoutPlaceInput
  houseRules?: HouseRulesUpdateOneInput
  bookings?: BookingUpdateManyWithoutPlaceInput
  pictures?: PictureUpdateManyInput
}

export interface PaypalInformationCreateOneWithoutPaymentAccountInput {
  create?: PaypalInformationCreateWithoutPaymentAccountInput
  connect?: PaypalInformationWhereUniqueInput
}

export interface PlaceUpsertWithoutPricingInput {
  where: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutPricingDataInput
  create: PlaceCreateWithoutPricingInput
}

export interface ViewsCreateInput {
  lastWeek: Int
  place: PlaceCreateOneWithoutViewsInput
}

export interface GuestRequirementsUpdateInput {
  govIssuedId?: Boolean
  recommendationsFromOtherHosts?: Boolean
  guestTripInformation?: Boolean
  place?: PlaceUpdateOneWithoutGuestRequirementsInput
}

export interface GuestRequirementsSubscriptionWhereInput {
  AND?: GuestRequirementsSubscriptionWhereInput[] | GuestRequirementsSubscriptionWhereInput
  OR?: GuestRequirementsSubscriptionWhereInput[] | GuestRequirementsSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: GuestRequirementsWhereInput
}

export interface PlaceUpdateOneWithoutGuestRequirementsInput {
  create?: PlaceCreateWithoutGuestRequirementsInput
  connect?: PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutGuestRequirementsInput
  upsert?: PlaceUpsertWithoutGuestRequirementsInput
}

export interface ReviewWhereUniqueInput {
  id?: ID_Input
}

export interface PlaceUpdateWithoutGuestRequirementsInput {
  where: PlaceWhereUniqueInput
  data: PlaceUpdateWithoutGuestRequirementsDataInput
}

export interface PlaceUpdateWithoutAmenitiesDataInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription?: String
  description?: String
  slug?: String
  maxGuests?: Int
  numBedrooms?: Int
  numBeds?: Int
  numBaths?: Int
  popularity?: Int
  reviews?: ReviewUpdateManyWithoutPlaceInput
  host?: UserUpdateOneWithoutOwnedPlacesInput
  pricing?: PricingUpdateOneWithoutPlaceInput
  location?: LocationUpdateOneWithoutPlaceInput
  views?: ViewsUpdateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsUpdateOneWithoutPlaceInput
  policies?: PoliciesUpdateOneWithoutPlaceInput
  houseRules?: HouseRulesUpdateOneInput
  bookings?: BookingUpdateManyWithoutPlaceInput
  pictures?: PictureUpdateManyInput
}

export interface PlaceUpdateWithoutGuestRequirementsDataInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription?: String
  description?: String
  slug?: String
  maxGuests?: Int
  numBedrooms?: Int
  numBeds?: Int
  numBaths?: Int
  popularity?: Int
  reviews?: ReviewUpdateManyWithoutPlaceInput
  amenities?: AmenitiesUpdateOneWithoutPlaceInput
  host?: UserUpdateOneWithoutOwnedPlacesInput
  pricing?: PricingUpdateOneWithoutPlaceInput
  location?: LocationUpdateOneWithoutPlaceInput
  views?: ViewsUpdateOneWithoutPlaceInput
  policies?: PoliciesUpdateOneWithoutPlaceInput
  houseRules?: HouseRulesUpdateOneInput
  bookings?: BookingUpdateManyWithoutPlaceInput
  pictures?: PictureUpdateManyInput
}

export interface ExperienceCategoryCreateWithoutExperienceInput {
  mainColor?: String
  name: String
}

export interface PlaceUpsertWithoutGuestRequirementsInput {
  where: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutGuestRequirementsDataInput
  create: PlaceCreateWithoutGuestRequirementsInput
}

export interface BookingCreateWithoutPaymentInput {
  startDate: DateTime
  endDate: DateTime
  bookee: UserCreateOneWithoutBookingsInput
  place: PlaceCreateOneWithoutBookingsInput
}

export interface PoliciesUpdateInput {
  checkInStartTime?: Float
  checkInEndTime?: Float
  checkoutTime?: Float
  place?: PlaceUpdateOneWithoutPoliciesInput
}

export interface PaymentAccountCreateOneWithoutPaymentsInput {
  create?: PaymentAccountCreateWithoutPaymentsInput
  connect?: PaymentAccountWhereUniqueInput
}

export interface PlaceUpdateOneWithoutPoliciesInput {
  create?: PlaceCreateWithoutPoliciesInput
  connect?: PlaceWhereUniqueInput
  disconnect?: PlaceWhereUniqueInput
  delete?: PlaceWhereUniqueInput
  update?: PlaceUpdateWithoutPoliciesInput
  upsert?: PlaceUpsertWithoutPoliciesInput
}

export interface BookingSubscriptionWhereInput {
  AND?: BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput
  OR?: BookingSubscriptionWhereInput[] | BookingSubscriptionWhereInput
  mutation_in?: MutationType[] | MutationType
  updatedFields_contains?: String
  updatedFields_contains_every?: String[] | String
  updatedFields_contains_some?: String[] | String
  node?: BookingWhereInput
}

export interface PlaceUpdateWithoutPoliciesInput {
  where: PlaceWhereUniqueInput
  data: PlaceUpdateWithoutPoliciesDataInput
}

export interface MessageUpdateInput {
  deliveredAt?: DateTime
  readAt?: DateTime
  from?: UserUpdateOneWithoutSentMessagesInput
  to?: UserUpdateOneWithoutReceivedMessagesInput
}

export interface ViewsUpdateInput {
  lastWeek?: Int
  place?: PlaceUpdateOneWithoutViewsInput
}

export interface HouseRulesUpdateInput {
  suitableForChildren?: Boolean
  suitableForInfants?: Boolean
  petsAllowed?: Boolean
  smokingAllowed?: Boolean
  partiesAndEventsAllowed?: Boolean
  additionalRules?: String
}

export interface PlaceUpsertWithoutPoliciesInput {
  where: PlaceWhereUniqueInput
  update: PlaceUpdateWithoutPoliciesDataInput
  create: PlaceCreateWithoutPoliciesInput
}

export interface PlaceUpdateWithoutPoliciesDataInput {
  name?: String
  size?: PLACE_SIZES
  shortDescription?: String
  description?: String
  slug?: String
  maxGuests?: Int
  numBedrooms?: Int
  numBeds?: Int
  numBaths?: Int
  popularity?: Int
  reviews?: ReviewUpdateManyWithoutPlaceInput
  amenities?: AmenitiesUpdateOneWithoutPlaceInput
  host?: UserUpdateOneWithoutOwnedPlacesInput
  pricing?: PricingUpdateOneWithoutPlaceInput
  location?: LocationUpdateOneWithoutPlaceInput
  views?: ViewsUpdateOneWithoutPlaceInput
  guestRequirements?: GuestRequirementsUpdateOneWithoutPlaceInput
  houseRules?: HouseRulesUpdateOneInput
  bookings?: BookingUpdateManyWithoutPlaceInput
  pictures?: PictureUpdateManyInput
}

export interface LocationUpsertWithoutNeighbourHoodInput {
  where: LocationWhereUniqueInput
  update: LocationUpdateWithoutNeighbourHoodDataInput
  create: LocationCreateWithoutNeighbourHoodInput
}

export interface LocationUpdateWithoutRestaurantDataInput {
  lat?: Float
  lng?: Float
  address?: String
  directions?: String
  neighbourHood?: NeighbourhoodUpdateOneWithoutLocationsInput
  user?: UserUpdateOneWithoutLocationInput
  place?: PlaceUpdateOneWithoutLocationInput
  experience?: ExperienceUpdateOneWithoutLocationInput
}

export interface PlaceCreateOneWithoutPricingInput {
  create?: PlaceCreateWithoutPricingInput
  connect?: PlaceWhereUniqueInput
}

export interface ReviewCreateManyWithoutExperienceInput {
  create?: ReviewCreateWithoutExperienceInput[] | ReviewCreateWithoutExperienceInput
  connect?: ReviewWhereUniqueInput[] | ReviewWhereUniqueInput
}

export interface UserCreateWithoutOwnedPlacesInput {
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost?: Boolean
  location?: LocationCreateOneWithoutUserInput
  bookings?: BookingCreateManyWithoutBookeeInput
  paymentAccount?: PaymentAccountCreateManyWithoutUserInput
  sentMessages?: MessageCreateManyWithoutFromInput
  receivedMessages?: MessageCreateManyWithoutToInput
  notifications?: NotificationCreateManyWithoutUserInput
  profilePicture?: PictureCreateOneInput
  hostingExperiences?: ExperienceCreateManyWithoutHostInput
}

export interface Node {
  id: ID_Output
}

export interface RestaurantPreviousValues {
  id: ID_Output
  createdAt: DateTime
  title: String
  avgPricePerPerson: Int
  isCurated: Boolean
  slug: String
  popularity: Int
}

export interface PricingSubscriptionPayload {
  mutation: MutationType
  node?: Pricing
  updatedFields?: String[]
  previousValues?: PricingPreviousValues
}

export interface User extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost: Boolean
  ownedPlaces?: Place[]
  location?: Location
  bookings?: Booking[]
  paymentAccount?: PaymentAccount[]
  sentMessages?: Message[]
  receivedMessages?: Message[]
  notifications?: Notification[]
  profilePicture?: Picture
  hostingExperiences?: Experience[]
}

export interface PricingPreviousValues {
  id: ID_Output
  monthlyDiscount?: Int
  weeklyDiscount?: Int
  perNight: Int
  smartPricing: Boolean
  basePrice: Int
  averageWeekly: Int
  averageMonthly: Int
  cleaningFee?: Int
  securityDeposit?: Int
  extraGuests?: Int
  weekendPricing?: Int
  currency?: CURRENCY
}

export interface RestaurantConnection {
  pageInfo: PageInfo
  edges: RestaurantEdge[]
}

export interface CreditCardInformation extends Node {
  id: ID_Output
  createdAt: DateTime
  cardNumber: String
  expiresOnMonth: Int
  expiresOnYear: Int
  securityCode: String
  firstName: String
  lastName: String
  postalCode: String
  country: String
  paymentAccount?: PaymentAccount
}

export interface NotificationConnection {
  pageInfo: PageInfo
  edges: NotificationEdge[]
}

export interface GuestRequirementsSubscriptionPayload {
  mutation: MutationType
  node?: GuestRequirements
  updatedFields?: String[]
  previousValues?: GuestRequirementsPreviousValues
}

export interface MessageConnection {
  pageInfo: PageInfo
  edges: MessageEdge[]
}

export interface GuestRequirementsPreviousValues {
  id: ID_Output
  govIssuedId: Boolean
  recommendationsFromOtherHosts: Boolean
  guestTripInformation: Boolean
}

export interface CreditCardInformationConnection {
  pageInfo: PageInfo
  edges: CreditCardInformationEdge[]
}

export interface PaypalInformation extends Node {
  id: ID_Output
  createdAt: DateTime
  email: String
  paymentAccount: PaymentAccount
}

export interface PaypalInformationConnection {
  pageInfo: PageInfo
  edges: PaypalInformationEdge[]
}

export interface PoliciesSubscriptionPayload {
  mutation: MutationType
  node?: Policies
  updatedFields?: String[]
  previousValues?: PoliciesPreviousValues
}

export interface PaymentAccountConnection {
  pageInfo: PageInfo
  edges: PaymentAccountEdge[]
}

export interface PoliciesPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  checkInStartTime: Float
  checkInEndTime: Float
  checkoutTime: Float
}

export interface PaymentConnection {
  pageInfo: PageInfo
  edges: PaymentEdge[]
}

export interface PaymentAccount extends Node {
  id: ID_Output
  createdAt: DateTime
  type?: PAYMENT_PROVIDER
  user: User
  payments?: Payment[]
  paypal?: PaypalInformation
  creditcard?: CreditCardInformation
}

export interface BookingConnection {
  pageInfo: PageInfo
  edges: BookingEdge[]
}

export interface HouseRulesSubscriptionPayload {
  mutation: MutationType
  node?: HouseRules
  updatedFields?: String[]
  previousValues?: HouseRulesPreviousValues
}

export interface ReviewConnection {
  pageInfo: PageInfo
  edges: ReviewEdge[]
}

export interface HouseRulesPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  suitableForChildren?: Boolean
  suitableForInfants?: Boolean
  petsAllowed?: Boolean
  smokingAllowed?: Boolean
  partiesAndEventsAllowed?: Boolean
  additionalRules?: String
}

export interface AmenitiesConnection {
  pageInfo: PageInfo
  edges: AmenitiesEdge[]
}

export interface Payment extends Node {
  id: ID_Output
  createdAt: DateTime
  serviceFee: Float
  placePrice: Float
  totalPrice: Float
  booking: Booking
  paymentMethod: PaymentAccount
}

export interface ExperienceCategoryConnection {
  pageInfo: PageInfo
  edges: ExperienceCategoryEdge[]
}

export interface ViewsSubscriptionPayload {
  mutation: MutationType
  node?: Views
  updatedFields?: String[]
  previousValues?: ViewsPreviousValues
}

export interface ExperienceConnection {
  pageInfo: PageInfo
  edges: ExperienceEdge[]
}

export interface ViewsPreviousValues {
  id: ID_Output
  lastWeek: Int
}

export interface PictureConnection {
  pageInfo: PageInfo
  edges: PictureEdge[]
}

export interface Booking extends Node {
  id: ID_Output
  createdAt: DateTime
  bookee: User
  place: Place
  startDate: DateTime
  endDate: DateTime
  payment: Payment
}

export interface CityConnection {
  pageInfo: PageInfo
  edges: CityEdge[]
}

export interface LocationSubscriptionPayload {
  mutation: MutationType
  node?: Location
  updatedFields?: String[]
  previousValues?: LocationPreviousValues
}

export interface NeighbourhoodConnection {
  pageInfo: PageInfo
  edges: NeighbourhoodEdge[]
}

export interface LocationPreviousValues {
  id: ID_Output
  lat: Float
  lng: Float
  address?: String
  directions?: String
}

export interface LocationConnection {
  pageInfo: PageInfo
  edges: LocationEdge[]
}

export interface HouseRules extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  suitableForChildren?: Boolean
  suitableForInfants?: Boolean
  petsAllowed?: Boolean
  smokingAllowed?: Boolean
  partiesAndEventsAllowed?: Boolean
  additionalRules?: String
}

export interface ViewsConnection {
  pageInfo: PageInfo
  edges: ViewsEdge[]
}

export interface NeighbourhoodSubscriptionPayload {
  mutation: MutationType
  node?: Neighbourhood
  updatedFields?: String[]
  previousValues?: NeighbourhoodPreviousValues
}

export interface HouseRulesConnection {
  pageInfo: PageInfo
  edges: HouseRulesEdge[]
}

export interface NeighbourhoodPreviousValues {
  id: ID_Output
  name: String
  slug: String
  featured: Boolean
  popularity: Int
}

export interface PoliciesConnection {
  pageInfo: PageInfo
  edges: PoliciesEdge[]
}

export interface Policies extends Node {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  checkInStartTime: Float
  checkInEndTime: Float
  checkoutTime: Float
  place: Place
}

export interface GuestRequirementsConnection {
  pageInfo: PageInfo
  edges: GuestRequirementsEdge[]
}

export interface CitySubscriptionPayload {
  mutation: MutationType
  node?: City
  updatedFields?: String[]
  previousValues?: CityPreviousValues
}

export interface PricingConnection {
  pageInfo: PageInfo
  edges: PricingEdge[]
}

export interface CityPreviousValues {
  id: ID_Output
  name: String
}

export interface PlaceConnection {
  pageInfo: PageInfo
  edges: PlaceEdge[]
}

export interface GuestRequirements extends Node {
  id: ID_Output
  govIssuedId: Boolean
  recommendationsFromOtherHosts: Boolean
  guestTripInformation: Boolean
  place: Place
}

export interface PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor?: String
  endCursor?: String
}

export interface UserEdge {
  node: User
  cursor: String
}

export interface MessagePreviousValues {
  id: ID_Output
  createdAt: DateTime
  deliveredAt: DateTime
  readAt: DateTime
}

export interface UserConnection {
  pageInfo: PageInfo
  edges: UserEdge[]
}

export interface PictureSubscriptionPayload {
  mutation: MutationType
  node?: Picture
  updatedFields?: String[]
  previousValues?: PicturePreviousValues
}

export interface Review extends Node {
  id: ID_Output
  createdAt: DateTime
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  cleanliness: Int
  communication: Int
  place: Place
  experience?: Experience
}

export interface BatchPayload {
  count: Long
}

export interface PicturePreviousValues {
  id: ID_Output
  name: String
  size?: Int
  secret: String
  contentType: String
}

export interface NotificationPreviousValues {
  id: ID_Output
  createdAt: DateTime
  type?: NOTIFICATION_TYPE
  link: String
  readDate: DateTime
}

export interface Views extends Node {
  id: ID_Output
  lastWeek: Int
  place: Place
}

export interface UserSubscriptionPayload {
  mutation: MutationType
  node?: User
  updatedFields?: String[]
  previousValues?: UserPreviousValues
}

export interface ExperienceSubscriptionPayload {
  mutation: MutationType
  node?: Experience
  updatedFields?: String[]
  previousValues?: ExperiencePreviousValues
}

export interface Notification extends Node {
  id: ID_Output
  createdAt: DateTime
  type?: NOTIFICATION_TYPE
  user: User
  link: String
  readDate: DateTime
}

export interface ExperiencePreviousValues {
  id: ID_Output
  title: String
  pricePerPerson: Int
  popularity: Int
}

export interface PlacePreviousValues {
  id: ID_Output
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  popularity: Int
}

export interface Pricing extends Node {
  id: ID_Output
  place: Place
  monthlyDiscount?: Int
  weeklyDiscount?: Int
  perNight: Int
  smartPricing: Boolean
  basePrice: Int
  averageWeekly: Int
  averageMonthly: Int
  cleaningFee?: Int
  securityDeposit?: Int
  extraGuests?: Int
  weekendPricing?: Int
  currency?: CURRENCY
}

export interface RestaurantEdge {
  node: Restaurant
  cursor: String
}

export interface ExperienceCategorySubscriptionPayload {
  mutation: MutationType
  node?: ExperienceCategory
  updatedFields?: String[]
  previousValues?: ExperienceCategoryPreviousValues
}

export interface MessageEdge {
  node: Message
  cursor: String
}

export interface ExperienceCategoryPreviousValues {
  id: ID_Output
  mainColor: String
  name: String
}

export interface PaypalInformationEdge {
  node: PaypalInformation
  cursor: String
}

export interface Amenities extends Node {
  id: ID_Output
  place: Place
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  breakfast: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireplace: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  babyBath: Boolean
  babyMonitor: Boolean
  babysitterRecommendations: Boolean
  bathtub: Boolean
  changingTable: Boolean
  childrensBooksAndToys: Boolean
  childrensDinnerware: Boolean
  crib: Boolean
}

export interface PaymentEdge {
  node: Payment
  cursor: String
}

export interface AmenitiesSubscriptionPayload {
  mutation: MutationType
  node?: Amenities
  updatedFields?: String[]
  previousValues?: AmenitiesPreviousValues
}

export interface ReviewEdge {
  node: Review
  cursor: String
}

export interface AmenitiesPreviousValues {
  id: ID_Output
  elevator: Boolean
  petsAllowed: Boolean
  internet: Boolean
  kitchen: Boolean
  wirelessInternet: Boolean
  familyKidFriendly: Boolean
  freeParkingOnPremises: Boolean
  hotTub: Boolean
  pool: Boolean
  smokingAllowed: Boolean
  wheelchairAccessible: Boolean
  breakfast: Boolean
  cableTv: Boolean
  suitableForEvents: Boolean
  dryer: Boolean
  washer: Boolean
  indoorFireplace: Boolean
  tv: Boolean
  heating: Boolean
  hangers: Boolean
  iron: Boolean
  hairDryer: Boolean
  doorman: Boolean
  paidParkingOffPremises: Boolean
  freeParkingOnStreet: Boolean
  gym: Boolean
  airConditioning: Boolean
  shampoo: Boolean
  essentials: Boolean
  laptopFriendlyWorkspace: Boolean
  privateEntrance: Boolean
  buzzerWirelessIntercom: Boolean
  babyBath: Boolean
  babyMonitor: Boolean
  babysitterRecommendations: Boolean
  bathtub: Boolean
  changingTable: Boolean
  childrensBooksAndToys: Boolean
  childrensDinnerware: Boolean
  crib: Boolean
}

export interface ExperienceCategoryEdge {
  node: ExperienceCategory
  cursor: String
}

export interface Restaurant extends Node {
  id: ID_Output
  createdAt: DateTime
  title: String
  avgPricePerPerson: Int
  pictures?: Picture[]
  location: Location
  isCurated: Boolean
  slug: String
  popularity: Int
}

export interface PictureEdge {
  node: Picture
  cursor: String
}

export interface ReviewSubscriptionPayload {
  mutation: MutationType
  node?: Review
  updatedFields?: String[]
  previousValues?: ReviewPreviousValues
}

export interface NeighbourhoodEdge {
  node: Neighbourhood
  cursor: String
}

export interface ReviewPreviousValues {
  id: ID_Output
  createdAt: DateTime
  text: String
  stars: Int
  accuracy: Int
  location: Int
  checkIn: Int
  value: Int
  cleanliness: Int
  communication: Int
}

export interface ViewsEdge {
  node: Views
  cursor: String
}

export interface City extends Node {
  id: ID_Output
  name: String
  neighbourhoods?: Neighbourhood[]
}

export interface PoliciesEdge {
  node: Policies
  cursor: String
}

export interface BookingSubscriptionPayload {
  mutation: MutationType
  node?: Booking
  updatedFields?: String[]
  previousValues?: BookingPreviousValues
}

export interface PricingEdge {
  node: Pricing
  cursor: String
}

export interface BookingPreviousValues {
  id: ID_Output
  createdAt: DateTime
  startDate: DateTime
  endDate: DateTime
}

export interface RestaurantSubscriptionPayload {
  mutation: MutationType
  node?: Restaurant
  updatedFields?: String[]
  previousValues?: RestaurantPreviousValues
}

export interface Picture extends Node {
  id: ID_Output
  name: String
  size?: Int
  secret: String
  contentType: String
}

export interface NotificationSubscriptionPayload {
  mutation: MutationType
  node?: Notification
  updatedFields?: String[]
  previousValues?: NotificationPreviousValues
}

export interface PaymentSubscriptionPayload {
  mutation: MutationType
  node?: Payment
  updatedFields?: String[]
  previousValues?: PaymentPreviousValues
}

export interface PlaceSubscriptionPayload {
  mutation: MutationType
  node?: Place
  updatedFields?: String[]
  previousValues?: PlacePreviousValues
}

export interface PaymentPreviousValues {
  id: ID_Output
  createdAt: DateTime
  serviceFee: Float
  placePrice: Float
  totalPrice: Float
}

export interface NotificationEdge {
  node: Notification
  cursor: String
}

export interface Neighbourhood extends Node {
  id: ID_Output
  locations?: Location[]
  name: String
  slug: String
  homePreview?: Picture
  city: City
  featured: Boolean
  popularity: Int
}

export interface PaymentAccountEdge {
  node: PaymentAccount
  cursor: String
}

export interface PaymentAccountSubscriptionPayload {
  mutation: MutationType
  node?: PaymentAccount
  updatedFields?: String[]
  previousValues?: PaymentAccountPreviousValues
}

export interface AmenitiesEdge {
  node: Amenities
  cursor: String
}

export interface PaymentAccountPreviousValues {
  id: ID_Output
  createdAt: DateTime
  type?: PAYMENT_PROVIDER
}

export interface CityEdge {
  node: City
  cursor: String
}

export interface Location extends Node {
  id: ID_Output
  lat: Float
  lng: Float
  neighbourHood?: Neighbourhood
  user?: User
  place?: Place
  address?: String
  directions?: String
  experience?: Experience
  restaurant?: Restaurant
}

export interface HouseRulesEdge {
  node: HouseRules
  cursor: String
}

export interface PaypalInformationSubscriptionPayload {
  mutation: MutationType
  node?: PaypalInformation
  updatedFields?: String[]
  previousValues?: PaypalInformationPreviousValues
}

export interface PlaceEdge {
  node: Place
  cursor: String
}

export interface PaypalInformationPreviousValues {
  id: ID_Output
  createdAt: DateTime
  email: String
}

export interface UserPreviousValues {
  id: ID_Output
  createdAt: DateTime
  updatedAt: DateTime
  firstName: String
  lastName: String
  email: String
  password: String
  phone: String
  responseRate?: Float
  responseTime?: Int
  isSuperHost: Boolean
}

export interface ExperienceCategory extends Node {
  id: ID_Output
  mainColor: String
  name: String
  experience?: Experience
}

export interface CreditCardInformationEdge {
  node: CreditCardInformation
  cursor: String
}

export interface ExperienceEdge {
  node: Experience
  cursor: String
}

export interface MessageSubscriptionPayload {
  mutation: MutationType
  node?: Message
  updatedFields?: String[]
  previousValues?: MessagePreviousValues
}

export interface Experience extends Node {
  id: ID_Output
  category?: ExperienceCategory
  title: String
  host: User
  location: Location
  pricePerPerson: Int
  reviews?: Review[]
  preview: Picture
  popularity: Int
}

export interface CreditCardInformationPreviousValues {
  id: ID_Output
  createdAt: DateTime
  cardNumber: String
  expiresOnMonth: Int
  expiresOnYear: Int
  securityCode: String
  firstName: String
  lastName: String
  postalCode: String
  country: String
}

export interface CreditCardInformationSubscriptionPayload {
  mutation: MutationType
  node?: CreditCardInformation
  updatedFields?: String[]
  previousValues?: CreditCardInformationPreviousValues
}

export interface LocationEdge {
  node: Location
  cursor: String
}

export interface BookingEdge {
  node: Booking
  cursor: String
}

export interface Message extends Node {
  id: ID_Output
  createdAt: DateTime
  from: User
  to: User
  deliveredAt: DateTime
  readAt: DateTime
}

export interface Place extends Node {
  id: ID_Output
  name?: String
  size?: PLACE_SIZES
  shortDescription: String
  description: String
  slug: String
  maxGuests: Int
  numBedrooms: Int
  numBeds: Int
  numBaths: Int
  reviews?: Review[]
  amenities: Amenities
  host: User
  pricing: Pricing
  location: Location
  views: Views
  guestRequirements?: GuestRequirements
  policies?: Policies
  houseRules?: HouseRules
  bookings?: Booking[]
  pictures?: Picture[]
  popularity: Int
}

export interface GuestRequirementsEdge {
  node: GuestRequirements
  cursor: String
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number
export type ID_Output = string

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number

export type Long = string

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean

export type DateTime = string

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](http://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number

export interface Schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

export type Query = {
  users: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<User[]>
  places: (args: { where?: PlaceWhereInput, orderBy?: PlaceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Place[]>
  pricings: (args: { where?: PricingWhereInput, orderBy?: PricingOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Pricing[]>
  guestRequirementses: (args: { where?: GuestRequirementsWhereInput, orderBy?: GuestRequirementsOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<GuestRequirements[]>
  policieses: (args: { where?: PoliciesWhereInput, orderBy?: PoliciesOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Policies[]>
  houseRuleses: (args: { where?: HouseRulesWhereInput, orderBy?: HouseRulesOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<HouseRules[]>
  viewses: (args: { where?: ViewsWhereInput, orderBy?: ViewsOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Views[]>
  locations: (args: { where?: LocationWhereInput, orderBy?: LocationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Location[]>
  neighbourhoods: (args: { where?: NeighbourhoodWhereInput, orderBy?: NeighbourhoodOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Neighbourhood[]>
  cities: (args: { where?: CityWhereInput, orderBy?: CityOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<City[]>
  pictures: (args: { where?: PictureWhereInput, orderBy?: PictureOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Picture[]>
  experiences: (args: { where?: ExperienceWhereInput, orderBy?: ExperienceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Experience[]>
  experienceCategories: (args: { where?: ExperienceCategoryWhereInput, orderBy?: ExperienceCategoryOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ExperienceCategory[]>
  amenitieses: (args: { where?: AmenitiesWhereInput, orderBy?: AmenitiesOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Amenities[]>
  reviews: (args: { where?: ReviewWhereInput, orderBy?: ReviewOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Review[]>
  bookings: (args: { where?: BookingWhereInput, orderBy?: BookingOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Booking[]>
  payments: (args: { where?: PaymentWhereInput, orderBy?: PaymentOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Payment[]>
  paymentAccounts: (args: { where?: PaymentAccountWhereInput, orderBy?: PaymentAccountOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PaymentAccount[]>
  paypalInformations: (args: { where?: PaypalInformationWhereInput, orderBy?: PaypalInformationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PaypalInformation[]>
  creditCardInformations: (args: { where?: CreditCardInformationWhereInput, orderBy?: CreditCardInformationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<CreditCardInformation[]>
  messages: (args: { where?: MessageWhereInput, orderBy?: MessageOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Message[]>
  notifications: (args: { where?: NotificationWhereInput, orderBy?: NotificationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Notification[]>
  restaurants: (args: { where?: RestaurantWhereInput, orderBy?: RestaurantOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<Restaurant[]>
  user: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  place: (args: { where: PlaceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Place | null>
  pricing: (args: { where: PricingWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Pricing | null>
  guestRequirements: (args: { where: GuestRequirementsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<GuestRequirements | null>
  policies: (args: { where: PoliciesWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Policies | null>
  houseRules: (args: { where: HouseRulesWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<HouseRules | null>
  views: (args: { where: ViewsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Views | null>
  location: (args: { where: LocationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Location | null>
  neighbourhood: (args: { where: NeighbourhoodWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Neighbourhood | null>
  city: (args: { where: CityWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<City | null>
  picture: (args: { where: PictureWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Picture | null>
  experience: (args: { where: ExperienceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Experience | null>
  experienceCategory: (args: { where: ExperienceCategoryWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<ExperienceCategory | null>
  amenities: (args: { where: AmenitiesWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Amenities | null>
  review: (args: { where: ReviewWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Review | null>
  booking: (args: { where: BookingWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Booking | null>
  payment: (args: { where: PaymentWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Payment | null>
  paymentAccount: (args: { where: PaymentAccountWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<PaymentAccount | null>
  paypalInformation: (args: { where: PaypalInformationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<PaypalInformation | null>
  creditCardInformation: (args: { where: CreditCardInformationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<CreditCardInformation | null>
  message: (args: { where: MessageWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Message | null>
  notification: (args: { where: NotificationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Notification | null>
  restaurant: (args: { where: RestaurantWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Restaurant | null>
  usersConnection: (args: { where?: UserWhereInput, orderBy?: UserOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<UserConnection>
  placesConnection: (args: { where?: PlaceWhereInput, orderBy?: PlaceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PlaceConnection>
  pricingsConnection: (args: { where?: PricingWhereInput, orderBy?: PricingOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PricingConnection>
  guestRequirementsesConnection: (args: { where?: GuestRequirementsWhereInput, orderBy?: GuestRequirementsOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<GuestRequirementsConnection>
  policiesesConnection: (args: { where?: PoliciesWhereInput, orderBy?: PoliciesOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PoliciesConnection>
  houseRulesesConnection: (args: { where?: HouseRulesWhereInput, orderBy?: HouseRulesOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<HouseRulesConnection>
  viewsesConnection: (args: { where?: ViewsWhereInput, orderBy?: ViewsOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ViewsConnection>
  locationsConnection: (args: { where?: LocationWhereInput, orderBy?: LocationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<LocationConnection>
  neighbourhoodsConnection: (args: { where?: NeighbourhoodWhereInput, orderBy?: NeighbourhoodOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<NeighbourhoodConnection>
  citiesConnection: (args: { where?: CityWhereInput, orderBy?: CityOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<CityConnection>
  picturesConnection: (args: { where?: PictureWhereInput, orderBy?: PictureOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PictureConnection>
  experiencesConnection: (args: { where?: ExperienceWhereInput, orderBy?: ExperienceOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ExperienceConnection>
  experienceCategoriesConnection: (args: { where?: ExperienceCategoryWhereInput, orderBy?: ExperienceCategoryOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ExperienceCategoryConnection>
  amenitiesesConnection: (args: { where?: AmenitiesWhereInput, orderBy?: AmenitiesOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<AmenitiesConnection>
  reviewsConnection: (args: { where?: ReviewWhereInput, orderBy?: ReviewOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<ReviewConnection>
  bookingsConnection: (args: { where?: BookingWhereInput, orderBy?: BookingOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<BookingConnection>
  paymentsConnection: (args: { where?: PaymentWhereInput, orderBy?: PaymentOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PaymentConnection>
  paymentAccountsConnection: (args: { where?: PaymentAccountWhereInput, orderBy?: PaymentAccountOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PaymentAccountConnection>
  paypalInformationsConnection: (args: { where?: PaypalInformationWhereInput, orderBy?: PaypalInformationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<PaypalInformationConnection>
  creditCardInformationsConnection: (args: { where?: CreditCardInformationWhereInput, orderBy?: CreditCardInformationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<CreditCardInformationConnection>
  messagesConnection: (args: { where?: MessageWhereInput, orderBy?: MessageOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<MessageConnection>
  notificationsConnection: (args: { where?: NotificationWhereInput, orderBy?: NotificationOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<NotificationConnection>
  restaurantsConnection: (args: { where?: RestaurantWhereInput, orderBy?: RestaurantOrderByInput, skip?: Int, after?: String, before?: String, first?: Int, last?: Int }, info?: GraphQLResolveInfo | string) => Promise<RestaurantConnection>
  node: (args: { id: ID_Output }, info?: GraphQLResolveInfo | string) => Promise<Node | null>
}

export type Mutation = {
  createUser: (args: { data: UserCreateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  createPlace: (args: { data: PlaceCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Place>
  createPricing: (args: { data: PricingCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Pricing>
  createGuestRequirements: (args: { data: GuestRequirementsCreateInput }, info?: GraphQLResolveInfo | string) => Promise<GuestRequirements>
  createPolicies: (args: { data: PoliciesCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Policies>
  createHouseRules: (args: { data: HouseRulesCreateInput }, info?: GraphQLResolveInfo | string) => Promise<HouseRules>
  createViews: (args: { data: ViewsCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Views>
  createLocation: (args: { data: LocationCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Location>
  createNeighbourhood: (args: { data: NeighbourhoodCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Neighbourhood>
  createCity: (args: { data: CityCreateInput }, info?: GraphQLResolveInfo | string) => Promise<City>
  createPicture: (args: { data: PictureCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Picture>
  createExperience: (args: { data: ExperienceCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Experience>
  createExperienceCategory: (args: { data: ExperienceCategoryCreateInput }, info?: GraphQLResolveInfo | string) => Promise<ExperienceCategory>
  createAmenities: (args: { data: AmenitiesCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Amenities>
  createReview: (args: { data: ReviewCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Review>
  createBooking: (args: { data: BookingCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Booking>
  createPayment: (args: { data: PaymentCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Payment>
  createPaymentAccount: (args: { data: PaymentAccountCreateInput }, info?: GraphQLResolveInfo | string) => Promise<PaymentAccount>
  createPaypalInformation: (args: { data: PaypalInformationCreateInput }, info?: GraphQLResolveInfo | string) => Promise<PaypalInformation>
  createCreditCardInformation: (args: { data: CreditCardInformationCreateInput }, info?: GraphQLResolveInfo | string) => Promise<CreditCardInformation>
  createMessage: (args: { data: MessageCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Message>
  createNotification: (args: { data: NotificationCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Notification>
  createRestaurant: (args: { data: RestaurantCreateInput }, info?: GraphQLResolveInfo | string) => Promise<Restaurant>
  updateUser: (args: { data: UserUpdateInput, where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  updatePlace: (args: { data: PlaceUpdateInput, where: PlaceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Place | null>
  updatePricing: (args: { data: PricingUpdateInput, where: PricingWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Pricing | null>
  updateGuestRequirements: (args: { data: GuestRequirementsUpdateInput, where: GuestRequirementsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<GuestRequirements | null>
  updatePolicies: (args: { data: PoliciesUpdateInput, where: PoliciesWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Policies | null>
  updateHouseRules: (args: { data: HouseRulesUpdateInput, where: HouseRulesWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<HouseRules | null>
  updateViews: (args: { data: ViewsUpdateInput, where: ViewsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Views | null>
  updateLocation: (args: { data: LocationUpdateInput, where: LocationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Location | null>
  updateNeighbourhood: (args: { data: NeighbourhoodUpdateInput, where: NeighbourhoodWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Neighbourhood | null>
  updateCity: (args: { data: CityUpdateInput, where: CityWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<City | null>
  updatePicture: (args: { data: PictureUpdateInput, where: PictureWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Picture | null>
  updateExperience: (args: { data: ExperienceUpdateInput, where: ExperienceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Experience | null>
  updateExperienceCategory: (args: { data: ExperienceCategoryUpdateInput, where: ExperienceCategoryWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<ExperienceCategory | null>
  updateAmenities: (args: { data: AmenitiesUpdateInput, where: AmenitiesWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Amenities | null>
  updateReview: (args: { data: ReviewUpdateInput, where: ReviewWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Review | null>
  updateBooking: (args: { data: BookingUpdateInput, where: BookingWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Booking | null>
  updatePayment: (args: { data: PaymentUpdateInput, where: PaymentWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Payment | null>
  updatePaymentAccount: (args: { data: PaymentAccountUpdateInput, where: PaymentAccountWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<PaymentAccount | null>
  updatePaypalInformation: (args: { data: PaypalInformationUpdateInput, where: PaypalInformationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<PaypalInformation | null>
  updateCreditCardInformation: (args: { data: CreditCardInformationUpdateInput, where: CreditCardInformationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<CreditCardInformation | null>
  updateMessage: (args: { data: MessageUpdateInput, where: MessageWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Message | null>
  updateNotification: (args: { data: NotificationUpdateInput, where: NotificationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Notification | null>
  updateRestaurant: (args: { data: RestaurantUpdateInput, where: RestaurantWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Restaurant | null>
  deleteUser: (args: { where: UserWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<User | null>
  deletePlace: (args: { where: PlaceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Place | null>
  deletePricing: (args: { where: PricingWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Pricing | null>
  deleteGuestRequirements: (args: { where: GuestRequirementsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<GuestRequirements | null>
  deletePolicies: (args: { where: PoliciesWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Policies | null>
  deleteHouseRules: (args: { where: HouseRulesWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<HouseRules | null>
  deleteViews: (args: { where: ViewsWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Views | null>
  deleteLocation: (args: { where: LocationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Location | null>
  deleteNeighbourhood: (args: { where: NeighbourhoodWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Neighbourhood | null>
  deleteCity: (args: { where: CityWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<City | null>
  deletePicture: (args: { where: PictureWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Picture | null>
  deleteExperience: (args: { where: ExperienceWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Experience | null>
  deleteExperienceCategory: (args: { where: ExperienceCategoryWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<ExperienceCategory | null>
  deleteAmenities: (args: { where: AmenitiesWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Amenities | null>
  deleteReview: (args: { where: ReviewWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Review | null>
  deleteBooking: (args: { where: BookingWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Booking | null>
  deletePayment: (args: { where: PaymentWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Payment | null>
  deletePaymentAccount: (args: { where: PaymentAccountWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<PaymentAccount | null>
  deletePaypalInformation: (args: { where: PaypalInformationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<PaypalInformation | null>
  deleteCreditCardInformation: (args: { where: CreditCardInformationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<CreditCardInformation | null>
  deleteMessage: (args: { where: MessageWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Message | null>
  deleteNotification: (args: { where: NotificationWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Notification | null>
  deleteRestaurant: (args: { where: RestaurantWhereUniqueInput }, info?: GraphQLResolveInfo | string) => Promise<Restaurant | null>
  upsertUser: (args: { where: UserWhereUniqueInput, create: UserCreateInput, update: UserUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<User>
  upsertPlace: (args: { where: PlaceWhereUniqueInput, create: PlaceCreateInput, update: PlaceUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Place>
  upsertPricing: (args: { where: PricingWhereUniqueInput, create: PricingCreateInput, update: PricingUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Pricing>
  upsertGuestRequirements: (args: { where: GuestRequirementsWhereUniqueInput, create: GuestRequirementsCreateInput, update: GuestRequirementsUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<GuestRequirements>
  upsertPolicies: (args: { where: PoliciesWhereUniqueInput, create: PoliciesCreateInput, update: PoliciesUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Policies>
  upsertHouseRules: (args: { where: HouseRulesWhereUniqueInput, create: HouseRulesCreateInput, update: HouseRulesUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<HouseRules>
  upsertViews: (args: { where: ViewsWhereUniqueInput, create: ViewsCreateInput, update: ViewsUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Views>
  upsertLocation: (args: { where: LocationWhereUniqueInput, create: LocationCreateInput, update: LocationUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Location>
  upsertNeighbourhood: (args: { where: NeighbourhoodWhereUniqueInput, create: NeighbourhoodCreateInput, update: NeighbourhoodUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Neighbourhood>
  upsertCity: (args: { where: CityWhereUniqueInput, create: CityCreateInput, update: CityUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<City>
  upsertPicture: (args: { where: PictureWhereUniqueInput, create: PictureCreateInput, update: PictureUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Picture>
  upsertExperience: (args: { where: ExperienceWhereUniqueInput, create: ExperienceCreateInput, update: ExperienceUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Experience>
  upsertExperienceCategory: (args: { where: ExperienceCategoryWhereUniqueInput, create: ExperienceCategoryCreateInput, update: ExperienceCategoryUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<ExperienceCategory>
  upsertAmenities: (args: { where: AmenitiesWhereUniqueInput, create: AmenitiesCreateInput, update: AmenitiesUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Amenities>
  upsertReview: (args: { where: ReviewWhereUniqueInput, create: ReviewCreateInput, update: ReviewUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Review>
  upsertBooking: (args: { where: BookingWhereUniqueInput, create: BookingCreateInput, update: BookingUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Booking>
  upsertPayment: (args: { where: PaymentWhereUniqueInput, create: PaymentCreateInput, update: PaymentUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Payment>
  upsertPaymentAccount: (args: { where: PaymentAccountWhereUniqueInput, create: PaymentAccountCreateInput, update: PaymentAccountUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<PaymentAccount>
  upsertPaypalInformation: (args: { where: PaypalInformationWhereUniqueInput, create: PaypalInformationCreateInput, update: PaypalInformationUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<PaypalInformation>
  upsertCreditCardInformation: (args: { where: CreditCardInformationWhereUniqueInput, create: CreditCardInformationCreateInput, update: CreditCardInformationUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<CreditCardInformation>
  upsertMessage: (args: { where: MessageWhereUniqueInput, create: MessageCreateInput, update: MessageUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Message>
  upsertNotification: (args: { where: NotificationWhereUniqueInput, create: NotificationCreateInput, update: NotificationUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Notification>
  upsertRestaurant: (args: { where: RestaurantWhereUniqueInput, create: RestaurantCreateInput, update: RestaurantUpdateInput }, info?: GraphQLResolveInfo | string) => Promise<Restaurant>
  updateManyUsers: (args: { data: UserUpdateInput, where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPlaces: (args: { data: PlaceUpdateInput, where: PlaceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPricings: (args: { data: PricingUpdateInput, where: PricingWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyGuestRequirementses: (args: { data: GuestRequirementsUpdateInput, where: GuestRequirementsWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPolicieses: (args: { data: PoliciesUpdateInput, where: PoliciesWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyHouseRuleses: (args: { data: HouseRulesUpdateInput, where: HouseRulesWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyViewses: (args: { data: ViewsUpdateInput, where: ViewsWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyLocations: (args: { data: LocationUpdateInput, where: LocationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyNeighbourhoods: (args: { data: NeighbourhoodUpdateInput, where: NeighbourhoodWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyCities: (args: { data: CityUpdateInput, where: CityWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPictures: (args: { data: PictureUpdateInput, where: PictureWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyExperiences: (args: { data: ExperienceUpdateInput, where: ExperienceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyExperienceCategories: (args: { data: ExperienceCategoryUpdateInput, where: ExperienceCategoryWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyAmenitieses: (args: { data: AmenitiesUpdateInput, where: AmenitiesWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyReviews: (args: { data: ReviewUpdateInput, where: ReviewWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyBookings: (args: { data: BookingUpdateInput, where: BookingWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPayments: (args: { data: PaymentUpdateInput, where: PaymentWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPaymentAccounts: (args: { data: PaymentAccountUpdateInput, where: PaymentAccountWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyPaypalInformations: (args: { data: PaypalInformationUpdateInput, where: PaypalInformationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyCreditCardInformations: (args: { data: CreditCardInformationUpdateInput, where: CreditCardInformationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyMessages: (args: { data: MessageUpdateInput, where: MessageWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyNotifications: (args: { data: NotificationUpdateInput, where: NotificationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  updateManyRestaurants: (args: { data: RestaurantUpdateInput, where: RestaurantWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyUsers: (args: { where: UserWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPlaces: (args: { where: PlaceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPricings: (args: { where: PricingWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyGuestRequirementses: (args: { where: GuestRequirementsWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPolicieses: (args: { where: PoliciesWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyHouseRuleses: (args: { where: HouseRulesWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyViewses: (args: { where: ViewsWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyLocations: (args: { where: LocationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyNeighbourhoods: (args: { where: NeighbourhoodWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyCities: (args: { where: CityWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPictures: (args: { where: PictureWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyExperiences: (args: { where: ExperienceWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyExperienceCategories: (args: { where: ExperienceCategoryWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyAmenitieses: (args: { where: AmenitiesWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyReviews: (args: { where: ReviewWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyBookings: (args: { where: BookingWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPayments: (args: { where: PaymentWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPaymentAccounts: (args: { where: PaymentAccountWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyPaypalInformations: (args: { where: PaypalInformationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyCreditCardInformations: (args: { where: CreditCardInformationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyMessages: (args: { where: MessageWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyNotifications: (args: { where: NotificationWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  deleteManyRestaurants: (args: { where: RestaurantWhereInput }, info?: GraphQLResolveInfo | string) => Promise<BatchPayload>
  resetData: (args: {}, info?: GraphQLResolveInfo | string) => Promise<Boolean | null>
}

export type Subscription = {
  user: (args: { where?: UserSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<UserSubscriptionPayload>>
  place: (args: { where?: PlaceSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PlaceSubscriptionPayload>>
  pricing: (args: { where?: PricingSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PricingSubscriptionPayload>>
  guestRequirements: (args: { where?: GuestRequirementsSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<GuestRequirementsSubscriptionPayload>>
  policies: (args: { where?: PoliciesSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PoliciesSubscriptionPayload>>
  houseRules: (args: { where?: HouseRulesSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<HouseRulesSubscriptionPayload>>
  views: (args: { where?: ViewsSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ViewsSubscriptionPayload>>
  location: (args: { where?: LocationSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<LocationSubscriptionPayload>>
  neighbourhood: (args: { where?: NeighbourhoodSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<NeighbourhoodSubscriptionPayload>>
  city: (args: { where?: CitySubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<CitySubscriptionPayload>>
  picture: (args: { where?: PictureSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PictureSubscriptionPayload>>
  experience: (args: { where?: ExperienceSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ExperienceSubscriptionPayload>>
  experienceCategory: (args: { where?: ExperienceCategorySubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ExperienceCategorySubscriptionPayload>>
  amenities: (args: { where?: AmenitiesSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<AmenitiesSubscriptionPayload>>
  review: (args: { where?: ReviewSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<ReviewSubscriptionPayload>>
  booking: (args: { where?: BookingSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<BookingSubscriptionPayload>>
  payment: (args: { where?: PaymentSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PaymentSubscriptionPayload>>
  paymentAccount: (args: { where?: PaymentAccountSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PaymentAccountSubscriptionPayload>>
  paypalInformation: (args: { where?: PaypalInformationSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<PaypalInformationSubscriptionPayload>>
  creditCardInformation: (args: { where?: CreditCardInformationSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<CreditCardInformationSubscriptionPayload>>
  message: (args: { where?: MessageSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<MessageSubscriptionPayload>>
  notification: (args: { where?: NotificationSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<NotificationSubscriptionPayload>>
  restaurant: (args: { where?: RestaurantSubscriptionWhereInput }, infoOrQuery?: GraphQLResolveInfo | string) => Promise<AsyncIterator<RestaurantSubscriptionPayload>>
}

export class Graphcool extends BaseGraphcool {
  
  constructor({ endpoint, secret, fragmentReplacements, debug }: BaseGraphcoolOptions) {
    super({ typeDefs, endpoint, secret, fragmentReplacements, debug });
  }

  exists = {
    User: (where: UserWhereInput): Promise<boolean> => super.existsDelegate('query', 'users', { where }, {}, '{ id }'),
    Place: (where: PlaceWhereInput): Promise<boolean> => super.existsDelegate('query', 'places', { where }, {}, '{ id }'),
    Pricing: (where: PricingWhereInput): Promise<boolean> => super.existsDelegate('query', 'pricings', { where }, {}, '{ id }'),
    GuestRequirements: (where: GuestRequirementsWhereInput): Promise<boolean> => super.existsDelegate('query', 'guestRequirementses', { where }, {}, '{ id }'),
    Policies: (where: PoliciesWhereInput): Promise<boolean> => super.existsDelegate('query', 'policieses', { where }, {}, '{ id }'),
    HouseRules: (where: HouseRulesWhereInput): Promise<boolean> => super.existsDelegate('query', 'houseRuleses', { where }, {}, '{ id }'),
    Views: (where: ViewsWhereInput): Promise<boolean> => super.existsDelegate('query', 'viewses', { where }, {}, '{ id }'),
    Location: (where: LocationWhereInput): Promise<boolean> => super.existsDelegate('query', 'locations', { where }, {}, '{ id }'),
    Neighbourhood: (where: NeighbourhoodWhereInput): Promise<boolean> => super.existsDelegate('query', 'neighbourhoods', { where }, {}, '{ id }'),
    City: (where: CityWhereInput): Promise<boolean> => super.existsDelegate('query', 'cities', { where }, {}, '{ id }'),
    Picture: (where: PictureWhereInput): Promise<boolean> => super.existsDelegate('query', 'pictures', { where }, {}, '{ id }'),
    Experience: (where: ExperienceWhereInput): Promise<boolean> => super.existsDelegate('query', 'experiences', { where }, {}, '{ id }'),
    ExperienceCategory: (where: ExperienceCategoryWhereInput): Promise<boolean> => super.existsDelegate('query', 'experienceCategories', { where }, {}, '{ id }'),
    Amenities: (where: AmenitiesWhereInput): Promise<boolean> => super.existsDelegate('query', 'amenitieses', { where }, {}, '{ id }'),
    Review: (where: ReviewWhereInput): Promise<boolean> => super.existsDelegate('query', 'reviews', { where }, {}, '{ id }'),
    Booking: (where: BookingWhereInput): Promise<boolean> => super.existsDelegate('query', 'bookings', { where }, {}, '{ id }'),
    Payment: (where: PaymentWhereInput): Promise<boolean> => super.existsDelegate('query', 'payments', { where }, {}, '{ id }'),
    PaymentAccount: (where: PaymentAccountWhereInput): Promise<boolean> => super.existsDelegate('query', 'paymentAccounts', { where }, {}, '{ id }'),
    PaypalInformation: (where: PaypalInformationWhereInput): Promise<boolean> => super.existsDelegate('query', 'paypalInformations', { where }, {}, '{ id }'),
    CreditCardInformation: (where: CreditCardInformationWhereInput): Promise<boolean> => super.existsDelegate('query', 'creditCardInformations', { where }, {}, '{ id }'),
    Message: (where: MessageWhereInput): Promise<boolean> => super.existsDelegate('query', 'messages', { where }, {}, '{ id }'),
    Notification: (where: NotificationWhereInput): Promise<boolean> => super.existsDelegate('query', 'notifications', { where }, {}, '{ id }'),
    Restaurant: (where: RestaurantWhereInput): Promise<boolean> => super.existsDelegate('query', 'restaurants', { where }, {}, '{ id }')
  }

  query: Query = {
    users: (args, info): Promise<User[]> => super.delegate('query', 'users', args, {}, info),
    places: (args, info): Promise<Place[]> => super.delegate('query', 'places', args, {}, info),
    pricings: (args, info): Promise<Pricing[]> => super.delegate('query', 'pricings', args, {}, info),
    guestRequirementses: (args, info): Promise<GuestRequirements[]> => super.delegate('query', 'guestRequirementses', args, {}, info),
    policieses: (args, info): Promise<Policies[]> => super.delegate('query', 'policieses', args, {}, info),
    houseRuleses: (args, info): Promise<HouseRules[]> => super.delegate('query', 'houseRuleses', args, {}, info),
    viewses: (args, info): Promise<Views[]> => super.delegate('query', 'viewses', args, {}, info),
    locations: (args, info): Promise<Location[]> => super.delegate('query', 'locations', args, {}, info),
    neighbourhoods: (args, info): Promise<Neighbourhood[]> => super.delegate('query', 'neighbourhoods', args, {}, info),
    cities: (args, info): Promise<City[]> => super.delegate('query', 'cities', args, {}, info),
    pictures: (args, info): Promise<Picture[]> => super.delegate('query', 'pictures', args, {}, info),
    experiences: (args, info): Promise<Experience[]> => super.delegate('query', 'experiences', args, {}, info),
    experienceCategories: (args, info): Promise<ExperienceCategory[]> => super.delegate('query', 'experienceCategories', args, {}, info),
    amenitieses: (args, info): Promise<Amenities[]> => super.delegate('query', 'amenitieses', args, {}, info),
    reviews: (args, info): Promise<Review[]> => super.delegate('query', 'reviews', args, {}, info),
    bookings: (args, info): Promise<Booking[]> => super.delegate('query', 'bookings', args, {}, info),
    payments: (args, info): Promise<Payment[]> => super.delegate('query', 'payments', args, {}, info),
    paymentAccounts: (args, info): Promise<PaymentAccount[]> => super.delegate('query', 'paymentAccounts', args, {}, info),
    paypalInformations: (args, info): Promise<PaypalInformation[]> => super.delegate('query', 'paypalInformations', args, {}, info),
    creditCardInformations: (args, info): Promise<CreditCardInformation[]> => super.delegate('query', 'creditCardInformations', args, {}, info),
    messages: (args, info): Promise<Message[]> => super.delegate('query', 'messages', args, {}, info),
    notifications: (args, info): Promise<Notification[]> => super.delegate('query', 'notifications', args, {}, info),
    restaurants: (args, info): Promise<Restaurant[]> => super.delegate('query', 'restaurants', args, {}, info),
    user: (args, info): Promise<User | null> => super.delegate('query', 'user', args, {}, info),
    place: (args, info): Promise<Place | null> => super.delegate('query', 'place', args, {}, info),
    pricing: (args, info): Promise<Pricing | null> => super.delegate('query', 'pricing', args, {}, info),
    guestRequirements: (args, info): Promise<GuestRequirements | null> => super.delegate('query', 'guestRequirements', args, {}, info),
    policies: (args, info): Promise<Policies | null> => super.delegate('query', 'policies', args, {}, info),
    houseRules: (args, info): Promise<HouseRules | null> => super.delegate('query', 'houseRules', args, {}, info),
    views: (args, info): Promise<Views | null> => super.delegate('query', 'views', args, {}, info),
    location: (args, info): Promise<Location | null> => super.delegate('query', 'location', args, {}, info),
    neighbourhood: (args, info): Promise<Neighbourhood | null> => super.delegate('query', 'neighbourhood', args, {}, info),
    city: (args, info): Promise<City | null> => super.delegate('query', 'city', args, {}, info),
    picture: (args, info): Promise<Picture | null> => super.delegate('query', 'picture', args, {}, info),
    experience: (args, info): Promise<Experience | null> => super.delegate('query', 'experience', args, {}, info),
    experienceCategory: (args, info): Promise<ExperienceCategory | null> => super.delegate('query', 'experienceCategory', args, {}, info),
    amenities: (args, info): Promise<Amenities | null> => super.delegate('query', 'amenities', args, {}, info),
    review: (args, info): Promise<Review | null> => super.delegate('query', 'review', args, {}, info),
    booking: (args, info): Promise<Booking | null> => super.delegate('query', 'booking', args, {}, info),
    payment: (args, info): Promise<Payment | null> => super.delegate('query', 'payment', args, {}, info),
    paymentAccount: (args, info): Promise<PaymentAccount | null> => super.delegate('query', 'paymentAccount', args, {}, info),
    paypalInformation: (args, info): Promise<PaypalInformation | null> => super.delegate('query', 'paypalInformation', args, {}, info),
    creditCardInformation: (args, info): Promise<CreditCardInformation | null> => super.delegate('query', 'creditCardInformation', args, {}, info),
    message: (args, info): Promise<Message | null> => super.delegate('query', 'message', args, {}, info),
    notification: (args, info): Promise<Notification | null> => super.delegate('query', 'notification', args, {}, info),
    restaurant: (args, info): Promise<Restaurant | null> => super.delegate('query', 'restaurant', args, {}, info),
    usersConnection: (args, info): Promise<UserConnection> => super.delegate('query', 'usersConnection', args, {}, info),
    placesConnection: (args, info): Promise<PlaceConnection> => super.delegate('query', 'placesConnection', args, {}, info),
    pricingsConnection: (args, info): Promise<PricingConnection> => super.delegate('query', 'pricingsConnection', args, {}, info),
    guestRequirementsesConnection: (args, info): Promise<GuestRequirementsConnection> => super.delegate('query', 'guestRequirementsesConnection', args, {}, info),
    policiesesConnection: (args, info): Promise<PoliciesConnection> => super.delegate('query', 'policiesesConnection', args, {}, info),
    houseRulesesConnection: (args, info): Promise<HouseRulesConnection> => super.delegate('query', 'houseRulesesConnection', args, {}, info),
    viewsesConnection: (args, info): Promise<ViewsConnection> => super.delegate('query', 'viewsesConnection', args, {}, info),
    locationsConnection: (args, info): Promise<LocationConnection> => super.delegate('query', 'locationsConnection', args, {}, info),
    neighbourhoodsConnection: (args, info): Promise<NeighbourhoodConnection> => super.delegate('query', 'neighbourhoodsConnection', args, {}, info),
    citiesConnection: (args, info): Promise<CityConnection> => super.delegate('query', 'citiesConnection', args, {}, info),
    picturesConnection: (args, info): Promise<PictureConnection> => super.delegate('query', 'picturesConnection', args, {}, info),
    experiencesConnection: (args, info): Promise<ExperienceConnection> => super.delegate('query', 'experiencesConnection', args, {}, info),
    experienceCategoriesConnection: (args, info): Promise<ExperienceCategoryConnection> => super.delegate('query', 'experienceCategoriesConnection', args, {}, info),
    amenitiesesConnection: (args, info): Promise<AmenitiesConnection> => super.delegate('query', 'amenitiesesConnection', args, {}, info),
    reviewsConnection: (args, info): Promise<ReviewConnection> => super.delegate('query', 'reviewsConnection', args, {}, info),
    bookingsConnection: (args, info): Promise<BookingConnection> => super.delegate('query', 'bookingsConnection', args, {}, info),
    paymentsConnection: (args, info): Promise<PaymentConnection> => super.delegate('query', 'paymentsConnection', args, {}, info),
    paymentAccountsConnection: (args, info): Promise<PaymentAccountConnection> => super.delegate('query', 'paymentAccountsConnection', args, {}, info),
    paypalInformationsConnection: (args, info): Promise<PaypalInformationConnection> => super.delegate('query', 'paypalInformationsConnection', args, {}, info),
    creditCardInformationsConnection: (args, info): Promise<CreditCardInformationConnection> => super.delegate('query', 'creditCardInformationsConnection', args, {}, info),
    messagesConnection: (args, info): Promise<MessageConnection> => super.delegate('query', 'messagesConnection', args, {}, info),
    notificationsConnection: (args, info): Promise<NotificationConnection> => super.delegate('query', 'notificationsConnection', args, {}, info),
    restaurantsConnection: (args, info): Promise<RestaurantConnection> => super.delegate('query', 'restaurantsConnection', args, {}, info),
    node: (args, info): Promise<Node | null> => super.delegate('query', 'node', args, {}, info)
  }

  mutation: Mutation = {
    createUser: (args, info): Promise<User> => super.delegate('mutation', 'createUser', args, {}, info),
    createPlace: (args, info): Promise<Place> => super.delegate('mutation', 'createPlace', args, {}, info),
    createPricing: (args, info): Promise<Pricing> => super.delegate('mutation', 'createPricing', args, {}, info),
    createGuestRequirements: (args, info): Promise<GuestRequirements> => super.delegate('mutation', 'createGuestRequirements', args, {}, info),
    createPolicies: (args, info): Promise<Policies> => super.delegate('mutation', 'createPolicies', args, {}, info),
    createHouseRules: (args, info): Promise<HouseRules> => super.delegate('mutation', 'createHouseRules', args, {}, info),
    createViews: (args, info): Promise<Views> => super.delegate('mutation', 'createViews', args, {}, info),
    createLocation: (args, info): Promise<Location> => super.delegate('mutation', 'createLocation', args, {}, info),
    createNeighbourhood: (args, info): Promise<Neighbourhood> => super.delegate('mutation', 'createNeighbourhood', args, {}, info),
    createCity: (args, info): Promise<City> => super.delegate('mutation', 'createCity', args, {}, info),
    createPicture: (args, info): Promise<Picture> => super.delegate('mutation', 'createPicture', args, {}, info),
    createExperience: (args, info): Promise<Experience> => super.delegate('mutation', 'createExperience', args, {}, info),
    createExperienceCategory: (args, info): Promise<ExperienceCategory> => super.delegate('mutation', 'createExperienceCategory', args, {}, info),
    createAmenities: (args, info): Promise<Amenities> => super.delegate('mutation', 'createAmenities', args, {}, info),
    createReview: (args, info): Promise<Review> => super.delegate('mutation', 'createReview', args, {}, info),
    createBooking: (args, info): Promise<Booking> => super.delegate('mutation', 'createBooking', args, {}, info),
    createPayment: (args, info): Promise<Payment> => super.delegate('mutation', 'createPayment', args, {}, info),
    createPaymentAccount: (args, info): Promise<PaymentAccount> => super.delegate('mutation', 'createPaymentAccount', args, {}, info),
    createPaypalInformation: (args, info): Promise<PaypalInformation> => super.delegate('mutation', 'createPaypalInformation', args, {}, info),
    createCreditCardInformation: (args, info): Promise<CreditCardInformation> => super.delegate('mutation', 'createCreditCardInformation', args, {}, info),
    createMessage: (args, info): Promise<Message> => super.delegate('mutation', 'createMessage', args, {}, info),
    createNotification: (args, info): Promise<Notification> => super.delegate('mutation', 'createNotification', args, {}, info),
    createRestaurant: (args, info): Promise<Restaurant> => super.delegate('mutation', 'createRestaurant', args, {}, info),
    updateUser: (args, info): Promise<User | null> => super.delegate('mutation', 'updateUser', args, {}, info),
    updatePlace: (args, info): Promise<Place | null> => super.delegate('mutation', 'updatePlace', args, {}, info),
    updatePricing: (args, info): Promise<Pricing | null> => super.delegate('mutation', 'updatePricing', args, {}, info),
    updateGuestRequirements: (args, info): Promise<GuestRequirements | null> => super.delegate('mutation', 'updateGuestRequirements', args, {}, info),
    updatePolicies: (args, info): Promise<Policies | null> => super.delegate('mutation', 'updatePolicies', args, {}, info),
    updateHouseRules: (args, info): Promise<HouseRules | null> => super.delegate('mutation', 'updateHouseRules', args, {}, info),
    updateViews: (args, info): Promise<Views | null> => super.delegate('mutation', 'updateViews', args, {}, info),
    updateLocation: (args, info): Promise<Location | null> => super.delegate('mutation', 'updateLocation', args, {}, info),
    updateNeighbourhood: (args, info): Promise<Neighbourhood | null> => super.delegate('mutation', 'updateNeighbourhood', args, {}, info),
    updateCity: (args, info): Promise<City | null> => super.delegate('mutation', 'updateCity', args, {}, info),
    updatePicture: (args, info): Promise<Picture | null> => super.delegate('mutation', 'updatePicture', args, {}, info),
    updateExperience: (args, info): Promise<Experience | null> => super.delegate('mutation', 'updateExperience', args, {}, info),
    updateExperienceCategory: (args, info): Promise<ExperienceCategory | null> => super.delegate('mutation', 'updateExperienceCategory', args, {}, info),
    updateAmenities: (args, info): Promise<Amenities | null> => super.delegate('mutation', 'updateAmenities', args, {}, info),
    updateReview: (args, info): Promise<Review | null> => super.delegate('mutation', 'updateReview', args, {}, info),
    updateBooking: (args, info): Promise<Booking | null> => super.delegate('mutation', 'updateBooking', args, {}, info),
    updatePayment: (args, info): Promise<Payment | null> => super.delegate('mutation', 'updatePayment', args, {}, info),
    updatePaymentAccount: (args, info): Promise<PaymentAccount | null> => super.delegate('mutation', 'updatePaymentAccount', args, {}, info),
    updatePaypalInformation: (args, info): Promise<PaypalInformation | null> => super.delegate('mutation', 'updatePaypalInformation', args, {}, info),
    updateCreditCardInformation: (args, info): Promise<CreditCardInformation | null> => super.delegate('mutation', 'updateCreditCardInformation', args, {}, info),
    updateMessage: (args, info): Promise<Message | null> => super.delegate('mutation', 'updateMessage', args, {}, info),
    updateNotification: (args, info): Promise<Notification | null> => super.delegate('mutation', 'updateNotification', args, {}, info),
    updateRestaurant: (args, info): Promise<Restaurant | null> => super.delegate('mutation', 'updateRestaurant', args, {}, info),
    deleteUser: (args, info): Promise<User | null> => super.delegate('mutation', 'deleteUser', args, {}, info),
    deletePlace: (args, info): Promise<Place | null> => super.delegate('mutation', 'deletePlace', args, {}, info),
    deletePricing: (args, info): Promise<Pricing | null> => super.delegate('mutation', 'deletePricing', args, {}, info),
    deleteGuestRequirements: (args, info): Promise<GuestRequirements | null> => super.delegate('mutation', 'deleteGuestRequirements', args, {}, info),
    deletePolicies: (args, info): Promise<Policies | null> => super.delegate('mutation', 'deletePolicies', args, {}, info),
    deleteHouseRules: (args, info): Promise<HouseRules | null> => super.delegate('mutation', 'deleteHouseRules', args, {}, info),
    deleteViews: (args, info): Promise<Views | null> => super.delegate('mutation', 'deleteViews', args, {}, info),
    deleteLocation: (args, info): Promise<Location | null> => super.delegate('mutation', 'deleteLocation', args, {}, info),
    deleteNeighbourhood: (args, info): Promise<Neighbourhood | null> => super.delegate('mutation', 'deleteNeighbourhood', args, {}, info),
    deleteCity: (args, info): Promise<City | null> => super.delegate('mutation', 'deleteCity', args, {}, info),
    deletePicture: (args, info): Promise<Picture | null> => super.delegate('mutation', 'deletePicture', args, {}, info),
    deleteExperience: (args, info): Promise<Experience | null> => super.delegate('mutation', 'deleteExperience', args, {}, info),
    deleteExperienceCategory: (args, info): Promise<ExperienceCategory | null> => super.delegate('mutation', 'deleteExperienceCategory', args, {}, info),
    deleteAmenities: (args, info): Promise<Amenities | null> => super.delegate('mutation', 'deleteAmenities', args, {}, info),
    deleteReview: (args, info): Promise<Review | null> => super.delegate('mutation', 'deleteReview', args, {}, info),
    deleteBooking: (args, info): Promise<Booking | null> => super.delegate('mutation', 'deleteBooking', args, {}, info),
    deletePayment: (args, info): Promise<Payment | null> => super.delegate('mutation', 'deletePayment', args, {}, info),
    deletePaymentAccount: (args, info): Promise<PaymentAccount | null> => super.delegate('mutation', 'deletePaymentAccount', args, {}, info),
    deletePaypalInformation: (args, info): Promise<PaypalInformation | null> => super.delegate('mutation', 'deletePaypalInformation', args, {}, info),
    deleteCreditCardInformation: (args, info): Promise<CreditCardInformation | null> => super.delegate('mutation', 'deleteCreditCardInformation', args, {}, info),
    deleteMessage: (args, info): Promise<Message | null> => super.delegate('mutation', 'deleteMessage', args, {}, info),
    deleteNotification: (args, info): Promise<Notification | null> => super.delegate('mutation', 'deleteNotification', args, {}, info),
    deleteRestaurant: (args, info): Promise<Restaurant | null> => super.delegate('mutation', 'deleteRestaurant', args, {}, info),
    upsertUser: (args, info): Promise<User> => super.delegate('mutation', 'upsertUser', args, {}, info),
    upsertPlace: (args, info): Promise<Place> => super.delegate('mutation', 'upsertPlace', args, {}, info),
    upsertPricing: (args, info): Promise<Pricing> => super.delegate('mutation', 'upsertPricing', args, {}, info),
    upsertGuestRequirements: (args, info): Promise<GuestRequirements> => super.delegate('mutation', 'upsertGuestRequirements', args, {}, info),
    upsertPolicies: (args, info): Promise<Policies> => super.delegate('mutation', 'upsertPolicies', args, {}, info),
    upsertHouseRules: (args, info): Promise<HouseRules> => super.delegate('mutation', 'upsertHouseRules', args, {}, info),
    upsertViews: (args, info): Promise<Views> => super.delegate('mutation', 'upsertViews', args, {}, info),
    upsertLocation: (args, info): Promise<Location> => super.delegate('mutation', 'upsertLocation', args, {}, info),
    upsertNeighbourhood: (args, info): Promise<Neighbourhood> => super.delegate('mutation', 'upsertNeighbourhood', args, {}, info),
    upsertCity: (args, info): Promise<City> => super.delegate('mutation', 'upsertCity', args, {}, info),
    upsertPicture: (args, info): Promise<Picture> => super.delegate('mutation', 'upsertPicture', args, {}, info),
    upsertExperience: (args, info): Promise<Experience> => super.delegate('mutation', 'upsertExperience', args, {}, info),
    upsertExperienceCategory: (args, info): Promise<ExperienceCategory> => super.delegate('mutation', 'upsertExperienceCategory', args, {}, info),
    upsertAmenities: (args, info): Promise<Amenities> => super.delegate('mutation', 'upsertAmenities', args, {}, info),
    upsertReview: (args, info): Promise<Review> => super.delegate('mutation', 'upsertReview', args, {}, info),
    upsertBooking: (args, info): Promise<Booking> => super.delegate('mutation', 'upsertBooking', args, {}, info),
    upsertPayment: (args, info): Promise<Payment> => super.delegate('mutation', 'upsertPayment', args, {}, info),
    upsertPaymentAccount: (args, info): Promise<PaymentAccount> => super.delegate('mutation', 'upsertPaymentAccount', args, {}, info),
    upsertPaypalInformation: (args, info): Promise<PaypalInformation> => super.delegate('mutation', 'upsertPaypalInformation', args, {}, info),
    upsertCreditCardInformation: (args, info): Promise<CreditCardInformation> => super.delegate('mutation', 'upsertCreditCardInformation', args, {}, info),
    upsertMessage: (args, info): Promise<Message> => super.delegate('mutation', 'upsertMessage', args, {}, info),
    upsertNotification: (args, info): Promise<Notification> => super.delegate('mutation', 'upsertNotification', args, {}, info),
    upsertRestaurant: (args, info): Promise<Restaurant> => super.delegate('mutation', 'upsertRestaurant', args, {}, info),
    updateManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyUsers', args, {}, info),
    updateManyPlaces: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPlaces', args, {}, info),
    updateManyPricings: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPricings', args, {}, info),
    updateManyGuestRequirementses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyGuestRequirementses', args, {}, info),
    updateManyPolicieses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPolicieses', args, {}, info),
    updateManyHouseRuleses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyHouseRuleses', args, {}, info),
    updateManyViewses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyViewses', args, {}, info),
    updateManyLocations: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyLocations', args, {}, info),
    updateManyNeighbourhoods: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyNeighbourhoods', args, {}, info),
    updateManyCities: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyCities', args, {}, info),
    updateManyPictures: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPictures', args, {}, info),
    updateManyExperiences: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyExperiences', args, {}, info),
    updateManyExperienceCategories: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyExperienceCategories', args, {}, info),
    updateManyAmenitieses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyAmenitieses', args, {}, info),
    updateManyReviews: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyReviews', args, {}, info),
    updateManyBookings: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyBookings', args, {}, info),
    updateManyPayments: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPayments', args, {}, info),
    updateManyPaymentAccounts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPaymentAccounts', args, {}, info),
    updateManyPaypalInformations: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyPaypalInformations', args, {}, info),
    updateManyCreditCardInformations: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyCreditCardInformations', args, {}, info),
    updateManyMessages: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyMessages', args, {}, info),
    updateManyNotifications: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyNotifications', args, {}, info),
    updateManyRestaurants: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'updateManyRestaurants', args, {}, info),
    deleteManyUsers: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyUsers', args, {}, info),
    deleteManyPlaces: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPlaces', args, {}, info),
    deleteManyPricings: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPricings', args, {}, info),
    deleteManyGuestRequirementses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyGuestRequirementses', args, {}, info),
    deleteManyPolicieses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPolicieses', args, {}, info),
    deleteManyHouseRuleses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyHouseRuleses', args, {}, info),
    deleteManyViewses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyViewses', args, {}, info),
    deleteManyLocations: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyLocations', args, {}, info),
    deleteManyNeighbourhoods: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyNeighbourhoods', args, {}, info),
    deleteManyCities: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyCities', args, {}, info),
    deleteManyPictures: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPictures', args, {}, info),
    deleteManyExperiences: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyExperiences', args, {}, info),
    deleteManyExperienceCategories: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyExperienceCategories', args, {}, info),
    deleteManyAmenitieses: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyAmenitieses', args, {}, info),
    deleteManyReviews: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyReviews', args, {}, info),
    deleteManyBookings: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyBookings', args, {}, info),
    deleteManyPayments: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPayments', args, {}, info),
    deleteManyPaymentAccounts: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPaymentAccounts', args, {}, info),
    deleteManyPaypalInformations: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyPaypalInformations', args, {}, info),
    deleteManyCreditCardInformations: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyCreditCardInformations', args, {}, info),
    deleteManyMessages: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyMessages', args, {}, info),
    deleteManyNotifications: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyNotifications', args, {}, info),
    deleteManyRestaurants: (args, info): Promise<BatchPayload> => super.delegate('mutation', 'deleteManyRestaurants', args, {}, info),
    resetData: (args, info): Promise<Boolean | null> => super.delegate('mutation', 'resetData', args, {}, info)
  }

  subscription: Subscription = {
    user: (args, infoOrQuery): Promise<AsyncIterator<UserSubscriptionPayload>> => super.delegateSubscription('user', args, infoOrQuery),
    place: (args, infoOrQuery): Promise<AsyncIterator<PlaceSubscriptionPayload>> => super.delegateSubscription('place', args, infoOrQuery),
    pricing: (args, infoOrQuery): Promise<AsyncIterator<PricingSubscriptionPayload>> => super.delegateSubscription('pricing', args, infoOrQuery),
    guestRequirements: (args, infoOrQuery): Promise<AsyncIterator<GuestRequirementsSubscriptionPayload>> => super.delegateSubscription('guestRequirements', args, infoOrQuery),
    policies: (args, infoOrQuery): Promise<AsyncIterator<PoliciesSubscriptionPayload>> => super.delegateSubscription('policies', args, infoOrQuery),
    houseRules: (args, infoOrQuery): Promise<AsyncIterator<HouseRulesSubscriptionPayload>> => super.delegateSubscription('houseRules', args, infoOrQuery),
    views: (args, infoOrQuery): Promise<AsyncIterator<ViewsSubscriptionPayload>> => super.delegateSubscription('views', args, infoOrQuery),
    location: (args, infoOrQuery): Promise<AsyncIterator<LocationSubscriptionPayload>> => super.delegateSubscription('location', args, infoOrQuery),
    neighbourhood: (args, infoOrQuery): Promise<AsyncIterator<NeighbourhoodSubscriptionPayload>> => super.delegateSubscription('neighbourhood', args, infoOrQuery),
    city: (args, infoOrQuery): Promise<AsyncIterator<CitySubscriptionPayload>> => super.delegateSubscription('city', args, infoOrQuery),
    picture: (args, infoOrQuery): Promise<AsyncIterator<PictureSubscriptionPayload>> => super.delegateSubscription('picture', args, infoOrQuery),
    experience: (args, infoOrQuery): Promise<AsyncIterator<ExperienceSubscriptionPayload>> => super.delegateSubscription('experience', args, infoOrQuery),
    experienceCategory: (args, infoOrQuery): Promise<AsyncIterator<ExperienceCategorySubscriptionPayload>> => super.delegateSubscription('experienceCategory', args, infoOrQuery),
    amenities: (args, infoOrQuery): Promise<AsyncIterator<AmenitiesSubscriptionPayload>> => super.delegateSubscription('amenities', args, infoOrQuery),
    review: (args, infoOrQuery): Promise<AsyncIterator<ReviewSubscriptionPayload>> => super.delegateSubscription('review', args, infoOrQuery),
    booking: (args, infoOrQuery): Promise<AsyncIterator<BookingSubscriptionPayload>> => super.delegateSubscription('booking', args, infoOrQuery),
    payment: (args, infoOrQuery): Promise<AsyncIterator<PaymentSubscriptionPayload>> => super.delegateSubscription('payment', args, infoOrQuery),
    paymentAccount: (args, infoOrQuery): Promise<AsyncIterator<PaymentAccountSubscriptionPayload>> => super.delegateSubscription('paymentAccount', args, infoOrQuery),
    paypalInformation: (args, infoOrQuery): Promise<AsyncIterator<PaypalInformationSubscriptionPayload>> => super.delegateSubscription('paypalInformation', args, infoOrQuery),
    creditCardInformation: (args, infoOrQuery): Promise<AsyncIterator<CreditCardInformationSubscriptionPayload>> => super.delegateSubscription('creditCardInformation', args, infoOrQuery),
    message: (args, infoOrQuery): Promise<AsyncIterator<MessageSubscriptionPayload>> => super.delegateSubscription('message', args, infoOrQuery),
    notification: (args, infoOrQuery): Promise<AsyncIterator<NotificationSubscriptionPayload>> => super.delegateSubscription('notification', args, infoOrQuery),
    restaurant: (args, infoOrQuery): Promise<AsyncIterator<RestaurantSubscriptionPayload>> => super.delegateSubscription('restaurant', args, infoOrQuery)
  }
}
# source: http://localhost:4466
# timestamp: Mon Jun 11 2018 13:24:10 GMT+0200 (Central European Summer Time)

type AccommodationOption implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: AccommodationType!
  price: Float!
}

"""A connection to a list of items."""
type AccommodationOptionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AccommodationOptionEdge]!
  aggregate: AggregateAccommodationOption!
}

input AccommodationOptionCreateInput {
  type: AccommodationType!
  price: Float!
}

input AccommodationOptionCreateManyInput {
  create: [AccommodationOptionCreateInput!]
  connect: [AccommodationOptionWhereUniqueInput!]
}

"""An edge in a connection."""
type AccommodationOptionEdge {
  """The item at the end of the edge."""
  node: AccommodationOption!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AccommodationOptionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  type_ASC
  type_DESC
  price_ASC
  price_DESC
}

type AccommodationOptionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  type: AccommodationType!
  price: Float!
}

type AccommodationOptionSubscriptionPayload {
  mutation: MutationType!
  node: AccommodationOption
  updatedFields: [String!]
  previousValues: AccommodationOptionPreviousValues
}

input AccommodationOptionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccommodationOptionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccommodationOptionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccommodationOptionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AccommodationOptionWhereInput
}

input AccommodationOptionUpdateDataInput {
  type: AccommodationType
  price: Float
}

input AccommodationOptionUpdateInput {
  type: AccommodationType
  price: Float
}

input AccommodationOptionUpdateManyInput {
  create: [AccommodationOptionCreateInput!]
  connect: [AccommodationOptionWhereUniqueInput!]
  disconnect: [AccommodationOptionWhereUniqueInput!]
  delete: [AccommodationOptionWhereUniqueInput!]
  update: [AccommodationOptionUpdateWithWhereUniqueNestedInput!]
  upsert: [AccommodationOptionUpsertWithWhereUniqueNestedInput!]
}

input AccommodationOptionUpdateWithWhereUniqueNestedInput {
  where: AccommodationOptionWhereUniqueInput!
  data: AccommodationOptionUpdateDataInput!
}

input AccommodationOptionUpsertWithWhereUniqueNestedInput {
  where: AccommodationOptionWhereUniqueInput!
  update: AccommodationOptionUpdateDataInput!
  create: AccommodationOptionCreateInput!
}

input AccommodationOptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AccommodationOptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AccommodationOptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AccommodationOptionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  type: AccommodationType

  """All values that are not equal to given value."""
  type_not: AccommodationType

  """All values that are contained in given list."""
  type_in: [AccommodationType!]

  """All values that are not contained in given list."""
  type_not_in: [AccommodationType!]
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
}

input AccommodationOptionWhereUniqueInput {
  id: ID
}

enum AccommodationType {
  ROOM_ONLY
  BED_AND_BREAKFAST
  ONE_DINNER
  TWO_DINNERS
  THREE_DINNERS
  FOUR_DINNERS
  FIVE_DINNERS
  SIX_DINNERS
  SEVEN_DINNERS
}

type Agency implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  stripeAccountId: String
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  families(where: FamilyWhereInput, orderBy: FamilyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Family!]
  validatedBy(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution!]
}

"""A connection to a list of items."""
type AgencyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [AgencyEdge]!
  aggregate: AggregateAgency!
}

input AgencyCreateInput {
  name: String!
  stripeAccountId: String
  users: UserCreateManyWithoutAgencyInput
  families: FamilyCreateManyWithoutAgencyInput
  validatedBy: InstitutionCreateManyWithoutValidatesInput
}

input AgencyCreateManyWithoutValidatedByInput {
  create: [AgencyCreateWithoutValidatedByInput!]
  connect: [AgencyWhereUniqueInput!]
}

input AgencyCreateOneWithoutFamiliesInput {
  create: AgencyCreateWithoutFamiliesInput
  connect: AgencyWhereUniqueInput
}

input AgencyCreateOneWithoutUsersInput {
  create: AgencyCreateWithoutUsersInput
  connect: AgencyWhereUniqueInput
}

input AgencyCreateWithoutFamiliesInput {
  name: String!
  stripeAccountId: String
  users: UserCreateManyWithoutAgencyInput
  validatedBy: InstitutionCreateManyWithoutValidatesInput
}

input AgencyCreateWithoutUsersInput {
  name: String!
  stripeAccountId: String
  families: FamilyCreateManyWithoutAgencyInput
  validatedBy: InstitutionCreateManyWithoutValidatesInput
}

input AgencyCreateWithoutValidatedByInput {
  name: String!
  stripeAccountId: String
  users: UserCreateManyWithoutAgencyInput
  families: FamilyCreateManyWithoutAgencyInput
}

"""An edge in a connection."""
type AgencyEdge {
  """The item at the end of the edge."""
  node: Agency!

  """A cursor for use in pagination."""
  cursor: String!
}

enum AgencyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
  stripeAccountId_ASC
  stripeAccountId_DESC
}

type AgencyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  stripeAccountId: String
}

type AgencySubscriptionPayload {
  mutation: MutationType!
  node: Agency
  updatedFields: [String!]
  previousValues: AgencyPreviousValues
}

input AgencySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [AgencySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [AgencySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AgencySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: AgencyWhereInput
}

input AgencyUpdateInput {
  name: String
  stripeAccountId: String
  users: UserUpdateManyWithoutAgencyInput
  families: FamilyUpdateManyWithoutAgencyInput
  validatedBy: InstitutionUpdateManyWithoutValidatesInput
}

input AgencyUpdateManyWithoutValidatedByInput {
  create: [AgencyCreateWithoutValidatedByInput!]
  connect: [AgencyWhereUniqueInput!]
  disconnect: [AgencyWhereUniqueInput!]
  delete: [AgencyWhereUniqueInput!]
  update: [AgencyUpdateWithWhereUniqueWithoutValidatedByInput!]
  upsert: [AgencyUpsertWithWhereUniqueWithoutValidatedByInput!]
}

input AgencyUpdateOneWithoutFamiliesInput {
  create: AgencyCreateWithoutFamiliesInput
  connect: AgencyWhereUniqueInput
  delete: Boolean
  update: AgencyUpdateWithoutFamiliesDataInput
  upsert: AgencyUpsertWithoutFamiliesInput
}

input AgencyUpdateOneWithoutUsersInput {
  create: AgencyCreateWithoutUsersInput
  connect: AgencyWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: AgencyUpdateWithoutUsersDataInput
  upsert: AgencyUpsertWithoutUsersInput
}

input AgencyUpdateWithoutFamiliesDataInput {
  name: String
  stripeAccountId: String
  users: UserUpdateManyWithoutAgencyInput
  validatedBy: InstitutionUpdateManyWithoutValidatesInput
}

input AgencyUpdateWithoutUsersDataInput {
  name: String
  stripeAccountId: String
  families: FamilyUpdateManyWithoutAgencyInput
  validatedBy: InstitutionUpdateManyWithoutValidatesInput
}

input AgencyUpdateWithoutValidatedByDataInput {
  name: String
  stripeAccountId: String
  users: UserUpdateManyWithoutAgencyInput
  families: FamilyUpdateManyWithoutAgencyInput
}

input AgencyUpdateWithWhereUniqueWithoutValidatedByInput {
  where: AgencyWhereUniqueInput!
  data: AgencyUpdateWithoutValidatedByDataInput!
}

input AgencyUpsertWithoutFamiliesInput {
  update: AgencyUpdateWithoutFamiliesDataInput!
  create: AgencyCreateWithoutFamiliesInput!
}

input AgencyUpsertWithoutUsersInput {
  update: AgencyUpdateWithoutUsersDataInput!
  create: AgencyCreateWithoutUsersInput!
}

input AgencyUpsertWithWhereUniqueWithoutValidatedByInput {
  where: AgencyWhereUniqueInput!
  update: AgencyUpdateWithoutValidatedByDataInput!
  create: AgencyCreateWithoutValidatedByInput!
}

input AgencyWhereInput {
  """Logical AND on all given filters."""
  AND: [AgencyWhereInput!]

  """Logical OR on all given filters."""
  OR: [AgencyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [AgencyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  stripeAccountId: String

  """All values that are not equal to given value."""
  stripeAccountId_not: String

  """All values that are contained in given list."""
  stripeAccountId_in: [String!]

  """All values that are not contained in given list."""
  stripeAccountId_not_in: [String!]

  """All values less than the given value."""
  stripeAccountId_lt: String

  """All values less than or equal the given value."""
  stripeAccountId_lte: String

  """All values greater than the given value."""
  stripeAccountId_gt: String

  """All values greater than or equal the given value."""
  stripeAccountId_gte: String

  """All values containing the given string."""
  stripeAccountId_contains: String

  """All values not containing the given string."""
  stripeAccountId_not_contains: String

  """All values starting with the given string."""
  stripeAccountId_starts_with: String

  """All values not starting with the given string."""
  stripeAccountId_not_starts_with: String

  """All values ending with the given string."""
  stripeAccountId_ends_with: String

  """All values not ending with the given string."""
  stripeAccountId_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  families_every: FamilyWhereInput
  families_some: FamilyWhereInput
  families_none: FamilyWhereInput
  validatedBy_every: InstitutionWhereInput
  validatedBy_some: InstitutionWhereInput
  validatedBy_none: InstitutionWhereInput
}

input AgencyWhereUniqueInput {
  id: ID
}

type AggregateAccommodationOption {
  count: Int!
}

type AggregateAgency {
  count: Int!
}

type AggregateBedroom {
  count: Int!
}

type AggregateBedroomInfo {
  count: Int!
}

type AggregateFamily {
  count: Int!
}

type AggregateFamilyInfo {
  count: Int!
}

type AggregateInstitution {
  count: Int!
}

type AggregatePhoto {
  count: Int!
}

type AggregateReservation {
  count: Int!
}

type AggregateReview {
  count: Int!
}

type AggregateTag {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Bedroom implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  bedType: BedType
  privateShower: Boolean
  info(where: BedroomInfoWhereInput, orderBy: BedroomInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BedroomInfo!]
  family(where: FamilyWhereInput): Family!
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo!]
  reservations(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reservation!]
}

"""A connection to a list of items."""
type BedroomConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BedroomEdge]!
  aggregate: AggregateBedroom!
}

input BedroomCreateInput {
  bedType: BedType
  privateShower: Boolean
  info: BedroomInfoCreateManyWithoutBedroomInput
  family: FamilyCreateOneWithoutBedroomsInput!
  photos: PhotoCreateManyInput
  reservations: ReservationCreateManyWithoutBedroomInput
}

input BedroomCreateManyWithoutFamilyInput {
  create: [BedroomCreateWithoutFamilyInput!]
  connect: [BedroomWhereUniqueInput!]
}

input BedroomCreateOneWithoutInfoInput {
  create: BedroomCreateWithoutInfoInput
  connect: BedroomWhereUniqueInput
}

input BedroomCreateOneWithoutReservationsInput {
  create: BedroomCreateWithoutReservationsInput
  connect: BedroomWhereUniqueInput
}

input BedroomCreateWithoutFamilyInput {
  bedType: BedType
  privateShower: Boolean
  info: BedroomInfoCreateManyWithoutBedroomInput
  photos: PhotoCreateManyInput
  reservations: ReservationCreateManyWithoutBedroomInput
}

input BedroomCreateWithoutInfoInput {
  bedType: BedType
  privateShower: Boolean
  family: FamilyCreateOneWithoutBedroomsInput!
  photos: PhotoCreateManyInput
  reservations: ReservationCreateManyWithoutBedroomInput
}

input BedroomCreateWithoutReservationsInput {
  bedType: BedType
  privateShower: Boolean
  info: BedroomInfoCreateManyWithoutBedroomInput
  family: FamilyCreateOneWithoutBedroomsInput!
  photos: PhotoCreateManyInput
}

"""An edge in a connection."""
type BedroomEdge {
  """The item at the end of the edge."""
  node: Bedroom!

  """A cursor for use in pagination."""
  cursor: String!
}

type BedroomInfo implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  language: String
  description: String
  bedroom(where: BedroomWhereInput): Bedroom!
}

"""A connection to a list of items."""
type BedroomInfoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [BedroomInfoEdge]!
  aggregate: AggregateBedroomInfo!
}

input BedroomInfoCreateInput {
  language: String
  description: String
  bedroom: BedroomCreateOneWithoutInfoInput!
}

input BedroomInfoCreateManyWithoutBedroomInput {
  create: [BedroomInfoCreateWithoutBedroomInput!]
  connect: [BedroomInfoWhereUniqueInput!]
}

input BedroomInfoCreateWithoutBedroomInput {
  language: String
  description: String
}

"""An edge in a connection."""
type BedroomInfoEdge {
  """The item at the end of the edge."""
  node: BedroomInfo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum BedroomInfoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  language_ASC
  language_DESC
  description_ASC
  description_DESC
}

type BedroomInfoPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  language: String
  description: String
}

type BedroomInfoSubscriptionPayload {
  mutation: MutationType!
  node: BedroomInfo
  updatedFields: [String!]
  previousValues: BedroomInfoPreviousValues
}

input BedroomInfoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BedroomInfoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BedroomInfoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BedroomInfoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BedroomInfoWhereInput
}

input BedroomInfoUpdateInput {
  language: String
  description: String
  bedroom: BedroomUpdateOneWithoutInfoInput
}

input BedroomInfoUpdateManyWithoutBedroomInput {
  create: [BedroomInfoCreateWithoutBedroomInput!]
  connect: [BedroomInfoWhereUniqueInput!]
  disconnect: [BedroomInfoWhereUniqueInput!]
  delete: [BedroomInfoWhereUniqueInput!]
  update: [BedroomInfoUpdateWithWhereUniqueWithoutBedroomInput!]
  upsert: [BedroomInfoUpsertWithWhereUniqueWithoutBedroomInput!]
}

input BedroomInfoUpdateWithoutBedroomDataInput {
  language: String
  description: String
}

input BedroomInfoUpdateWithWhereUniqueWithoutBedroomInput {
  where: BedroomInfoWhereUniqueInput!
  data: BedroomInfoUpdateWithoutBedroomDataInput!
}

input BedroomInfoUpsertWithWhereUniqueWithoutBedroomInput {
  where: BedroomInfoWhereUniqueInput!
  update: BedroomInfoUpdateWithoutBedroomDataInput!
  create: BedroomInfoCreateWithoutBedroomInput!
}

input BedroomInfoWhereInput {
  """Logical AND on all given filters."""
  AND: [BedroomInfoWhereInput!]

  """Logical OR on all given filters."""
  OR: [BedroomInfoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BedroomInfoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  language: String

  """All values that are not equal to given value."""
  language_not: String

  """All values that are contained in given list."""
  language_in: [String!]

  """All values that are not contained in given list."""
  language_not_in: [String!]

  """All values less than the given value."""
  language_lt: String

  """All values less than or equal the given value."""
  language_lte: String

  """All values greater than the given value."""
  language_gt: String

  """All values greater than or equal the given value."""
  language_gte: String

  """All values containing the given string."""
  language_contains: String

  """All values not containing the given string."""
  language_not_contains: String

  """All values starting with the given string."""
  language_starts_with: String

  """All values not starting with the given string."""
  language_not_starts_with: String

  """All values ending with the given string."""
  language_ends_with: String

  """All values not ending with the given string."""
  language_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  bedroom: BedroomWhereInput
}

input BedroomInfoWhereUniqueInput {
  id: ID
}

enum BedroomOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  bedType_ASC
  bedType_DESC
  privateShower_ASC
  privateShower_DESC
}

type BedroomPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  bedType: BedType
  privateShower: Boolean
}

type BedroomSubscriptionPayload {
  mutation: MutationType!
  node: Bedroom
  updatedFields: [String!]
  previousValues: BedroomPreviousValues
}

input BedroomSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [BedroomSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [BedroomSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BedroomSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: BedroomWhereInput
}

input BedroomUpdateInput {
  bedType: BedType
  privateShower: Boolean
  info: BedroomInfoUpdateManyWithoutBedroomInput
  family: FamilyUpdateOneWithoutBedroomsInput
  photos: PhotoUpdateManyInput
  reservations: ReservationUpdateManyWithoutBedroomInput
}

input BedroomUpdateManyWithoutFamilyInput {
  create: [BedroomCreateWithoutFamilyInput!]
  connect: [BedroomWhereUniqueInput!]
  disconnect: [BedroomWhereUniqueInput!]
  delete: [BedroomWhereUniqueInput!]
  update: [BedroomUpdateWithWhereUniqueWithoutFamilyInput!]
  upsert: [BedroomUpsertWithWhereUniqueWithoutFamilyInput!]
}

input BedroomUpdateOneWithoutInfoInput {
  create: BedroomCreateWithoutInfoInput
  connect: BedroomWhereUniqueInput
  delete: Boolean
  update: BedroomUpdateWithoutInfoDataInput
  upsert: BedroomUpsertWithoutInfoInput
}

input BedroomUpdateOneWithoutReservationsInput {
  create: BedroomCreateWithoutReservationsInput
  connect: BedroomWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: BedroomUpdateWithoutReservationsDataInput
  upsert: BedroomUpsertWithoutReservationsInput
}

input BedroomUpdateWithoutFamilyDataInput {
  bedType: BedType
  privateShower: Boolean
  info: BedroomInfoUpdateManyWithoutBedroomInput
  photos: PhotoUpdateManyInput
  reservations: ReservationUpdateManyWithoutBedroomInput
}

input BedroomUpdateWithoutInfoDataInput {
  bedType: BedType
  privateShower: Boolean
  family: FamilyUpdateOneWithoutBedroomsInput
  photos: PhotoUpdateManyInput
  reservations: ReservationUpdateManyWithoutBedroomInput
}

input BedroomUpdateWithoutReservationsDataInput {
  bedType: BedType
  privateShower: Boolean
  info: BedroomInfoUpdateManyWithoutBedroomInput
  family: FamilyUpdateOneWithoutBedroomsInput
  photos: PhotoUpdateManyInput
}

input BedroomUpdateWithWhereUniqueWithoutFamilyInput {
  where: BedroomWhereUniqueInput!
  data: BedroomUpdateWithoutFamilyDataInput!
}

input BedroomUpsertWithoutInfoInput {
  update: BedroomUpdateWithoutInfoDataInput!
  create: BedroomCreateWithoutInfoInput!
}

input BedroomUpsertWithoutReservationsInput {
  update: BedroomUpdateWithoutReservationsDataInput!
  create: BedroomCreateWithoutReservationsInput!
}

input BedroomUpsertWithWhereUniqueWithoutFamilyInput {
  where: BedroomWhereUniqueInput!
  update: BedroomUpdateWithoutFamilyDataInput!
  create: BedroomCreateWithoutFamilyInput!
}

input BedroomWhereInput {
  """Logical AND on all given filters."""
  AND: [BedroomWhereInput!]

  """Logical OR on all given filters."""
  OR: [BedroomWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [BedroomWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  bedType: BedType

  """All values that are not equal to given value."""
  bedType_not: BedType

  """All values that are contained in given list."""
  bedType_in: [BedType!]

  """All values that are not contained in given list."""
  bedType_not_in: [BedType!]
  privateShower: Boolean

  """All values that are not equal to given value."""
  privateShower_not: Boolean
  info_every: BedroomInfoWhereInput
  info_some: BedroomInfoWhereInput
  info_none: BedroomInfoWhereInput
  family: FamilyWhereInput
  photos_every: PhotoWhereInput
  photos_some: PhotoWhereInput
  photos_none: PhotoWhereInput
  reservations_every: ReservationWhereInput
  reservations_some: ReservationWhereInput
  reservations_none: ReservationWhereInput
}

input BedroomWhereUniqueInput {
  id: ID
}

enum BedType {
  SINGLE
  DOUBLE
  TWIN
}

scalar DateTime

type Family implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  oldId: String
  agency(where: AgencyWhereInput): Agency!
  type: FamilyType!
  genderAccepted: GenderAccepted!
  canHostUnderageGuests: Boolean
  info(where: FamilyInfoWhereInput, orderBy: FamilyInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FamilyInfo!]
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag!]
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo!]
  bedrooms(where: BedroomWhereInput, orderBy: BedroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bedroom!]
  accommodationOptions(where: AccommodationOptionWhereInput, orderBy: AccommodationOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccommodationOption!]
  rating: Float
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review!]
}

"""A connection to a list of items."""
type FamilyConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FamilyEdge]!
  aggregate: AggregateFamily!
}

input FamilyCreateInput {
  oldId: String
  type: FamilyType!
  genderAccepted: GenderAccepted!
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  agency: AgencyCreateOneWithoutFamiliesInput!
  info: FamilyInfoCreateManyWithoutFamilyInput
  tags: TagCreateManyWithoutFamiliesInput
  photos: PhotoCreateManyInput
  bedrooms: BedroomCreateManyWithoutFamilyInput
  accommodationOptions: AccommodationOptionCreateManyInput
  reviews: ReviewCreateManyWithoutFamilyInput
}

input FamilyCreateManyWithoutAgencyInput {
  create: [FamilyCreateWithoutAgencyInput!]
  connect: [FamilyWhereUniqueInput!]
}

input FamilyCreateManyWithoutTagsInput {
  create: [FamilyCreateWithoutTagsInput!]
  connect: [FamilyWhereUniqueInput!]
}

input FamilyCreateOneWithoutBedroomsInput {
  create: FamilyCreateWithoutBedroomsInput
  connect: FamilyWhereUniqueInput
}

input FamilyCreateOneWithoutInfoInput {
  create: FamilyCreateWithoutInfoInput
  connect: FamilyWhereUniqueInput
}

input FamilyCreateOneWithoutReviewsInput {
  create: FamilyCreateWithoutReviewsInput
  connect: FamilyWhereUniqueInput
}

input FamilyCreateWithoutAgencyInput {
  oldId: String
  type: FamilyType!
  genderAccepted: GenderAccepted!
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  info: FamilyInfoCreateManyWithoutFamilyInput
  tags: TagCreateManyWithoutFamiliesInput
  photos: PhotoCreateManyInput
  bedrooms: BedroomCreateManyWithoutFamilyInput
  accommodationOptions: AccommodationOptionCreateManyInput
  reviews: ReviewCreateManyWithoutFamilyInput
}

input FamilyCreateWithoutBedroomsInput {
  oldId: String
  type: FamilyType!
  genderAccepted: GenderAccepted!
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  agency: AgencyCreateOneWithoutFamiliesInput!
  info: FamilyInfoCreateManyWithoutFamilyInput
  tags: TagCreateManyWithoutFamiliesInput
  photos: PhotoCreateManyInput
  accommodationOptions: AccommodationOptionCreateManyInput
  reviews: ReviewCreateManyWithoutFamilyInput
}

input FamilyCreateWithoutInfoInput {
  oldId: String
  type: FamilyType!
  genderAccepted: GenderAccepted!
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  agency: AgencyCreateOneWithoutFamiliesInput!
  tags: TagCreateManyWithoutFamiliesInput
  photos: PhotoCreateManyInput
  bedrooms: BedroomCreateManyWithoutFamilyInput
  accommodationOptions: AccommodationOptionCreateManyInput
  reviews: ReviewCreateManyWithoutFamilyInput
}

input FamilyCreateWithoutReviewsInput {
  oldId: String
  type: FamilyType!
  genderAccepted: GenderAccepted!
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  agency: AgencyCreateOneWithoutFamiliesInput!
  info: FamilyInfoCreateManyWithoutFamilyInput
  tags: TagCreateManyWithoutFamiliesInput
  photos: PhotoCreateManyInput
  bedrooms: BedroomCreateManyWithoutFamilyInput
  accommodationOptions: AccommodationOptionCreateManyInput
}

input FamilyCreateWithoutTagsInput {
  oldId: String
  type: FamilyType!
  genderAccepted: GenderAccepted!
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  agency: AgencyCreateOneWithoutFamiliesInput!
  info: FamilyInfoCreateManyWithoutFamilyInput
  photos: PhotoCreateManyInput
  bedrooms: BedroomCreateManyWithoutFamilyInput
  accommodationOptions: AccommodationOptionCreateManyInput
  reviews: ReviewCreateManyWithoutFamilyInput
}

"""An edge in a connection."""
type FamilyEdge {
  """The item at the end of the edge."""
  node: Family!

  """A cursor for use in pagination."""
  cursor: String!
}

type FamilyInfo implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  language: String
  name: String!
  description: String
  home: String
  neighborhood: String
  additionalInfo: String
  family(where: FamilyWhereInput): Family!
}

"""A connection to a list of items."""
type FamilyInfoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [FamilyInfoEdge]!
  aggregate: AggregateFamilyInfo!
}

input FamilyInfoCreateInput {
  language: String
  name: String!
  description: String
  home: String
  neighborhood: String
  additionalInfo: String
  family: FamilyCreateOneWithoutInfoInput!
}

input FamilyInfoCreateManyWithoutFamilyInput {
  create: [FamilyInfoCreateWithoutFamilyInput!]
  connect: [FamilyInfoWhereUniqueInput!]
}

input FamilyInfoCreateWithoutFamilyInput {
  language: String
  name: String!
  description: String
  home: String
  neighborhood: String
  additionalInfo: String
}

"""An edge in a connection."""
type FamilyInfoEdge {
  """The item at the end of the edge."""
  node: FamilyInfo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum FamilyInfoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  language_ASC
  language_DESC
  name_ASC
  name_DESC
  description_ASC
  description_DESC
  home_ASC
  home_DESC
  neighborhood_ASC
  neighborhood_DESC
  additionalInfo_ASC
  additionalInfo_DESC
}

type FamilyInfoPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  language: String
  name: String!
  description: String
  home: String
  neighborhood: String
  additionalInfo: String
}

type FamilyInfoSubscriptionPayload {
  mutation: MutationType!
  node: FamilyInfo
  updatedFields: [String!]
  previousValues: FamilyInfoPreviousValues
}

input FamilyInfoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FamilyInfoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FamilyInfoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FamilyInfoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FamilyInfoWhereInput
}

input FamilyInfoUpdateInput {
  language: String
  name: String
  description: String
  home: String
  neighborhood: String
  additionalInfo: String
  family: FamilyUpdateOneWithoutInfoInput
}

input FamilyInfoUpdateManyWithoutFamilyInput {
  create: [FamilyInfoCreateWithoutFamilyInput!]
  connect: [FamilyInfoWhereUniqueInput!]
  disconnect: [FamilyInfoWhereUniqueInput!]
  delete: [FamilyInfoWhereUniqueInput!]
  update: [FamilyInfoUpdateWithWhereUniqueWithoutFamilyInput!]
  upsert: [FamilyInfoUpsertWithWhereUniqueWithoutFamilyInput!]
}

input FamilyInfoUpdateWithoutFamilyDataInput {
  language: String
  name: String
  description: String
  home: String
  neighborhood: String
  additionalInfo: String
}

input FamilyInfoUpdateWithWhereUniqueWithoutFamilyInput {
  where: FamilyInfoWhereUniqueInput!
  data: FamilyInfoUpdateWithoutFamilyDataInput!
}

input FamilyInfoUpsertWithWhereUniqueWithoutFamilyInput {
  where: FamilyInfoWhereUniqueInput!
  update: FamilyInfoUpdateWithoutFamilyDataInput!
  create: FamilyInfoCreateWithoutFamilyInput!
}

input FamilyInfoWhereInput {
  """Logical AND on all given filters."""
  AND: [FamilyInfoWhereInput!]

  """Logical OR on all given filters."""
  OR: [FamilyInfoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FamilyInfoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  language: String

  """All values that are not equal to given value."""
  language_not: String

  """All values that are contained in given list."""
  language_in: [String!]

  """All values that are not contained in given list."""
  language_not_in: [String!]

  """All values less than the given value."""
  language_lt: String

  """All values less than or equal the given value."""
  language_lte: String

  """All values greater than the given value."""
  language_gt: String

  """All values greater than or equal the given value."""
  language_gte: String

  """All values containing the given string."""
  language_contains: String

  """All values not containing the given string."""
  language_not_contains: String

  """All values starting with the given string."""
  language_starts_with: String

  """All values not starting with the given string."""
  language_not_starts_with: String

  """All values ending with the given string."""
  language_ends_with: String

  """All values not ending with the given string."""
  language_not_ends_with: String
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  description: String

  """All values that are not equal to given value."""
  description_not: String

  """All values that are contained in given list."""
  description_in: [String!]

  """All values that are not contained in given list."""
  description_not_in: [String!]

  """All values less than the given value."""
  description_lt: String

  """All values less than or equal the given value."""
  description_lte: String

  """All values greater than the given value."""
  description_gt: String

  """All values greater than or equal the given value."""
  description_gte: String

  """All values containing the given string."""
  description_contains: String

  """All values not containing the given string."""
  description_not_contains: String

  """All values starting with the given string."""
  description_starts_with: String

  """All values not starting with the given string."""
  description_not_starts_with: String

  """All values ending with the given string."""
  description_ends_with: String

  """All values not ending with the given string."""
  description_not_ends_with: String
  home: String

  """All values that are not equal to given value."""
  home_not: String

  """All values that are contained in given list."""
  home_in: [String!]

  """All values that are not contained in given list."""
  home_not_in: [String!]

  """All values less than the given value."""
  home_lt: String

  """All values less than or equal the given value."""
  home_lte: String

  """All values greater than the given value."""
  home_gt: String

  """All values greater than or equal the given value."""
  home_gte: String

  """All values containing the given string."""
  home_contains: String

  """All values not containing the given string."""
  home_not_contains: String

  """All values starting with the given string."""
  home_starts_with: String

  """All values not starting with the given string."""
  home_not_starts_with: String

  """All values ending with the given string."""
  home_ends_with: String

  """All values not ending with the given string."""
  home_not_ends_with: String
  neighborhood: String

  """All values that are not equal to given value."""
  neighborhood_not: String

  """All values that are contained in given list."""
  neighborhood_in: [String!]

  """All values that are not contained in given list."""
  neighborhood_not_in: [String!]

  """All values less than the given value."""
  neighborhood_lt: String

  """All values less than or equal the given value."""
  neighborhood_lte: String

  """All values greater than the given value."""
  neighborhood_gt: String

  """All values greater than or equal the given value."""
  neighborhood_gte: String

  """All values containing the given string."""
  neighborhood_contains: String

  """All values not containing the given string."""
  neighborhood_not_contains: String

  """All values starting with the given string."""
  neighborhood_starts_with: String

  """All values not starting with the given string."""
  neighborhood_not_starts_with: String

  """All values ending with the given string."""
  neighborhood_ends_with: String

  """All values not ending with the given string."""
  neighborhood_not_ends_with: String
  additionalInfo: String

  """All values that are not equal to given value."""
  additionalInfo_not: String

  """All values that are contained in given list."""
  additionalInfo_in: [String!]

  """All values that are not contained in given list."""
  additionalInfo_not_in: [String!]

  """All values less than the given value."""
  additionalInfo_lt: String

  """All values less than or equal the given value."""
  additionalInfo_lte: String

  """All values greater than the given value."""
  additionalInfo_gt: String

  """All values greater than or equal the given value."""
  additionalInfo_gte: String

  """All values containing the given string."""
  additionalInfo_contains: String

  """All values not containing the given string."""
  additionalInfo_not_contains: String

  """All values starting with the given string."""
  additionalInfo_starts_with: String

  """All values not starting with the given string."""
  additionalInfo_not_starts_with: String

  """All values ending with the given string."""
  additionalInfo_ends_with: String

  """All values not ending with the given string."""
  additionalInfo_not_ends_with: String
  family: FamilyWhereInput
}

input FamilyInfoWhereUniqueInput {
  id: ID
}

enum FamilyOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  oldId_ASC
  oldId_DESC
  type_ASC
  type_DESC
  genderAccepted_ASC
  genderAccepted_DESC
  canHostUnderageGuests_ASC
  canHostUnderageGuests_DESC
  children_ASC
  children_DESC
  pets_ASC
  pets_DESC
  canHostOtherGuests_ASC
  canHostOtherGuests_DESC
  privateNotes_ASC
  privateNotes_DESC
  floor_ASC
  floor_DESC
  elevator_ASC
  elevator_DESC
  location_ASC
  location_DESC
  address_ASC
  address_DESC
  rating_ASC
  rating_DESC
}

type FamilyPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  oldId: String
  type: FamilyType!
  genderAccepted: GenderAccepted!
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
}

type FamilySubscriptionPayload {
  mutation: MutationType!
  node: Family
  updatedFields: [String!]
  previousValues: FamilyPreviousValues
}

input FamilySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [FamilySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [FamilySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FamilySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: FamilyWhereInput
}

enum FamilyType {
  COUPLE
  SINGLE_LADY
  SINGLE_GENTLEMAN
}

input FamilyUpdateInput {
  oldId: String
  type: FamilyType
  genderAccepted: GenderAccepted
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  agency: AgencyUpdateOneWithoutFamiliesInput
  info: FamilyInfoUpdateManyWithoutFamilyInput
  tags: TagUpdateManyWithoutFamiliesInput
  photos: PhotoUpdateManyInput
  bedrooms: BedroomUpdateManyWithoutFamilyInput
  accommodationOptions: AccommodationOptionUpdateManyInput
  reviews: ReviewUpdateManyWithoutFamilyInput
}

input FamilyUpdateManyWithoutAgencyInput {
  create: [FamilyCreateWithoutAgencyInput!]
  connect: [FamilyWhereUniqueInput!]
  disconnect: [FamilyWhereUniqueInput!]
  delete: [FamilyWhereUniqueInput!]
  update: [FamilyUpdateWithWhereUniqueWithoutAgencyInput!]
  upsert: [FamilyUpsertWithWhereUniqueWithoutAgencyInput!]
}

input FamilyUpdateManyWithoutTagsInput {
  create: [FamilyCreateWithoutTagsInput!]
  connect: [FamilyWhereUniqueInput!]
  disconnect: [FamilyWhereUniqueInput!]
  delete: [FamilyWhereUniqueInput!]
  update: [FamilyUpdateWithWhereUniqueWithoutTagsInput!]
  upsert: [FamilyUpsertWithWhereUniqueWithoutTagsInput!]
}

input FamilyUpdateOneWithoutBedroomsInput {
  create: FamilyCreateWithoutBedroomsInput
  connect: FamilyWhereUniqueInput
  delete: Boolean
  update: FamilyUpdateWithoutBedroomsDataInput
  upsert: FamilyUpsertWithoutBedroomsInput
}

input FamilyUpdateOneWithoutInfoInput {
  create: FamilyCreateWithoutInfoInput
  connect: FamilyWhereUniqueInput
  delete: Boolean
  update: FamilyUpdateWithoutInfoDataInput
  upsert: FamilyUpsertWithoutInfoInput
}

input FamilyUpdateOneWithoutReviewsInput {
  create: FamilyCreateWithoutReviewsInput
  connect: FamilyWhereUniqueInput
  delete: Boolean
  update: FamilyUpdateWithoutReviewsDataInput
  upsert: FamilyUpsertWithoutReviewsInput
}

input FamilyUpdateWithoutAgencyDataInput {
  oldId: String
  type: FamilyType
  genderAccepted: GenderAccepted
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  info: FamilyInfoUpdateManyWithoutFamilyInput
  tags: TagUpdateManyWithoutFamiliesInput
  photos: PhotoUpdateManyInput
  bedrooms: BedroomUpdateManyWithoutFamilyInput
  accommodationOptions: AccommodationOptionUpdateManyInput
  reviews: ReviewUpdateManyWithoutFamilyInput
}

input FamilyUpdateWithoutBedroomsDataInput {
  oldId: String
  type: FamilyType
  genderAccepted: GenderAccepted
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  agency: AgencyUpdateOneWithoutFamiliesInput
  info: FamilyInfoUpdateManyWithoutFamilyInput
  tags: TagUpdateManyWithoutFamiliesInput
  photos: PhotoUpdateManyInput
  accommodationOptions: AccommodationOptionUpdateManyInput
  reviews: ReviewUpdateManyWithoutFamilyInput
}

input FamilyUpdateWithoutInfoDataInput {
  oldId: String
  type: FamilyType
  genderAccepted: GenderAccepted
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  agency: AgencyUpdateOneWithoutFamiliesInput
  tags: TagUpdateManyWithoutFamiliesInput
  photos: PhotoUpdateManyInput
  bedrooms: BedroomUpdateManyWithoutFamilyInput
  accommodationOptions: AccommodationOptionUpdateManyInput
  reviews: ReviewUpdateManyWithoutFamilyInput
}

input FamilyUpdateWithoutReviewsDataInput {
  oldId: String
  type: FamilyType
  genderAccepted: GenderAccepted
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  agency: AgencyUpdateOneWithoutFamiliesInput
  info: FamilyInfoUpdateManyWithoutFamilyInput
  tags: TagUpdateManyWithoutFamiliesInput
  photos: PhotoUpdateManyInput
  bedrooms: BedroomUpdateManyWithoutFamilyInput
  accommodationOptions: AccommodationOptionUpdateManyInput
}

input FamilyUpdateWithoutTagsDataInput {
  oldId: String
  type: FamilyType
  genderAccepted: GenderAccepted
  canHostUnderageGuests: Boolean
  children: Int
  pets: Int
  canHostOtherGuests: Boolean
  privateNotes: String
  floor: Int
  elevator: Boolean
  location: String
  address: String
  rating: Float
  agency: AgencyUpdateOneWithoutFamiliesInput
  info: FamilyInfoUpdateManyWithoutFamilyInput
  photos: PhotoUpdateManyInput
  bedrooms: BedroomUpdateManyWithoutFamilyInput
  accommodationOptions: AccommodationOptionUpdateManyInput
  reviews: ReviewUpdateManyWithoutFamilyInput
}

input FamilyUpdateWithWhereUniqueWithoutAgencyInput {
  where: FamilyWhereUniqueInput!
  data: FamilyUpdateWithoutAgencyDataInput!
}

input FamilyUpdateWithWhereUniqueWithoutTagsInput {
  where: FamilyWhereUniqueInput!
  data: FamilyUpdateWithoutTagsDataInput!
}

input FamilyUpsertWithoutBedroomsInput {
  update: FamilyUpdateWithoutBedroomsDataInput!
  create: FamilyCreateWithoutBedroomsInput!
}

input FamilyUpsertWithoutInfoInput {
  update: FamilyUpdateWithoutInfoDataInput!
  create: FamilyCreateWithoutInfoInput!
}

input FamilyUpsertWithoutReviewsInput {
  update: FamilyUpdateWithoutReviewsDataInput!
  create: FamilyCreateWithoutReviewsInput!
}

input FamilyUpsertWithWhereUniqueWithoutAgencyInput {
  where: FamilyWhereUniqueInput!
  update: FamilyUpdateWithoutAgencyDataInput!
  create: FamilyCreateWithoutAgencyInput!
}

input FamilyUpsertWithWhereUniqueWithoutTagsInput {
  where: FamilyWhereUniqueInput!
  update: FamilyUpdateWithoutTagsDataInput!
  create: FamilyCreateWithoutTagsInput!
}

input FamilyWhereInput {
  """Logical AND on all given filters."""
  AND: [FamilyWhereInput!]

  """Logical OR on all given filters."""
  OR: [FamilyWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [FamilyWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  oldId: String

  """All values that are not equal to given value."""
  oldId_not: String

  """All values that are contained in given list."""
  oldId_in: [String!]

  """All values that are not contained in given list."""
  oldId_not_in: [String!]

  """All values less than the given value."""
  oldId_lt: String

  """All values less than or equal the given value."""
  oldId_lte: String

  """All values greater than the given value."""
  oldId_gt: String

  """All values greater than or equal the given value."""
  oldId_gte: String

  """All values containing the given string."""
  oldId_contains: String

  """All values not containing the given string."""
  oldId_not_contains: String

  """All values starting with the given string."""
  oldId_starts_with: String

  """All values not starting with the given string."""
  oldId_not_starts_with: String

  """All values ending with the given string."""
  oldId_ends_with: String

  """All values not ending with the given string."""
  oldId_not_ends_with: String
  type: FamilyType

  """All values that are not equal to given value."""
  type_not: FamilyType

  """All values that are contained in given list."""
  type_in: [FamilyType!]

  """All values that are not contained in given list."""
  type_not_in: [FamilyType!]
  genderAccepted: GenderAccepted

  """All values that are not equal to given value."""
  genderAccepted_not: GenderAccepted

  """All values that are contained in given list."""
  genderAccepted_in: [GenderAccepted!]

  """All values that are not contained in given list."""
  genderAccepted_not_in: [GenderAccepted!]
  canHostUnderageGuests: Boolean

  """All values that are not equal to given value."""
  canHostUnderageGuests_not: Boolean
  children: Int

  """All values that are not equal to given value."""
  children_not: Int

  """All values that are contained in given list."""
  children_in: [Int!]

  """All values that are not contained in given list."""
  children_not_in: [Int!]

  """All values less than the given value."""
  children_lt: Int

  """All values less than or equal the given value."""
  children_lte: Int

  """All values greater than the given value."""
  children_gt: Int

  """All values greater than or equal the given value."""
  children_gte: Int
  pets: Int

  """All values that are not equal to given value."""
  pets_not: Int

  """All values that are contained in given list."""
  pets_in: [Int!]

  """All values that are not contained in given list."""
  pets_not_in: [Int!]

  """All values less than the given value."""
  pets_lt: Int

  """All values less than or equal the given value."""
  pets_lte: Int

  """All values greater than the given value."""
  pets_gt: Int

  """All values greater than or equal the given value."""
  pets_gte: Int
  canHostOtherGuests: Boolean

  """All values that are not equal to given value."""
  canHostOtherGuests_not: Boolean
  privateNotes: String

  """All values that are not equal to given value."""
  privateNotes_not: String

  """All values that are contained in given list."""
  privateNotes_in: [String!]

  """All values that are not contained in given list."""
  privateNotes_not_in: [String!]

  """All values less than the given value."""
  privateNotes_lt: String

  """All values less than or equal the given value."""
  privateNotes_lte: String

  """All values greater than the given value."""
  privateNotes_gt: String

  """All values greater than or equal the given value."""
  privateNotes_gte: String

  """All values containing the given string."""
  privateNotes_contains: String

  """All values not containing the given string."""
  privateNotes_not_contains: String

  """All values starting with the given string."""
  privateNotes_starts_with: String

  """All values not starting with the given string."""
  privateNotes_not_starts_with: String

  """All values ending with the given string."""
  privateNotes_ends_with: String

  """All values not ending with the given string."""
  privateNotes_not_ends_with: String
  floor: Int

  """All values that are not equal to given value."""
  floor_not: Int

  """All values that are contained in given list."""
  floor_in: [Int!]

  """All values that are not contained in given list."""
  floor_not_in: [Int!]

  """All values less than the given value."""
  floor_lt: Int

  """All values less than or equal the given value."""
  floor_lte: Int

  """All values greater than the given value."""
  floor_gt: Int

  """All values greater than or equal the given value."""
  floor_gte: Int
  elevator: Boolean

  """All values that are not equal to given value."""
  elevator_not: Boolean
  location: String

  """All values that are not equal to given value."""
  location_not: String

  """All values that are contained in given list."""
  location_in: [String!]

  """All values that are not contained in given list."""
  location_not_in: [String!]

  """All values less than the given value."""
  location_lt: String

  """All values less than or equal the given value."""
  location_lte: String

  """All values greater than the given value."""
  location_gt: String

  """All values greater than or equal the given value."""
  location_gte: String

  """All values containing the given string."""
  location_contains: String

  """All values not containing the given string."""
  location_not_contains: String

  """All values starting with the given string."""
  location_starts_with: String

  """All values not starting with the given string."""
  location_not_starts_with: String

  """All values ending with the given string."""
  location_ends_with: String

  """All values not ending with the given string."""
  location_not_ends_with: String
  address: String

  """All values that are not equal to given value."""
  address_not: String

  """All values that are contained in given list."""
  address_in: [String!]

  """All values that are not contained in given list."""
  address_not_in: [String!]

  """All values less than the given value."""
  address_lt: String

  """All values less than or equal the given value."""
  address_lte: String

  """All values greater than the given value."""
  address_gt: String

  """All values greater than or equal the given value."""
  address_gte: String

  """All values containing the given string."""
  address_contains: String

  """All values not containing the given string."""
  address_not_contains: String

  """All values starting with the given string."""
  address_starts_with: String

  """All values not starting with the given string."""
  address_not_starts_with: String

  """All values ending with the given string."""
  address_ends_with: String

  """All values not ending with the given string."""
  address_not_ends_with: String
  rating: Float

  """All values that are not equal to given value."""
  rating_not: Float

  """All values that are contained in given list."""
  rating_in: [Float!]

  """All values that are not contained in given list."""
  rating_not_in: [Float!]

  """All values less than the given value."""
  rating_lt: Float

  """All values less than or equal the given value."""
  rating_lte: Float

  """All values greater than the given value."""
  rating_gt: Float

  """All values greater than or equal the given value."""
  rating_gte: Float
  agency: AgencyWhereInput
  info_every: FamilyInfoWhereInput
  info_some: FamilyInfoWhereInput
  info_none: FamilyInfoWhereInput
  tags_every: TagWhereInput
  tags_some: TagWhereInput
  tags_none: TagWhereInput
  photos_every: PhotoWhereInput
  photos_some: PhotoWhereInput
  photos_none: PhotoWhereInput
  bedrooms_every: BedroomWhereInput
  bedrooms_some: BedroomWhereInput
  bedrooms_none: BedroomWhereInput
  accommodationOptions_every: AccommodationOptionWhereInput
  accommodationOptions_some: AccommodationOptionWhereInput
  accommodationOptions_none: AccommodationOptionWhereInput
  reviews_every: ReviewWhereInput
  reviews_some: ReviewWhereInput
  reviews_none: ReviewWhereInput
}

input FamilyWhereUniqueInput {
  id: ID
}

enum Gender {
  MALE
  FEMALE
}

enum GenderAccepted {
  MALE
  FEMALE
  BOTH
}

type Institution implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  students(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  validates(where: AgencyWhereInput, orderBy: AgencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Agency!]
}

"""A connection to a list of items."""
type InstitutionConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [InstitutionEdge]!
  aggregate: AggregateInstitution!
}

input InstitutionCreateInput {
  name: String!
  students: UserCreateManyInput
  validates: AgencyCreateManyWithoutValidatedByInput
}

input InstitutionCreateManyWithoutValidatesInput {
  create: [InstitutionCreateWithoutValidatesInput!]
  connect: [InstitutionWhereUniqueInput!]
}

input InstitutionCreateOneInput {
  create: InstitutionCreateInput
  connect: InstitutionWhereUniqueInput
}

input InstitutionCreateWithoutValidatesInput {
  name: String!
  students: UserCreateManyInput
}

"""An edge in a connection."""
type InstitutionEdge {
  """The item at the end of the edge."""
  node: Institution!

  """A cursor for use in pagination."""
  cursor: String!
}

enum InstitutionOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  name_ASC
  name_DESC
}

type InstitutionPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
}

type InstitutionSubscriptionPayload {
  mutation: MutationType!
  node: Institution
  updatedFields: [String!]
  previousValues: InstitutionPreviousValues
}

input InstitutionSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [InstitutionSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstitutionSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstitutionSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: InstitutionWhereInput
}

input InstitutionUpdateDataInput {
  name: String
  students: UserUpdateManyInput
  validates: AgencyUpdateManyWithoutValidatedByInput
}

input InstitutionUpdateInput {
  name: String
  students: UserUpdateManyInput
  validates: AgencyUpdateManyWithoutValidatedByInput
}

input InstitutionUpdateManyWithoutValidatesInput {
  create: [InstitutionCreateWithoutValidatesInput!]
  connect: [InstitutionWhereUniqueInput!]
  disconnect: [InstitutionWhereUniqueInput!]
  delete: [InstitutionWhereUniqueInput!]
  update: [InstitutionUpdateWithWhereUniqueWithoutValidatesInput!]
  upsert: [InstitutionUpsertWithWhereUniqueWithoutValidatesInput!]
}

input InstitutionUpdateOneInput {
  create: InstitutionCreateInput
  connect: InstitutionWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: InstitutionUpdateDataInput
  upsert: InstitutionUpsertNestedInput
}

input InstitutionUpdateWithoutValidatesDataInput {
  name: String
  students: UserUpdateManyInput
}

input InstitutionUpdateWithWhereUniqueWithoutValidatesInput {
  where: InstitutionWhereUniqueInput!
  data: InstitutionUpdateWithoutValidatesDataInput!
}

input InstitutionUpsertNestedInput {
  update: InstitutionUpdateDataInput!
  create: InstitutionCreateInput!
}

input InstitutionUpsertWithWhereUniqueWithoutValidatesInput {
  where: InstitutionWhereUniqueInput!
  update: InstitutionUpdateWithoutValidatesDataInput!
  create: InstitutionCreateWithoutValidatesInput!
}

input InstitutionWhereInput {
  """Logical AND on all given filters."""
  AND: [InstitutionWhereInput!]

  """Logical OR on all given filters."""
  OR: [InstitutionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [InstitutionWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  students_every: UserWhereInput
  students_some: UserWhereInput
  students_none: UserWhereInput
  validates_every: AgencyWhereInput
  validates_some: AgencyWhereInput
  validates_none: AgencyWhereInput
}

input InstitutionWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createAgency(data: AgencyCreateInput!): Agency!
  createInstitution(data: InstitutionCreateInput!): Institution!
  createFamily(data: FamilyCreateInput!): Family!
  createReview(data: ReviewCreateInput!): Review!
  createPhoto(data: PhotoCreateInput!): Photo!
  createFamilyInfo(data: FamilyInfoCreateInput!): FamilyInfo!
  createTag(data: TagCreateInput!): Tag!
  createBedroom(data: BedroomCreateInput!): Bedroom!
  createBedroomInfo(data: BedroomInfoCreateInput!): BedroomInfo!
  createAccommodationOption(data: AccommodationOptionCreateInput!): AccommodationOption!
  createReservation(data: ReservationCreateInput!): Reservation!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateAgency(data: AgencyUpdateInput!, where: AgencyWhereUniqueInput!): Agency
  updateInstitution(data: InstitutionUpdateInput!, where: InstitutionWhereUniqueInput!): Institution
  updateFamily(data: FamilyUpdateInput!, where: FamilyWhereUniqueInput!): Family
  updateReview(data: ReviewUpdateInput!, where: ReviewWhereUniqueInput!): Review
  updatePhoto(data: PhotoUpdateInput!, where: PhotoWhereUniqueInput!): Photo
  updateFamilyInfo(data: FamilyInfoUpdateInput!, where: FamilyInfoWhereUniqueInput!): FamilyInfo
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateBedroom(data: BedroomUpdateInput!, where: BedroomWhereUniqueInput!): Bedroom
  updateBedroomInfo(data: BedroomInfoUpdateInput!, where: BedroomInfoWhereUniqueInput!): BedroomInfo
  updateAccommodationOption(data: AccommodationOptionUpdateInput!, where: AccommodationOptionWhereUniqueInput!): AccommodationOption
  updateReservation(data: ReservationUpdateInput!, where: ReservationWhereUniqueInput!): Reservation
  deleteUser(where: UserWhereUniqueInput!): User
  deleteAgency(where: AgencyWhereUniqueInput!): Agency
  deleteInstitution(where: InstitutionWhereUniqueInput!): Institution
  deleteFamily(where: FamilyWhereUniqueInput!): Family
  deleteReview(where: ReviewWhereUniqueInput!): Review
  deletePhoto(where: PhotoWhereUniqueInput!): Photo
  deleteFamilyInfo(where: FamilyInfoWhereUniqueInput!): FamilyInfo
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteBedroom(where: BedroomWhereUniqueInput!): Bedroom
  deleteBedroomInfo(where: BedroomInfoWhereUniqueInput!): BedroomInfo
  deleteAccommodationOption(where: AccommodationOptionWhereUniqueInput!): AccommodationOption
  deleteReservation(where: ReservationWhereUniqueInput!): Reservation
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertAgency(where: AgencyWhereUniqueInput!, create: AgencyCreateInput!, update: AgencyUpdateInput!): Agency!
  upsertInstitution(where: InstitutionWhereUniqueInput!, create: InstitutionCreateInput!, update: InstitutionUpdateInput!): Institution!
  upsertFamily(where: FamilyWhereUniqueInput!, create: FamilyCreateInput!, update: FamilyUpdateInput!): Family!
  upsertReview(where: ReviewWhereUniqueInput!, create: ReviewCreateInput!, update: ReviewUpdateInput!): Review!
  upsertPhoto(where: PhotoWhereUniqueInput!, create: PhotoCreateInput!, update: PhotoUpdateInput!): Photo!
  upsertFamilyInfo(where: FamilyInfoWhereUniqueInput!, create: FamilyInfoCreateInput!, update: FamilyInfoUpdateInput!): FamilyInfo!
  upsertTag(where: TagWhereUniqueInput!, create: TagCreateInput!, update: TagUpdateInput!): Tag!
  upsertBedroom(where: BedroomWhereUniqueInput!, create: BedroomCreateInput!, update: BedroomUpdateInput!): Bedroom!
  upsertBedroomInfo(where: BedroomInfoWhereUniqueInput!, create: BedroomInfoCreateInput!, update: BedroomInfoUpdateInput!): BedroomInfo!
  upsertAccommodationOption(where: AccommodationOptionWhereUniqueInput!, create: AccommodationOptionCreateInput!, update: AccommodationOptionUpdateInput!): AccommodationOption!
  upsertReservation(where: ReservationWhereUniqueInput!, create: ReservationCreateInput!, update: ReservationUpdateInput!): Reservation!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyAgencies(data: AgencyUpdateInput!, where: AgencyWhereInput): BatchPayload!
  updateManyInstitutions(data: InstitutionUpdateInput!, where: InstitutionWhereInput): BatchPayload!
  updateManyFamilies(data: FamilyUpdateInput!, where: FamilyWhereInput): BatchPayload!
  updateManyReviews(data: ReviewUpdateInput!, where: ReviewWhereInput): BatchPayload!
  updateManyPhotos(data: PhotoUpdateInput!, where: PhotoWhereInput): BatchPayload!
  updateManyFamilyInfoes(data: FamilyInfoUpdateInput!, where: FamilyInfoWhereInput): BatchPayload!
  updateManyTags(data: TagUpdateInput!, where: TagWhereInput): BatchPayload!
  updateManyBedrooms(data: BedroomUpdateInput!, where: BedroomWhereInput): BatchPayload!
  updateManyBedroomInfoes(data: BedroomInfoUpdateInput!, where: BedroomInfoWhereInput): BatchPayload!
  updateManyAccommodationOptions(data: AccommodationOptionUpdateInput!, where: AccommodationOptionWhereInput): BatchPayload!
  updateManyReservations(data: ReservationUpdateInput!, where: ReservationWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyAgencies(where: AgencyWhereInput): BatchPayload!
  deleteManyInstitutions(where: InstitutionWhereInput): BatchPayload!
  deleteManyFamilies(where: FamilyWhereInput): BatchPayload!
  deleteManyReviews(where: ReviewWhereInput): BatchPayload!
  deleteManyPhotos(where: PhotoWhereInput): BatchPayload!
  deleteManyFamilyInfoes(where: FamilyInfoWhereInput): BatchPayload!
  deleteManyTags(where: TagWhereInput): BatchPayload!
  deleteManyBedrooms(where: BedroomWhereInput): BatchPayload!
  deleteManyBedroomInfoes(where: BedroomInfoWhereInput): BatchPayload!
  deleteManyAccommodationOptions(where: AccommodationOptionWhereInput): BatchPayload!
  deleteManyReservations(where: ReservationWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Photo implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  storeId: String!
  type: PhotoType
  metadata: Json
}

"""A connection to a list of items."""
type PhotoConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PhotoEdge]!
  aggregate: AggregatePhoto!
}

input PhotoCreateInput {
  storeId: String!
  type: PhotoType
  metadata: Json
}

input PhotoCreateManyInput {
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
}

"""An edge in a connection."""
type PhotoEdge {
  """The item at the end of the edge."""
  node: Photo!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PhotoOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  storeId_ASC
  storeId_DESC
  type_ASC
  type_DESC
  metadata_ASC
  metadata_DESC
}

type PhotoPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  storeId: String!
  type: PhotoType
  metadata: Json
}

type PhotoSubscriptionPayload {
  mutation: MutationType!
  node: Photo
  updatedFields: [String!]
  previousValues: PhotoPreviousValues
}

input PhotoSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PhotoWhereInput
}

enum PhotoType {
  FAMILY
  HOME
  KITCHEN
  EXTERIOR
  NEIGHBORHOOD
  BEDROOM
  BATHROOM
}

input PhotoUpdateDataInput {
  storeId: String
  type: PhotoType
  metadata: Json
}

input PhotoUpdateInput {
  storeId: String
  type: PhotoType
  metadata: Json
}

input PhotoUpdateManyInput {
  create: [PhotoCreateInput!]
  connect: [PhotoWhereUniqueInput!]
  disconnect: [PhotoWhereUniqueInput!]
  delete: [PhotoWhereUniqueInput!]
  update: [PhotoUpdateWithWhereUniqueNestedInput!]
  upsert: [PhotoUpsertWithWhereUniqueNestedInput!]
}

input PhotoUpdateWithWhereUniqueNestedInput {
  where: PhotoWhereUniqueInput!
  data: PhotoUpdateDataInput!
}

input PhotoUpsertWithWhereUniqueNestedInput {
  where: PhotoWhereUniqueInput!
  update: PhotoUpdateDataInput!
  create: PhotoCreateInput!
}

input PhotoWhereInput {
  """Logical AND on all given filters."""
  AND: [PhotoWhereInput!]

  """Logical OR on all given filters."""
  OR: [PhotoWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PhotoWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  storeId: String

  """All values that are not equal to given value."""
  storeId_not: String

  """All values that are contained in given list."""
  storeId_in: [String!]

  """All values that are not contained in given list."""
  storeId_not_in: [String!]

  """All values less than the given value."""
  storeId_lt: String

  """All values less than or equal the given value."""
  storeId_lte: String

  """All values greater than the given value."""
  storeId_gt: String

  """All values greater than or equal the given value."""
  storeId_gte: String

  """All values containing the given string."""
  storeId_contains: String

  """All values not containing the given string."""
  storeId_not_contains: String

  """All values starting with the given string."""
  storeId_starts_with: String

  """All values not starting with the given string."""
  storeId_not_starts_with: String

  """All values ending with the given string."""
  storeId_ends_with: String

  """All values not ending with the given string."""
  storeId_not_ends_with: String
  type: PhotoType

  """All values that are not equal to given value."""
  type_not: PhotoType

  """All values that are contained in given list."""
  type_in: [PhotoType!]

  """All values that are not contained in given list."""
  type_not_in: [PhotoType!]
}

input PhotoWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  agencies(where: AgencyWhereInput, orderBy: AgencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Agency]!
  institutions(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Institution]!
  families(where: FamilyWhereInput, orderBy: FamilyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Family]!
  reviews(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Review]!
  photos(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Photo]!
  familyInfoes(where: FamilyInfoWhereInput, orderBy: FamilyInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [FamilyInfo]!
  tags(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Tag]!
  bedrooms(where: BedroomWhereInput, orderBy: BedroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Bedroom]!
  bedroomInfoes(where: BedroomInfoWhereInput, orderBy: BedroomInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [BedroomInfo]!
  accommodationOptions(where: AccommodationOptionWhereInput, orderBy: AccommodationOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [AccommodationOption]!
  reservations(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reservation]!
  user(where: UserWhereUniqueInput!): User
  agency(where: AgencyWhereUniqueInput!): Agency
  institution(where: InstitutionWhereUniqueInput!): Institution
  family(where: FamilyWhereUniqueInput!): Family
  review(where: ReviewWhereUniqueInput!): Review
  photo(where: PhotoWhereUniqueInput!): Photo
  familyInfo(where: FamilyInfoWhereUniqueInput!): FamilyInfo
  tag(where: TagWhereUniqueInput!): Tag
  bedroom(where: BedroomWhereUniqueInput!): Bedroom
  bedroomInfo(where: BedroomInfoWhereUniqueInput!): BedroomInfo
  accommodationOption(where: AccommodationOptionWhereUniqueInput!): AccommodationOption
  reservation(where: ReservationWhereUniqueInput!): Reservation
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  agenciesConnection(where: AgencyWhereInput, orderBy: AgencyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AgencyConnection!
  institutionsConnection(where: InstitutionWhereInput, orderBy: InstitutionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): InstitutionConnection!
  familiesConnection(where: FamilyWhereInput, orderBy: FamilyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FamilyConnection!
  reviewsConnection(where: ReviewWhereInput, orderBy: ReviewOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReviewConnection!
  photosConnection(where: PhotoWhereInput, orderBy: PhotoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PhotoConnection!
  familyInfoesConnection(where: FamilyInfoWhereInput, orderBy: FamilyInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): FamilyInfoConnection!
  tagsConnection(where: TagWhereInput, orderBy: TagOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TagConnection!
  bedroomsConnection(where: BedroomWhereInput, orderBy: BedroomOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BedroomConnection!
  bedroomInfoesConnection(where: BedroomInfoWhereInput, orderBy: BedroomInfoOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): BedroomInfoConnection!
  accommodationOptionsConnection(where: AccommodationOptionWhereInput, orderBy: AccommodationOptionOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): AccommodationOptionConnection!
  reservationsConnection(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ReservationConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Reservation implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  bedroom(where: BedroomWhereInput): Bedroom
  accommodationType: AccommodationType!
  price: Float!
  start: DateTime!
  end: DateTime!
  status: ReservationStatus
  user(where: UserWhereInput): User
}

"""A connection to a list of items."""
type ReservationConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReservationEdge]!
  aggregate: AggregateReservation!
}

input ReservationCreateInput {
  accommodationType: AccommodationType!
  price: Float!
  start: DateTime!
  end: DateTime!
  status: ReservationStatus
  bedroom: BedroomCreateOneWithoutReservationsInput
  user: UserCreateOneWithoutReservationsInput
}

input ReservationCreateManyWithoutBedroomInput {
  create: [ReservationCreateWithoutBedroomInput!]
  connect: [ReservationWhereUniqueInput!]
}

input ReservationCreateManyWithoutUserInput {
  create: [ReservationCreateWithoutUserInput!]
  connect: [ReservationWhereUniqueInput!]
}

input ReservationCreateWithoutBedroomInput {
  accommodationType: AccommodationType!
  price: Float!
  start: DateTime!
  end: DateTime!
  status: ReservationStatus
  user: UserCreateOneWithoutReservationsInput
}

input ReservationCreateWithoutUserInput {
  accommodationType: AccommodationType!
  price: Float!
  start: DateTime!
  end: DateTime!
  status: ReservationStatus
  bedroom: BedroomCreateOneWithoutReservationsInput
}

"""An edge in a connection."""
type ReservationEdge {
  """The item at the end of the edge."""
  node: Reservation!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReservationOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  accommodationType_ASC
  accommodationType_DESC
  price_ASC
  price_DESC
  start_ASC
  start_DESC
  end_ASC
  end_DESC
  status_ASC
  status_DESC
}

type ReservationPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  accommodationType: AccommodationType!
  price: Float!
  start: DateTime!
  end: DateTime!
  status: ReservationStatus
}

enum ReservationStatus {
  REQUESTED
  CANCELED
  ACCEPTED
  REJECTED
}

type ReservationSubscriptionPayload {
  mutation: MutationType!
  node: Reservation
  updatedFields: [String!]
  previousValues: ReservationPreviousValues
}

input ReservationSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReservationSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReservationSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReservationSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReservationWhereInput
}

input ReservationUpdateInput {
  accommodationType: AccommodationType
  price: Float
  start: DateTime
  end: DateTime
  status: ReservationStatus
  bedroom: BedroomUpdateOneWithoutReservationsInput
  user: UserUpdateOneWithoutReservationsInput
}

input ReservationUpdateManyWithoutBedroomInput {
  create: [ReservationCreateWithoutBedroomInput!]
  connect: [ReservationWhereUniqueInput!]
  disconnect: [ReservationWhereUniqueInput!]
  delete: [ReservationWhereUniqueInput!]
  update: [ReservationUpdateWithWhereUniqueWithoutBedroomInput!]
  upsert: [ReservationUpsertWithWhereUniqueWithoutBedroomInput!]
}

input ReservationUpdateManyWithoutUserInput {
  create: [ReservationCreateWithoutUserInput!]
  connect: [ReservationWhereUniqueInput!]
  disconnect: [ReservationWhereUniqueInput!]
  delete: [ReservationWhereUniqueInput!]
  update: [ReservationUpdateWithWhereUniqueWithoutUserInput!]
  upsert: [ReservationUpsertWithWhereUniqueWithoutUserInput!]
}

input ReservationUpdateWithoutBedroomDataInput {
  accommodationType: AccommodationType
  price: Float
  start: DateTime
  end: DateTime
  status: ReservationStatus
  user: UserUpdateOneWithoutReservationsInput
}

input ReservationUpdateWithoutUserDataInput {
  accommodationType: AccommodationType
  price: Float
  start: DateTime
  end: DateTime
  status: ReservationStatus
  bedroom: BedroomUpdateOneWithoutReservationsInput
}

input ReservationUpdateWithWhereUniqueWithoutBedroomInput {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateWithoutBedroomDataInput!
}

input ReservationUpdateWithWhereUniqueWithoutUserInput {
  where: ReservationWhereUniqueInput!
  data: ReservationUpdateWithoutUserDataInput!
}

input ReservationUpsertWithWhereUniqueWithoutBedroomInput {
  where: ReservationWhereUniqueInput!
  update: ReservationUpdateWithoutBedroomDataInput!
  create: ReservationCreateWithoutBedroomInput!
}

input ReservationUpsertWithWhereUniqueWithoutUserInput {
  where: ReservationWhereUniqueInput!
  update: ReservationUpdateWithoutUserDataInput!
  create: ReservationCreateWithoutUserInput!
}

input ReservationWhereInput {
  """Logical AND on all given filters."""
  AND: [ReservationWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReservationWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReservationWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  accommodationType: AccommodationType

  """All values that are not equal to given value."""
  accommodationType_not: AccommodationType

  """All values that are contained in given list."""
  accommodationType_in: [AccommodationType!]

  """All values that are not contained in given list."""
  accommodationType_not_in: [AccommodationType!]
  price: Float

  """All values that are not equal to given value."""
  price_not: Float

  """All values that are contained in given list."""
  price_in: [Float!]

  """All values that are not contained in given list."""
  price_not_in: [Float!]

  """All values less than the given value."""
  price_lt: Float

  """All values less than or equal the given value."""
  price_lte: Float

  """All values greater than the given value."""
  price_gt: Float

  """All values greater than or equal the given value."""
  price_gte: Float
  start: DateTime

  """All values that are not equal to given value."""
  start_not: DateTime

  """All values that are contained in given list."""
  start_in: [DateTime!]

  """All values that are not contained in given list."""
  start_not_in: [DateTime!]

  """All values less than the given value."""
  start_lt: DateTime

  """All values less than or equal the given value."""
  start_lte: DateTime

  """All values greater than the given value."""
  start_gt: DateTime

  """All values greater than or equal the given value."""
  start_gte: DateTime
  end: DateTime

  """All values that are not equal to given value."""
  end_not: DateTime

  """All values that are contained in given list."""
  end_in: [DateTime!]

  """All values that are not contained in given list."""
  end_not_in: [DateTime!]

  """All values less than the given value."""
  end_lt: DateTime

  """All values less than or equal the given value."""
  end_lte: DateTime

  """All values greater than the given value."""
  end_gt: DateTime

  """All values greater than or equal the given value."""
  end_gte: DateTime
  status: ReservationStatus

  """All values that are not equal to given value."""
  status_not: ReservationStatus

  """All values that are contained in given list."""
  status_in: [ReservationStatus!]

  """All values that are not contained in given list."""
  status_not_in: [ReservationStatus!]
  bedroom: BedroomWhereInput
  user: UserWhereInput
}

input ReservationWhereUniqueInput {
  id: ID
}

type Review implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  rating: Int!
  text: String
  user(where: UserWhereInput): User
  family(where: FamilyWhereInput): Family!
}

"""A connection to a list of items."""
type ReviewConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ReviewEdge]!
  aggregate: AggregateReview!
}

input ReviewCreateInput {
  rating: Int!
  text: String
  user: UserCreateOneInput
  family: FamilyCreateOneWithoutReviewsInput!
}

input ReviewCreateManyWithoutFamilyInput {
  create: [ReviewCreateWithoutFamilyInput!]
  connect: [ReviewWhereUniqueInput!]
}

input ReviewCreateWithoutFamilyInput {
  rating: Int!
  text: String
  user: UserCreateOneInput
}

"""An edge in a connection."""
type ReviewEdge {
  """The item at the end of the edge."""
  node: Review!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ReviewOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  rating_ASC
  rating_DESC
  text_ASC
  text_DESC
}

type ReviewPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  rating: Int!
  text: String
}

type ReviewSubscriptionPayload {
  mutation: MutationType!
  node: Review
  updatedFields: [String!]
  previousValues: ReviewPreviousValues
}

input ReviewSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ReviewWhereInput
}

input ReviewUpdateInput {
  rating: Int
  text: String
  user: UserUpdateOneInput
  family: FamilyUpdateOneWithoutReviewsInput
}

input ReviewUpdateManyWithoutFamilyInput {
  create: [ReviewCreateWithoutFamilyInput!]
  connect: [ReviewWhereUniqueInput!]
  disconnect: [ReviewWhereUniqueInput!]
  delete: [ReviewWhereUniqueInput!]
  update: [ReviewUpdateWithWhereUniqueWithoutFamilyInput!]
  upsert: [ReviewUpsertWithWhereUniqueWithoutFamilyInput!]
}

input ReviewUpdateWithoutFamilyDataInput {
  rating: Int
  text: String
  user: UserUpdateOneInput
}

input ReviewUpdateWithWhereUniqueWithoutFamilyInput {
  where: ReviewWhereUniqueInput!
  data: ReviewUpdateWithoutFamilyDataInput!
}

input ReviewUpsertWithWhereUniqueWithoutFamilyInput {
  where: ReviewWhereUniqueInput!
  update: ReviewUpdateWithoutFamilyDataInput!
  create: ReviewCreateWithoutFamilyInput!
}

input ReviewWhereInput {
  """Logical AND on all given filters."""
  AND: [ReviewWhereInput!]

  """Logical OR on all given filters."""
  OR: [ReviewWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ReviewWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  rating: Int

  """All values that are not equal to given value."""
  rating_not: Int

  """All values that are contained in given list."""
  rating_in: [Int!]

  """All values that are not contained in given list."""
  rating_not_in: [Int!]

  """All values less than the given value."""
  rating_lt: Int

  """All values less than or equal the given value."""
  rating_lte: Int

  """All values greater than the given value."""
  rating_gt: Int

  """All values greater than or equal the given value."""
  rating_gte: Int
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
  user: UserWhereInput
  family: FamilyWhereInput
}

input ReviewWhereUniqueInput {
  id: ID
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  agency(where: AgencySubscriptionWhereInput): AgencySubscriptionPayload
  institution(where: InstitutionSubscriptionWhereInput): InstitutionSubscriptionPayload
  family(where: FamilySubscriptionWhereInput): FamilySubscriptionPayload
  review(where: ReviewSubscriptionWhereInput): ReviewSubscriptionPayload
  photo(where: PhotoSubscriptionWhereInput): PhotoSubscriptionPayload
  familyInfo(where: FamilyInfoSubscriptionWhereInput): FamilyInfoSubscriptionPayload
  tag(where: TagSubscriptionWhereInput): TagSubscriptionPayload
  bedroom(where: BedroomSubscriptionWhereInput): BedroomSubscriptionPayload
  bedroomInfo(where: BedroomInfoSubscriptionWhereInput): BedroomInfoSubscriptionPayload
  accommodationOption(where: AccommodationOptionSubscriptionWhereInput): AccommodationOptionSubscriptionPayload
  reservation(where: ReservationSubscriptionWhereInput): ReservationSubscriptionPayload
}

type Tag implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  category: TagCategory!
  label: String!
  families(where: FamilyWhereInput, orderBy: FamilyOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Family!]
}

enum TagCategory {
  DIET
  RULE
  AMENITY
}

"""A connection to a list of items."""
type TagConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TagEdge]!
  aggregate: AggregateTag!
}

input TagCreateInput {
  category: TagCategory!
  label: String!
  families: FamilyCreateManyWithoutTagsInput
}

input TagCreateManyWithoutFamiliesInput {
  create: [TagCreateWithoutFamiliesInput!]
  connect: [TagWhereUniqueInput!]
}

input TagCreateWithoutFamiliesInput {
  category: TagCategory!
  label: String!
}

"""An edge in a connection."""
type TagEdge {
  """The item at the end of the edge."""
  node: Tag!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TagOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  category_ASC
  category_DESC
  label_ASC
  label_DESC
}

type TagPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  category: TagCategory!
  label: String!
}

type TagSubscriptionPayload {
  mutation: MutationType!
  node: Tag
  updatedFields: [String!]
  previousValues: TagPreviousValues
}

input TagSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TagSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TagWhereInput
}

input TagUpdateInput {
  category: TagCategory
  label: String
  families: FamilyUpdateManyWithoutTagsInput
}

input TagUpdateManyWithoutFamiliesInput {
  create: [TagCreateWithoutFamiliesInput!]
  connect: [TagWhereUniqueInput!]
  disconnect: [TagWhereUniqueInput!]
  delete: [TagWhereUniqueInput!]
  update: [TagUpdateWithWhereUniqueWithoutFamiliesInput!]
  upsert: [TagUpsertWithWhereUniqueWithoutFamiliesInput!]
}

input TagUpdateWithoutFamiliesDataInput {
  category: TagCategory
  label: String
}

input TagUpdateWithWhereUniqueWithoutFamiliesInput {
  where: TagWhereUniqueInput!
  data: TagUpdateWithoutFamiliesDataInput!
}

input TagUpsertWithWhereUniqueWithoutFamiliesInput {
  where: TagWhereUniqueInput!
  update: TagUpdateWithoutFamiliesDataInput!
  create: TagCreateWithoutFamiliesInput!
}

input TagWhereInput {
  """Logical AND on all given filters."""
  AND: [TagWhereInput!]

  """Logical OR on all given filters."""
  OR: [TagWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TagWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  category: TagCategory

  """All values that are not equal to given value."""
  category_not: TagCategory

  """All values that are contained in given list."""
  category_in: [TagCategory!]

  """All values that are not contained in given list."""
  category_not_in: [TagCategory!]
  label: String

  """All values that are not equal to given value."""
  label_not: String

  """All values that are contained in given list."""
  label_in: [String!]

  """All values that are not contained in given list."""
  label_not_in: [String!]

  """All values less than the given value."""
  label_lt: String

  """All values less than or equal the given value."""
  label_lte: String

  """All values greater than the given value."""
  label_gt: String

  """All values greater than or equal the given value."""
  label_gte: String

  """All values containing the given string."""
  label_contains: String

  """All values not containing the given string."""
  label_not_contains: String

  """All values starting with the given string."""
  label_starts_with: String

  """All values not starting with the given string."""
  label_not_starts_with: String

  """All values ending with the given string."""
  label_ends_with: String

  """All values not ending with the given string."""
  label_not_ends_with: String
  families_every: FamilyWhereInput
  families_some: FamilyWhereInput
  families_none: FamilyWhereInput
}

input TagWhereUniqueInput {
  id: ID
  label: String
}

type User implements Node {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  auth0Id: String!
  email: String
  givenName: String
  familyName: String
  gender: Gender
  stripeCustomerId: String
  reservations(where: ReservationWhereInput, orderBy: ReservationOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Reservation!]
  institution(where: InstitutionWhereInput): Institution
  agency(where: AgencyWhereInput): Agency
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  auth0Id: String!
  email: String
  givenName: String
  familyName: String
  gender: Gender
  stripeCustomerId: String
  reservations: ReservationCreateManyWithoutUserInput
  institution: InstitutionCreateOneInput
  agency: AgencyCreateOneWithoutUsersInput
}

input UserCreateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutAgencyInput {
  create: [UserCreateWithoutAgencyInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input UserCreateOneWithoutReservationsInput {
  create: UserCreateWithoutReservationsInput
  connect: UserWhereUniqueInput
}

input UserCreateWithoutAgencyInput {
  auth0Id: String!
  email: String
  givenName: String
  familyName: String
  gender: Gender
  stripeCustomerId: String
  reservations: ReservationCreateManyWithoutUserInput
  institution: InstitutionCreateOneInput
}

input UserCreateWithoutReservationsInput {
  auth0Id: String!
  email: String
  givenName: String
  familyName: String
  gender: Gender
  stripeCustomerId: String
  institution: InstitutionCreateOneInput
  agency: AgencyCreateOneWithoutUsersInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  createdAt_ASC
  createdAt_DESC
  updatedAt_ASC
  updatedAt_DESC
  auth0Id_ASC
  auth0Id_DESC
  email_ASC
  email_DESC
  givenName_ASC
  givenName_DESC
  familyName_ASC
  familyName_DESC
  gender_ASC
  gender_DESC
  stripeCustomerId_ASC
  stripeCustomerId_DESC
}

type UserPreviousValues {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  auth0Id: String!
  email: String
  givenName: String
  familyName: String
  gender: Gender
  stripeCustomerId: String
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateDataInput {
  auth0Id: String
  email: String
  givenName: String
  familyName: String
  gender: Gender
  stripeCustomerId: String
  reservations: ReservationUpdateManyWithoutUserInput
  institution: InstitutionUpdateOneInput
  agency: AgencyUpdateOneWithoutUsersInput
}

input UserUpdateInput {
  auth0Id: String
  email: String
  givenName: String
  familyName: String
  gender: Gender
  stripeCustomerId: String
  reservations: ReservationUpdateManyWithoutUserInput
  institution: InstitutionUpdateOneInput
  agency: AgencyUpdateOneWithoutUsersInput
}

input UserUpdateManyInput {
  create: [UserCreateInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueNestedInput!]
  upsert: [UserUpsertWithWhereUniqueNestedInput!]
}

input UserUpdateManyWithoutAgencyInput {
  create: [UserCreateWithoutAgencyInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutAgencyInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutAgencyInput!]
}

input UserUpdateOneInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateDataInput
  upsert: UserUpsertNestedInput
}

input UserUpdateOneWithoutReservationsInput {
  create: UserCreateWithoutReservationsInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: UserUpdateWithoutReservationsDataInput
  upsert: UserUpsertWithoutReservationsInput
}

input UserUpdateWithoutAgencyDataInput {
  auth0Id: String
  email: String
  givenName: String
  familyName: String
  gender: Gender
  stripeCustomerId: String
  reservations: ReservationUpdateManyWithoutUserInput
  institution: InstitutionUpdateOneInput
}

input UserUpdateWithoutReservationsDataInput {
  auth0Id: String
  email: String
  givenName: String
  familyName: String
  gender: Gender
  stripeCustomerId: String
  institution: InstitutionUpdateOneInput
  agency: AgencyUpdateOneWithoutUsersInput
}

input UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  data: UserUpdateDataInput!
}

input UserUpdateWithWhereUniqueWithoutAgencyInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutAgencyDataInput!
}

input UserUpsertNestedInput {
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithoutReservationsInput {
  update: UserUpdateWithoutReservationsDataInput!
  create: UserCreateWithoutReservationsInput!
}

input UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput!
  update: UserUpdateDataInput!
  create: UserCreateInput!
}

input UserUpsertWithWhereUniqueWithoutAgencyInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutAgencyDataInput!
  create: UserCreateWithoutAgencyInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  createdAt: DateTime

  """All values that are not equal to given value."""
  createdAt_not: DateTime

  """All values that are contained in given list."""
  createdAt_in: [DateTime!]

  """All values that are not contained in given list."""
  createdAt_not_in: [DateTime!]

  """All values less than the given value."""
  createdAt_lt: DateTime

  """All values less than or equal the given value."""
  createdAt_lte: DateTime

  """All values greater than the given value."""
  createdAt_gt: DateTime

  """All values greater than or equal the given value."""
  createdAt_gte: DateTime
  updatedAt: DateTime

  """All values that are not equal to given value."""
  updatedAt_not: DateTime

  """All values that are contained in given list."""
  updatedAt_in: [DateTime!]

  """All values that are not contained in given list."""
  updatedAt_not_in: [DateTime!]

  """All values less than the given value."""
  updatedAt_lt: DateTime

  """All values less than or equal the given value."""
  updatedAt_lte: DateTime

  """All values greater than the given value."""
  updatedAt_gt: DateTime

  """All values greater than or equal the given value."""
  updatedAt_gte: DateTime
  auth0Id: String

  """All values that are not equal to given value."""
  auth0Id_not: String

  """All values that are contained in given list."""
  auth0Id_in: [String!]

  """All values that are not contained in given list."""
  auth0Id_not_in: [String!]

  """All values less than the given value."""
  auth0Id_lt: String

  """All values less than or equal the given value."""
  auth0Id_lte: String

  """All values greater than the given value."""
  auth0Id_gt: String

  """All values greater than or equal the given value."""
  auth0Id_gte: String

  """All values containing the given string."""
  auth0Id_contains: String

  """All values not containing the given string."""
  auth0Id_not_contains: String

  """All values starting with the given string."""
  auth0Id_starts_with: String

  """All values not starting with the given string."""
  auth0Id_not_starts_with: String

  """All values ending with the given string."""
  auth0Id_ends_with: String

  """All values not ending with the given string."""
  auth0Id_not_ends_with: String
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  givenName: String

  """All values that are not equal to given value."""
  givenName_not: String

  """All values that are contained in given list."""
  givenName_in: [String!]

  """All values that are not contained in given list."""
  givenName_not_in: [String!]

  """All values less than the given value."""
  givenName_lt: String

  """All values less than or equal the given value."""
  givenName_lte: String

  """All values greater than the given value."""
  givenName_gt: String

  """All values greater than or equal the given value."""
  givenName_gte: String

  """All values containing the given string."""
  givenName_contains: String

  """All values not containing the given string."""
  givenName_not_contains: String

  """All values starting with the given string."""
  givenName_starts_with: String

  """All values not starting with the given string."""
  givenName_not_starts_with: String

  """All values ending with the given string."""
  givenName_ends_with: String

  """All values not ending with the given string."""
  givenName_not_ends_with: String
  familyName: String

  """All values that are not equal to given value."""
  familyName_not: String

  """All values that are contained in given list."""
  familyName_in: [String!]

  """All values that are not contained in given list."""
  familyName_not_in: [String!]

  """All values less than the given value."""
  familyName_lt: String

  """All values less than or equal the given value."""
  familyName_lte: String

  """All values greater than the given value."""
  familyName_gt: String

  """All values greater than or equal the given value."""
  familyName_gte: String

  """All values containing the given string."""
  familyName_contains: String

  """All values not containing the given string."""
  familyName_not_contains: String

  """All values starting with the given string."""
  familyName_starts_with: String

  """All values not starting with the given string."""
  familyName_not_starts_with: String

  """All values ending with the given string."""
  familyName_ends_with: String

  """All values not ending with the given string."""
  familyName_not_ends_with: String
  gender: Gender

  """All values that are not equal to given value."""
  gender_not: Gender

  """All values that are contained in given list."""
  gender_in: [Gender!]

  """All values that are not contained in given list."""
  gender_not_in: [Gender!]
  stripeCustomerId: String

  """All values that are not equal to given value."""
  stripeCustomerId_not: String

  """All values that are contained in given list."""
  stripeCustomerId_in: [String!]

  """All values that are not contained in given list."""
  stripeCustomerId_not_in: [String!]

  """All values less than the given value."""
  stripeCustomerId_lt: String

  """All values less than or equal the given value."""
  stripeCustomerId_lte: String

  """All values greater than the given value."""
  stripeCustomerId_gt: String

  """All values greater than or equal the given value."""
  stripeCustomerId_gte: String

  """All values containing the given string."""
  stripeCustomerId_contains: String

  """All values not containing the given string."""
  stripeCustomerId_not_contains: String

  """All values starting with the given string."""
  stripeCustomerId_starts_with: String

  """All values not starting with the given string."""
  stripeCustomerId_not_starts_with: String

  """All values ending with the given string."""
  stripeCustomerId_ends_with: String

  """All values not ending with the given string."""
  stripeCustomerId_not_ends_with: String
  reservations_every: ReservationWhereInput
  reservations_some: ReservationWhereInput
  reservations_none: ReservationWhereInput
  institution: InstitutionWhereInput
  agency: AgencyWhereInput
}

input UserWhereUniqueInput {
  id: ID
  auth0Id: String
}
